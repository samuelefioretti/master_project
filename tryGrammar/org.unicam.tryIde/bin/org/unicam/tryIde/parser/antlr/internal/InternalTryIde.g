/*
 * generated by Xtext 2.19.0
 */
grammar InternalTryIde;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.unicam.tryIde.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.unicam.tryIde.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.unicam.tryIde.services.TryIdeGrammarAccess;

}

@parser::members {

 	private TryIdeGrammarAccess grammarAccess;

    public InternalTryIdeParser(TokenStream input, TryIdeGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Solidity";
   	}

   	@Override
   	protected TryIdeGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSolidity
entryRuleSolidity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSolidityRule()); }
	iv_ruleSolidity=ruleSolidity
	{ $current=$iv_ruleSolidity.current; }
	EOF;

// Rule Solidity
ruleSolidity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSolidityAccess().getImportDirectiveImportDirectiveParserRuleCall_0_0());
				}
				lv_importDirective_0_0=ruleImportDirective
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSolidityRule());
					}
					add(
						$current,
						"importDirective",
						lv_importDirective_0_0,
						"org.unicam.tryIde.TryIde.ImportDirective");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSolidityAccess().getContractContractParserRuleCall_1_0());
				}
				lv_contract_1_0=ruleContract
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSolidityRule());
					}
					add(
						$current,
						"contract",
						lv_contract_1_0,
						"org.unicam.tryIde.TryIde.Contract");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getSolidityAccess().getLibraryLibraryParserRuleCall_2_0());
				}
				lv_library_2_0=ruleLibrary
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSolidityRule());
					}
					add(
						$current,
						"library",
						lv_library_2_0,
						"org.unicam.tryIde.TryIde.Library");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)*
;

// Entry rule entryRuleImportDirective
entryRuleImportDirective returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportDirectiveRule()); }
	iv_ruleImportDirective=ruleImportDirective
	{ $current=$iv_ruleImportDirective.current; }
	EOF;

// Rule ImportDirective
ruleImportDirective returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='import'
			{
				newLeafNode(otherlv_0, grammarAccess.getImportDirectiveAccess().getImportKeyword_0_0());
			}
			(
				(
					lv_importURI_1_0=RULE_STRING
					{
						newLeafNode(lv_importURI_1_0, grammarAccess.getImportDirectiveAccess().getImportURISTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportDirectiveRule());
						}
						setWithLastConsumed(
							$current,
							"importURI",
							lv_importURI_1_0,
							"org.unicam.tryIde.TryIde.STRING");
					}
				)
			)
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getImportDirectiveAccess().getSemicolonKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='import'
			{
				newLeafNode(otherlv_3, grammarAccess.getImportDirectiveAccess().getImportKeyword_1_0());
			}
			otherlv_4='*'
			{
				newLeafNode(otherlv_4, grammarAccess.getImportDirectiveAccess().getAsteriskKeyword_1_1());
			}
			otherlv_5='as'
			{
				newLeafNode(otherlv_5, grammarAccess.getImportDirectiveAccess().getAsKeyword_1_2());
			}
			(
				(
					lv_unitAlias_6_0=RULE_ID
					{
						newLeafNode(lv_unitAlias_6_0, grammarAccess.getImportDirectiveAccess().getUnitAliasIDTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportDirectiveRule());
						}
						setWithLastConsumed(
							$current,
							"unitAlias",
							lv_unitAlias_6_0,
							"org.unicam.tryIde.TryIde.ID");
					}
				)
			)
			otherlv_7='from'
			{
				newLeafNode(otherlv_7, grammarAccess.getImportDirectiveAccess().getFromKeyword_1_4());
			}
			(
				(
					lv_importURI_8_0=RULE_STRING
					{
						newLeafNode(lv_importURI_8_0, grammarAccess.getImportDirectiveAccess().getImportURISTRINGTerminalRuleCall_1_5_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportDirectiveRule());
						}
						setWithLastConsumed(
							$current,
							"importURI",
							lv_importURI_8_0,
							"org.unicam.tryIde.TryIde.STRING");
					}
				)
			)
			otherlv_9=';'
			{
				newLeafNode(otherlv_9, grammarAccess.getImportDirectiveAccess().getSemicolonKeyword_1_6());
			}
		)
		    |
		(
			otherlv_10='import'
			{
				newLeafNode(otherlv_10, grammarAccess.getImportDirectiveAccess().getImportKeyword_2_0());
			}
			otherlv_11='{'
			{
				newLeafNode(otherlv_11, grammarAccess.getImportDirectiveAccess().getLeftCurlyBracketKeyword_2_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getImportDirectiveAccess().getSymbolAliasesSymbolAliasParserRuleCall_2_2_0());
					}
					lv_symbolAliases_12_0=ruleSymbolAlias
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getImportDirectiveRule());
						}
						add(
							$current,
							"symbolAliases",
							lv_symbolAliases_12_0,
							"org.unicam.tryIde.TryIde.SymbolAlias");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getImportDirectiveAccess().getCommaKeyword_2_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getImportDirectiveAccess().getSymbolAliasesSymbolAliasParserRuleCall_2_3_1_0());
						}
						lv_symbolAliases_14_0=ruleSymbolAlias
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getImportDirectiveRule());
							}
							add(
								$current,
								"symbolAliases",
								lv_symbolAliases_14_0,
								"org.unicam.tryIde.TryIde.SymbolAlias");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
			otherlv_15='}'
			{
				newLeafNode(otherlv_15, grammarAccess.getImportDirectiveAccess().getRightCurlyBracketKeyword_2_4());
			}
			otherlv_16='from'
			{
				newLeafNode(otherlv_16, grammarAccess.getImportDirectiveAccess().getFromKeyword_2_5());
			}
			(
				(
					lv_importURI_17_0=RULE_STRING
					{
						newLeafNode(lv_importURI_17_0, grammarAccess.getImportDirectiveAccess().getImportURISTRINGTerminalRuleCall_2_6_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getImportDirectiveRule());
						}
						setWithLastConsumed(
							$current,
							"importURI",
							lv_importURI_17_0,
							"org.unicam.tryIde.TryIde.STRING");
					}
				)
			)
			otherlv_18=';'
			{
				newLeafNode(otherlv_18, grammarAccess.getImportDirectiveAccess().getSemicolonKeyword_2_7());
			}
		)
	)
;

// Entry rule entryRuleSymbolAlias
entryRuleSymbolAlias returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymbolAliasRule()); }
	iv_ruleSymbolAlias=ruleSymbolAlias
	{ $current=$iv_ruleSymbolAlias.current; }
	EOF;

// Rule SymbolAlias
ruleSymbolAlias returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_symbol_0_0=RULE_ID
				{
					newLeafNode(lv_symbol_0_0, grammarAccess.getSymbolAliasAccess().getSymbolIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolAliasRule());
					}
					setWithLastConsumed(
						$current,
						"symbol",
						lv_symbol_0_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		otherlv_1='as'
		{
			newLeafNode(otherlv_1, grammarAccess.getSymbolAliasAccess().getAsKeyword_1());
		}
		(
			(
				lv_alias_2_0=RULE_ID
				{
					newLeafNode(lv_alias_2_0, grammarAccess.getSymbolAliasAccess().getAliasIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymbolAliasRule());
					}
					setWithLastConsumed(
						$current,
						"alias",
						lv_alias_2_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleContract
entryRuleContract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContractRule()); }
	iv_ruleContract=ruleContract
	{ $current=$iv_ruleContract.current; }
	EOF;

// Rule Contract
ruleContract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='contract'
		{
			newLeafNode(otherlv_0, grammarAccess.getContractAccess().getContractKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getContractAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getContractRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		(
			otherlv_2='is'
			{
				newLeafNode(otherlv_2, grammarAccess.getContractAccess().getIsKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getContractAccess().getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0());
					}
					lv_inheritanceSpecifiers_3_0=ruleInheritanceSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getContractRule());
						}
						add(
							$current,
							"inheritanceSpecifiers",
							lv_inheritanceSpecifiers_3_0,
							"org.unicam.tryIde.TryIde.InheritanceSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getContractAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getContractAccess().getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0());
						}
						lv_inheritanceSpecifiers_5_0=ruleInheritanceSpecifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getContractRule());
							}
							add(
								$current,
								"inheritanceSpecifiers",
								lv_inheritanceSpecifiers_5_0,
								"org.unicam.tryIde.TryIde.InheritanceSpecifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getContractAccess().getBodyDefinitionBodyParserRuleCall_3_0());
				}
				lv_body_6_0=ruleDefinitionBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getContractRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"org.unicam.tryIde.TryIde.DefinitionBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLibrary
entryRuleLibrary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLibraryRule()); }
	iv_ruleLibrary=ruleLibrary
	{ $current=$iv_ruleLibrary.current; }
	EOF;

// Rule Library
ruleLibrary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='library'
		{
			newLeafNode(otherlv_0, grammarAccess.getLibraryAccess().getLibraryKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLibraryAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLibraryRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		(
			otherlv_2='is'
			{
				newLeafNode(otherlv_2, grammarAccess.getLibraryAccess().getIsKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLibraryAccess().getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0());
					}
					lv_inheritanceSpecifiers_3_0=ruleInheritanceSpecifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLibraryRule());
						}
						add(
							$current,
							"inheritanceSpecifiers",
							lv_inheritanceSpecifiers_3_0,
							"org.unicam.tryIde.TryIde.InheritanceSpecifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getLibraryAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getLibraryAccess().getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0());
						}
						lv_inheritanceSpecifiers_5_0=ruleInheritanceSpecifier
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getLibraryRule());
							}
							add(
								$current,
								"inheritanceSpecifiers",
								lv_inheritanceSpecifiers_5_0,
								"org.unicam.tryIde.TryIde.InheritanceSpecifier");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getLibraryAccess().getBodyDefinitionBodyParserRuleCall_3_0());
				}
				lv_body_6_0=ruleDefinitionBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLibraryRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"org.unicam.tryIde.TryIde.DefinitionBody");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleDefinitionBody
entryRuleDefinitionBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionBodyRule()); }
	iv_ruleDefinitionBody=ruleDefinitionBody
	{ $current=$iv_ruleDefinitionBody.current; }
	EOF;

// Rule DefinitionBody
ruleDefinitionBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDefinitionBodyAccess().getDefinitionBodyAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getDefinitionBodyAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionBodyAccess().getFunctionsFunctionDefinitionParserRuleCall_2_0_0());
					}
					lv_functions_2_0=ruleFunctionDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
						}
						add(
							$current,
							"functions",
							lv_functions_2_0,
							"org.unicam.tryIde.TryIde.FunctionDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionBodyAccess().getStructsStructDefinitionParserRuleCall_2_1_0());
					}
					lv_structs_3_0=ruleStructDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
						}
						add(
							$current,
							"structs",
							lv_structs_3_0,
							"org.unicam.tryIde.TryIde.StructDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionBodyAccess().getEnumsEnumDefinitionParserRuleCall_2_2_0());
					}
					lv_enums_4_0=ruleEnumDefinition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
						}
						add(
							$current,
							"enums",
							lv_enums_4_0,
							"org.unicam.tryIde.TryIde.EnumDefinition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getDefinitionBodyAccess().getVariablesVariableDeclarationParserRuleCall_2_3_0_0());
						}
						lv_variables_5_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
							}
							add(
								$current,
								"variables",
								lv_variables_5_0,
								"org.unicam.tryIde.TryIde.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getDefinitionBodyAccess().getSemicolonKeyword_2_3_1());
				}
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionBodyAccess().getModifiersModifierParserRuleCall_2_4_0());
					}
					lv_modifiers_7_0=ruleModifier
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
						}
						add(
							$current,
							"modifiers",
							lv_modifiers_7_0,
							"org.unicam.tryIde.TryIde.Modifier");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getDefinitionBodyAccess().getEventsEventParserRuleCall_2_5_0());
					}
					lv_events_8_0=ruleEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDefinitionBodyRule());
						}
						add(
							$current,
							"events",
							lv_events_8_0,
							"org.unicam.tryIde.TryIde.Event");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getDefinitionBodyAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleInheritanceSpecifier
entryRuleInheritanceSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInheritanceSpecifierRule()); }
	iv_ruleInheritanceSpecifier=ruleInheritanceSpecifier
	{ $current=$iv_ruleInheritanceSpecifier.current; }
	EOF;

// Rule InheritanceSpecifier
ruleInheritanceSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInheritanceSpecifierRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getInheritanceSpecifierAccess().getSuperTypeContractOrLibraryCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInheritanceSpecifierAccess().getArgsFunctionCallListArgumentsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleFunctionCallListArguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInheritanceSpecifierRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.unicam.tryIde.TryIde.FunctionCallListArguments");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleFunctionCallListArguments
entryRuleFunctionCallListArguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallListArgumentsRule()); }
	iv_ruleFunctionCallListArguments=ruleFunctionCallListArguments
	{ $current=$iv_ruleFunctionCallListArguments.current; }
	EOF;

// Rule FunctionCallListArguments
ruleFunctionCallListArguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionCallListArgumentsAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionCallListArgumentsAccess().getFunctionCallListArgumentsAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionCallListArgumentsAccess().getArgumentsExpressionParserRuleCall_2_0_0());
					}
					lv_arguments_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionCallListArgumentsRule());
						}
						add(
							$current,
							"arguments",
							lv_arguments_2_0,
							"org.unicam.tryIde.TryIde.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getFunctionCallListArgumentsAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallListArgumentsAccess().getArgumentsExpressionParserRuleCall_2_1_1_0());
						}
						lv_arguments_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallListArgumentsRule());
							}
							add(
								$current,
								"arguments",
								lv_arguments_4_0,
								"org.unicam.tryIde.TryIde.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionCallListArgumentsAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionCallArguments
entryRuleFunctionCallArguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallArgumentsRule()); }
	iv_ruleFunctionCallArguments=ruleFunctionCallArguments
	{ $current=$iv_ruleFunctionCallArguments.current; }
	EOF;

// Rule FunctionCallArguments
ruleFunctionCallArguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getFunctionCallArgumentsAccess().getLeftParenthesisKeyword_0_0());
			}
			otherlv_1='{'
			{
				newLeafNode(otherlv_1, grammarAccess.getFunctionCallArgumentsAccess().getLeftCurlyBracketKeyword_0_1());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getFunctionCallArgumentsAccess().getFunctionCallArgumentsAction_0_2(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getFunctionCallArgumentsAccess().getArgsFunctionCallArgParserRuleCall_0_3_0_0());
						}
						lv_args_3_0=ruleFunctionCallArg
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getFunctionCallArgumentsRule());
							}
							add(
								$current,
								"args",
								lv_args_3_0,
								"org.unicam.tryIde.TryIde.FunctionCallArg");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4=','
					{
						newLeafNode(otherlv_4, grammarAccess.getFunctionCallArgumentsAccess().getCommaKeyword_0_3_1_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getFunctionCallArgumentsAccess().getArgsFunctionCallArgParserRuleCall_0_3_1_1_0());
							}
							lv_args_5_0=ruleFunctionCallArg
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getFunctionCallArgumentsRule());
								}
								add(
									$current,
									"args",
									lv_args_5_0,
									"org.unicam.tryIde.TryIde.FunctionCallArg");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)*
			)?
			otherlv_6='}'
			{
				newLeafNode(otherlv_6, grammarAccess.getFunctionCallArgumentsAccess().getRightCurlyBracketKeyword_0_4());
			}
			otherlv_7=')'
			{
				newLeafNode(otherlv_7, grammarAccess.getFunctionCallArgumentsAccess().getRightParenthesisKeyword_0_5());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getFunctionCallArgumentsAccess().getFunctionCallListArgumentsParserRuleCall_1());
		}
		this_FunctionCallListArguments_8=ruleFunctionCallListArguments
		{
			$current = $this_FunctionCallListArguments_8.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionCallArg
entryRuleFunctionCallArg returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallArgRule()); }
	iv_ruleFunctionCallArg=ruleFunctionCallArg
	{ $current=$iv_ruleFunctionCallArg.current; }
	EOF;

// Rule FunctionCallArg
ruleFunctionCallArg returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getFunctionCallArgAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallArgRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallArgAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallArgAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallArgRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionRule()); }
	iv_ruleFunctionDefinition=ruleFunctionDefinition
	{ $current=$iv_ruleFunctionDefinition.current; }
	EOF;

// Rule FunctionDefinition
ruleFunctionDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDefinitionAccess().getFunctionKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionDefinitionAccess().getFunctionDefinitionAction_1(),
					$current);
			}
		)
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getParametersParameterListParserRuleCall_3_0());
				}
				lv_parameters_3_0=ruleParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_3_0,
						"org.unicam.tryIde.TryIde.ParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_4_0());
				}
				lv_optionalElements_4_0=ruleFunctionDefinitionOptionalElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
					}
					add(
						$current,
						"optionalElements",
						lv_optionalElements_4_0,
						"org.unicam.tryIde.TryIde.FunctionDefinitionOptionalElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_5='returns'
			{
				newLeafNode(otherlv_5, grammarAccess.getFunctionDefinitionAccess().getReturnsKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getReturnParametersReturnsParameterListParserRuleCall_5_1_0());
					}
					lv_returnParameters_6_0=ruleReturnsParameterList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						set(
							$current,
							"returnParameters",
							lv_returnParameters_6_0,
							"org.unicam.tryIde.TryIde.ReturnsParameterList");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFunctionDefinitionAccess().getBlockBlockParserRuleCall_6_0_0());
					}
					lv_block_7_0=ruleBlock
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFunctionDefinitionRule());
						}
						set(
							$current,
							"block",
							lv_block_7_0,
							"org.unicam.tryIde.TryIde.Block");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			otherlv_8=';'
			{
				newLeafNode(otherlv_8, grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_6_1());
			}
		)
	)
;

// Entry rule entryRuleFunctionDefinitionOptionalElement
entryRuleFunctionDefinitionOptionalElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDefinitionOptionalElementRule()); }
	iv_ruleFunctionDefinitionOptionalElement=ruleFunctionDefinitionOptionalElement
	{ $current=$iv_ruleFunctionDefinitionOptionalElement.current; }
	EOF;

// Rule FunctionDefinitionOptionalElement
ruleFunctionDefinitionOptionalElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFunctionDefinitionOptionalElementAccess().getConstParserRuleCall_0());
		}
		this_Const_0=ruleConst
		{
			$current = $this_Const_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionDefinitionOptionalElementAccess().getModifierInvocationParserRuleCall_1());
		}
		this_ModifierInvocation_1=ruleModifierInvocation
		{
			$current = $this_ModifierInvocation_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFunctionDefinitionOptionalElementAccess().getVisibilitySpecifierParserRuleCall_2());
		}
		this_VisibilitySpecifier_2=ruleVisibilitySpecifier
		{
			$current = $this_VisibilitySpecifier_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleConst
entryRuleConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstRule()); }
	iv_ruleConst=ruleConst
	{ $current=$iv_ruleConst.current; }
	EOF;

// Rule Const
ruleConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constant'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstAccess().getConstantKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstAccess().getConstAction_1(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleVisibilitySpecifier
entryRuleVisibilitySpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVisibilitySpecifierRule()); }
	iv_ruleVisibilitySpecifier=ruleVisibilitySpecifier
	{ $current=$iv_ruleVisibilitySpecifier.current; }
	EOF;

// Rule VisibilitySpecifier
ruleVisibilitySpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getVisibilitySpecifierAccess().getVisibilityVisibilityEnumEnumRuleCall_0());
			}
			lv_visibility_0_0=ruleVisibilityEnum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getVisibilitySpecifierRule());
				}
				set(
					$current,
					"visibility",
					lv_visibility_0_0,
					"org.unicam.tryIde.TryIde.VisibilityEnum");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStructDefinition
entryRuleStructDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStructDefinitionRule()); }
	iv_ruleStructDefinition=ruleStructDefinition
	{ $current=$iv_ruleStructDefinition.current; }
	EOF;

// Rule StructDefinition
ruleStructDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='struct'
		{
			newLeafNode(otherlv_0, grammarAccess.getStructDefinitionAccess().getStructKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getStructDefinitionAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getStructDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getStructDefinitionAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStructDefinitionAccess().getMembersVariableDeclarationParserRuleCall_3_0_0());
					}
					lv_members_3_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStructDefinitionRule());
						}
						add(
							$current,
							"members",
							lv_members_3_0,
							"org.unicam.tryIde.TryIde.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getStructDefinitionAccess().getSemicolonKeyword_3_1());
			}
		)*
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getStructDefinitionAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleEnumDefinition
entryRuleEnumDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumDefinitionRule()); }
	iv_ruleEnumDefinition=ruleEnumDefinition
	{ $current=$iv_ruleEnumDefinition.current; }
	EOF;

// Rule EnumDefinition
ruleEnumDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumDefinitionAccess().getVisibilityVisibilitySpecifierParserRuleCall_0_0());
				}
				lv_visibility_0_0=ruleVisibilitySpecifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumDefinitionRule());
					}
					set(
						$current,
						"visibility",
						lv_visibility_0_0,
						"org.unicam.tryIde.TryIde.VisibilitySpecifier");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_1='enum'
		{
			newLeafNode(otherlv_1, grammarAccess.getEnumDefinitionAccess().getEnumKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getEnumDefinitionAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEnumDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getEnumDefinitionAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getEnumDefinitionAccess().getMembersEnumValueParserRuleCall_4_0());
				}
				lv_members_4_0=ruleEnumValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEnumDefinitionRule());
					}
					add(
						$current,
						"members",
						lv_members_4_0,
						"org.unicam.tryIde.TryIde.EnumValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getEnumDefinitionAccess().getCommaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getEnumDefinitionAccess().getMembersEnumValueParserRuleCall_5_1_0());
					}
					lv_members_6_0=ruleEnumValue
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEnumDefinitionRule());
						}
						add(
							$current,
							"members",
							lv_members_6_0,
							"org.unicam.tryIde.TryIde.EnumValue");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getEnumDefinitionAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEnumValue
entryRuleEnumValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEnumValueRule()); }
	iv_ruleEnumValue=ruleEnumValue
	{ $current=$iv_ruleEnumValue.current; }
	EOF;

// Rule EnumValue
ruleEnumValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getEnumValueAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEnumValueRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.unicam.tryIde.TryIde.ID");
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.unicam.tryIde.TryIde.ID");
			}
		)
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getStandardVariableDeclarationParserRuleCall_0());
		}
		this_StandardVariableDeclaration_0=ruleStandardVariableDeclaration
		{
			$current = $this_StandardVariableDeclaration_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVarVariableDeclarationParserRuleCall_1());
		}
		this_VarVariableDeclaration_1=ruleVarVariableDeclaration
		{
			$current = $this_VarVariableDeclaration_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVarVariableTupleVariableDeclarationParserRuleCall_2());
		}
		this_VarVariableTupleVariableDeclaration_2=ruleVarVariableTupleVariableDeclaration
		{
			$current = $this_VarVariableTupleVariableDeclaration_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStandardVariableDeclaration
entryRuleStandardVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStandardVariableDeclarationRule()); }
	iv_ruleStandardVariableDeclaration=ruleStandardVariableDeclaration
	{ $current=$iv_ruleStandardVariableDeclaration.current; }
	EOF;

// Rule StandardVariableDeclaration
ruleStandardVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardVariableDeclarationAccess().getTypeStandardTypeParserRuleCall_0_0());
				}
				lv_type_0_0=ruleStandardType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardVariableDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.unicam.tryIde.TryIde.StandardType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardVariableDeclarationAccess().getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_1_0());
				}
				lv_optionalElements_1_0=ruleVariableDeclarationOptionalElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardVariableDeclarationRule());
					}
					add(
						$current,
						"optionalElements",
						lv_optionalElements_1_0,
						"org.unicam.tryIde.TryIde.VariableDeclarationOptionalElement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getStandardVariableDeclarationAccess().getVariableVariableParserRuleCall_2_0());
				}
				lv_variable_2_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStandardVariableDeclarationRule());
					}
					set(
						$current,
						"variable",
						lv_variable_2_0,
						"org.unicam.tryIde.TryIde.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getStandardVariableDeclarationAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStandardVariableDeclarationAccess().getExpressionExpressionParserRuleCall_3_1_0());
					}
					lv_expression_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStandardVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"org.unicam.tryIde.TryIde.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVarVariableDeclaration
entryRuleVarVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarVariableDeclarationRule()); }
	iv_ruleVarVariableDeclaration=ruleVarVariableDeclaration
	{ $current=$iv_ruleVarVariableDeclaration.current; }
	EOF;

// Rule VarVariableDeclaration
ruleVarVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarVariableDeclarationAccess().getVarTypeVarTypeParserRuleCall_0_0());
				}
				lv_varType_0_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarVariableDeclarationRule());
					}
					set(
						$current,
						"varType",
						lv_varType_0_0,
						"org.unicam.tryIde.TryIde.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVarVariableDeclarationAccess().getVariableVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarVariableDeclarationRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.unicam.tryIde.TryIde.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVarVariableDeclarationAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarVariableDeclarationAccess().getExpressionExpressionParserRuleCall_2_1_0());
					}
					lv_expression_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.unicam.tryIde.TryIde.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVarVariableTupleVariableDeclaration
entryRuleVarVariableTupleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarVariableTupleVariableDeclarationRule()); }
	iv_ruleVarVariableTupleVariableDeclaration=ruleVarVariableTupleVariableDeclaration
	{ $current=$iv_ruleVarVariableTupleVariableDeclaration.current; }
	EOF;

// Rule VarVariableTupleVariableDeclaration
ruleVarVariableTupleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarVariableTupleVariableDeclarationAccess().getVarTypeVarTypeParserRuleCall_0_0());
				}
				lv_varType_0_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarVariableTupleVariableDeclarationRule());
					}
					set(
						$current,
						"varType",
						lv_varType_0_0,
						"org.unicam.tryIde.TryIde.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVarVariableTupleVariableDeclarationAccess().getTupleTupleParserRuleCall_1_0());
				}
				lv_tuple_1_0=ruleTuple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarVariableTupleVariableDeclarationRule());
					}
					set(
						$current,
						"tuple",
						lv_tuple_1_0,
						"org.unicam.tryIde.TryIde.Tuple");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='='
			{
				newLeafNode(otherlv_2, grammarAccess.getVarVariableTupleVariableDeclarationAccess().getEqualsSignKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarVariableTupleVariableDeclarationAccess().getExpressionExpressionParserRuleCall_2_1_0());
					}
					lv_expression_3_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarVariableTupleVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_3_0,
							"org.unicam.tryIde.TryIde.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleVariableDeclarationOptionalElement
entryRuleVariableDeclarationOptionalElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationOptionalElementRule()); }
	iv_ruleVariableDeclarationOptionalElement=ruleVariableDeclarationOptionalElement
	{ $current=$iv_ruleVariableDeclarationOptionalElement.current; }
	EOF;

// Rule VariableDeclarationOptionalElement
ruleVariableDeclarationOptionalElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableDeclarationOptionalElementAccess().getVisibilitySpecifierParserRuleCall_0());
		}
		this_VisibilitySpecifier_0=ruleVisibilitySpecifier
		{
			$current = $this_VisibilitySpecifier_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDeclarationOptionalElementAccess().getIndexedSpeciferParserRuleCall_1());
		}
		this_IndexedSpecifer_1=ruleIndexedSpecifer
		{
			$current = $this_IndexedSpecifer_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDeclarationOptionalElementAccess().getConstantSpecifierParserRuleCall_2());
		}
		this_ConstantSpecifier_2=ruleConstantSpecifier
		{
			$current = $this_ConstantSpecifier_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableDeclarationOptionalElementAccess().getLocationSpecifierParserRuleCall_3());
		}
		this_LocationSpecifier_3=ruleLocationSpecifier
		{
			$current = $this_LocationSpecifier_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIndexedSpecifer
entryRuleIndexedSpecifer returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexedSpeciferRule()); }
	iv_ruleIndexedSpecifer=ruleIndexedSpecifer
	{ $current=$iv_ruleIndexedSpecifer.current; }
	EOF;

// Rule IndexedSpecifer
ruleIndexedSpecifer returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='indexed'
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexedSpeciferAccess().getIndexedKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndexedSpeciferAccess().getIndexedSpeciferAction_1(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleConstantSpecifier
entryRuleConstantSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantSpecifierRule()); }
	iv_ruleConstantSpecifier=ruleConstantSpecifier
	{ $current=$iv_ruleConstantSpecifier.current; }
	EOF;

// Rule ConstantSpecifier
ruleConstantSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='constant'
		{
			newLeafNode(otherlv_0, grammarAccess.getConstantSpecifierAccess().getConstantKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getConstantSpecifierAccess().getConstantSpecifierAction_1(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleLocationSpecifier
entryRuleLocationSpecifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLocationSpecifierRule()); }
	iv_ruleLocationSpecifier=ruleLocationSpecifier
	{ $current=$iv_ruleLocationSpecifier.current; }
	EOF;

// Rule LocationSpecifier
ruleLocationSpecifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLocationSpecifierAccess().getLocationLocationSpecifierEnumEnumRuleCall_0());
			}
			lv_location_0_0=ruleLocationSpecifierEnum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLocationSpecifierRule());
				}
				set(
					$current,
					"location",
					lv_location_0_0,
					"org.unicam.tryIde.TryIde.LocationSpecifierEnum");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getStandardTypeParserRuleCall_0());
		}
		this_StandardType_0=ruleStandardType
		{
			$current = $this_StandardType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeAccess().getIsVarTypeVarTypeParserRuleCall_1_0());
				}
				lv_isVarType_1_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeRule());
					}
					set(
						$current,
						"isVarType",
						true,
						"org.unicam.tryIde.TryIde.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStandardType
entryRuleStandardType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStandardTypeRule()); }
	iv_ruleStandardType=ruleStandardType
	{ $current=$iv_ruleStandardType.current; }
	EOF;

// Rule StandardType
ruleStandardType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStandardTypeAccess().getElementaryTypeParserRuleCall_0_0());
			}
			this_ElementaryType_0=ruleElementaryType
			{
				$current = $this_ElementaryType_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStandardTypeAccess().getDimensionArrayDimensionsParserRuleCall_0_1_0());
					}
					lv_dimension_1_0=ruleArrayDimensions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStandardTypeRule());
						}
						set(
							$current,
							"dimension",
							lv_dimension_1_0,
							"org.unicam.tryIde.TryIde.ArrayDimensions");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		{
			newCompositeNode(grammarAccess.getStandardTypeAccess().getMappingParserRuleCall_1());
		}
		this_Mapping_2=ruleMapping
		{
			$current = $this_Mapping_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStandardTypeAccess().getQualifiedIdentifierParserRuleCall_2());
		}
		this_QualifiedIdentifier_3=ruleQualifiedIdentifier
		{
			$current = $this_QualifiedIdentifier_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStandardTypeWithoutQualifiedIdentifier
entryRuleStandardTypeWithoutQualifiedIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStandardTypeWithoutQualifiedIdentifierRule()); }
	iv_ruleStandardTypeWithoutQualifiedIdentifier=ruleStandardTypeWithoutQualifiedIdentifier
	{ $current=$iv_ruleStandardTypeWithoutQualifiedIdentifier.current; }
	EOF;

// Rule StandardTypeWithoutQualifiedIdentifier
ruleStandardTypeWithoutQualifiedIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getStandardTypeWithoutQualifiedIdentifierAccess().getElementaryTypeParserRuleCall_0_0());
			}
			this_ElementaryType_0=ruleElementaryType
			{
				$current = $this_ElementaryType_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getStandardTypeWithoutQualifiedIdentifierAccess().getDimensionArrayDimensionsParserRuleCall_0_1_0());
					}
					lv_dimension_1_0=ruleArrayDimensions
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStandardTypeWithoutQualifiedIdentifierRule());
						}
						set(
							$current,
							"dimension",
							lv_dimension_1_0,
							"org.unicam.tryIde.TryIde.ArrayDimensions");
						afterParserOrEnumRuleCall();
					}
				)
			)?
		)
		    |
		{
			newCompositeNode(grammarAccess.getStandardTypeWithoutQualifiedIdentifierAccess().getMappingParserRuleCall_1());
		}
		this_Mapping_2=ruleMapping
		{
			$current = $this_Mapping_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleElementaryType
entryRuleElementaryType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementaryTypeRule()); }
	iv_ruleElementaryType=ruleElementaryType
	{ $current=$iv_ruleElementaryType.current; }
	EOF;

// Rule ElementaryType
ruleElementaryType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getElementaryTypeAccess().getNameElementaryTypeNameEnumEnumRuleCall_0());
			}
			lv_name_0_0=ruleElementaryTypeNameEnum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getElementaryTypeRule());
				}
				set(
					$current,
					"name",
					lv_name_0_0,
					"org.unicam.tryIde.TryIde.ElementaryTypeNameEnum");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleMapping
entryRuleMapping returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMappingRule()); }
	iv_ruleMapping=ruleMapping
	{ $current=$iv_ruleMapping.current; }
	EOF;

// Rule Mapping
ruleMapping returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='mapping'
		{
			newLeafNode(otherlv_0, grammarAccess.getMappingAccess().getMappingKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMappingAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingAccess().getKeyTypeElementaryTypeNameEnumEnumRuleCall_2_0());
				}
				lv_keyType_2_0=ruleElementaryTypeNameEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRule());
					}
					set(
						$current,
						"keyType",
						lv_keyType_2_0,
						"org.unicam.tryIde.TryIde.ElementaryTypeNameEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='=>'
		{
			newLeafNode(otherlv_3, grammarAccess.getMappingAccess().getEqualsSignGreaterThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMappingAccess().getValueTypeTypeParserRuleCall_4_0());
				}
				lv_valueType_4_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMappingRule());
					}
					set(
						$current,
						"valueType",
						lv_valueType_4_0,
						"org.unicam.tryIde.TryIde.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getMappingAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleArrayDimensions
entryRuleArrayDimensions returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArrayDimensionsRule()); }
	iv_ruleArrayDimensions=ruleArrayDimensions
	{ $current=$iv_ruleArrayDimensions.current; }
	EOF;

// Rule ArrayDimensions
ruleArrayDimensions returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getArrayDimensionsAccess().getLeftSquareBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getArrayDimensionsAccess().getArrayDimensionsAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getArrayDimensionsAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getArrayDimensionsRule());
					}
					add(
						$current,
						"value",
						lv_value_2_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getArrayDimensionsAccess().getRightSquareBracketKeyword_3());
		}
		(
			otherlv_4='['
			{
				newLeafNode(otherlv_4, grammarAccess.getArrayDimensionsAccess().getLeftSquareBracketKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getArrayDimensionsAccess().getValueExpressionParserRuleCall_4_1_0());
					}
					lv_value_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArrayDimensionsRule());
						}
						add(
							$current,
							"value",
							lv_value_5_0,
							"org.unicam.tryIde.TryIde.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			otherlv_6=']'
			{
				newLeafNode(otherlv_6, grammarAccess.getArrayDimensionsAccess().getRightSquareBracketKeyword_4_2());
			}
		)*
	)
;

// Entry rule entryRuleVarType
entryRuleVarType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	iv_ruleVarType=ruleVarType
	{ $current=$iv_ruleVarType.current.getText(); }
	EOF;

// Rule VarType
ruleVarType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='var'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getVarTypeAccess().getVarKeyword());
	}
;

// Entry rule entryRuleTuple
entryRuleTuple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleRule()); }
	iv_ruleTuple=ruleTuple
	{ $current=$iv_ruleTuple.current; }
	EOF;

// Rule Tuple
ruleTuple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getTupleAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTupleAccess().getTupleAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getTupleAccess().getMembersExpressionParserRuleCall_2_0_0());
					}
					lv_members_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTupleRule());
						}
						add(
							$current,
							"members",
							lv_members_2_0,
							"org.unicam.tryIde.TryIde.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)?
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getTupleAccess().getMembersTupleSeparatorParserRuleCall_2_1_0_0());
						}
						lv_members_3_0=ruleTupleSeparator
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTupleRule());
							}
							add(
								$current,
								"members",
								lv_members_3_0,
								"org.unicam.tryIde.TryIde.TupleSeparator");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getTupleAccess().getMembersExpressionParserRuleCall_2_1_1_0());
						}
						lv_members_4_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getTupleRule());
							}
							add(
								$current,
								"members",
								lv_members_4_0,
								"org.unicam.tryIde.TryIde.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
			)+
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getTupleAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTupleSeparator
entryRuleTupleSeparator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTupleSeparatorRule()); }
	iv_ruleTupleSeparator=ruleTupleSeparator
	{ $current=$iv_ruleTupleSeparator.current; }
	EOF;

// Rule TupleSeparator
ruleTupleSeparator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getTupleSeparatorAccess().getCommaKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTupleSeparatorAccess().getTupleSeparatorAction_1(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleSimpleStatement
entryRuleSimpleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStatementRule()); }
	iv_ruleSimpleStatement=ruleSimpleStatement
	{ $current=$iv_ruleSimpleStatement.current; }
	EOF;

// Rule SimpleStatement
ruleSimpleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSimpleStatementAccess().getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0());
				}
				this_StandardTypeWithoutQualifiedIdentifier_0=ruleStandardTypeWithoutQualifiedIdentifier
				{
					$current = $this_StandardTypeWithoutQualifiedIdentifier_0.current;
					afterParserOrEnumRuleCall();
				}
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getSimpleStatementAccess().getStandardVariableDeclarationTypeAction_0_0_1_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleStatementAccess().getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0());
							}
							lv_optionalElements_2_0=ruleVariableDeclarationOptionalElement
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
								}
								add(
									$current,
									"optionalElements",
									lv_optionalElements_2_0,
									"org.unicam.tryIde.TryIde.VariableDeclarationOptionalElement");
								afterParserOrEnumRuleCall();
							}
						)
					)*
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleStatementAccess().getVariableVariableParserRuleCall_0_0_1_2_0());
							}
							lv_variable_3_0=ruleVariable
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
								}
								set(
									$current,
									"variable",
									lv_variable_3_0,
									"org.unicam.tryIde.TryIde.Variable");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_4='='
						{
							newLeafNode(otherlv_4, grammarAccess.getSimpleStatementAccess().getEqualsSignKeyword_0_0_1_3_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getSimpleStatementAccess().getExpressionExpressionParserRuleCall_0_0_1_3_1_0());
								}
								lv_expression_5_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
									}
									set(
										$current,
										"expression",
										lv_expression_5_0,
										"org.unicam.tryIde.TryIde.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)?
				)
			)
			    |
			(
				{
					newCompositeNode(grammarAccess.getSimpleStatementAccess().getVarTypeParserRuleCall_0_1_0());
				}
				ruleVarType
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						(
							{
								$current = forceCreateModelElement(
									grammarAccess.getSimpleStatementAccess().getVarVariableTypeDeclarationAction_0_1_1_0_0(),
									$current);
							}
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getSimpleStatementAccess().getVariableVariableParserRuleCall_0_1_1_0_1_0());
								}
								lv_variable_8_0=ruleVariable
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
									}
									set(
										$current,
										"variable",
										lv_variable_8_0,
										"org.unicam.tryIde.TryIde.Variable");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_9='='
							{
								newLeafNode(otherlv_9, grammarAccess.getSimpleStatementAccess().getEqualsSignKeyword_0_1_1_0_2_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getSimpleStatementAccess().getExpressionExpressionParserRuleCall_0_1_1_0_2_1_0());
									}
									lv_expression_10_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
										}
										set(
											$current,
											"expression",
											lv_expression_10_0,
											"org.unicam.tryIde.TryIde.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)
					)
					    |
					(
						(
							{
								$current = forceCreateModelElement(
									grammarAccess.getSimpleStatementAccess().getVarVariableTupleVariableDeclarationAction_0_1_1_1_0(),
									$current);
							}
						)
						(
							(
								{
									newCompositeNode(grammarAccess.getSimpleStatementAccess().getTupleTupleParserRuleCall_0_1_1_1_1_0());
								}
								lv_tuple_12_0=ruleTuple
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
									}
									set(
										$current,
										"tuple",
										lv_tuple_12_0,
										"org.unicam.tryIde.TryIde.Tuple");
									afterParserOrEnumRuleCall();
								}
							)
						)
						(
							otherlv_13='='
							{
								newLeafNode(otherlv_13, grammarAccess.getSimpleStatementAccess().getEqualsSignKeyword_0_1_1_1_2_0());
							}
							(
								(
									{
										newCompositeNode(grammarAccess.getSimpleStatementAccess().getExpressionExpressionParserRuleCall_0_1_1_1_2_1_0());
									}
									lv_expression_14_0=ruleExpression
									{
										if ($current==null) {
											$current = createModelElementForParent(grammarAccess.getSimpleStatementRule());
										}
										set(
											$current,
											"expression",
											lv_expression_14_0,
											"org.unicam.tryIde.TryIde.Expression");
										afterParserOrEnumRuleCall();
									}
								)
							)
						)
					)
				)
			)
			    |
			{
				newCompositeNode(grammarAccess.getSimpleStatementAccess().getExpressionStatementParserRuleCall_0_2());
			}
			this_ExpressionStatement_15=ruleExpressionStatement
			{
				$current = $this_ExpressionStatement_15.current;
				afterParserOrEnumRuleCall();
			}
		)
		(
			(
				lv_semicolon_16_0=';'
				{
					newLeafNode(lv_semicolon_16_0, grammarAccess.getSimpleStatementAccess().getSemicolonSemicolonKeyword_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleStatementRule());
					}
					setWithLastConsumed($current, "semicolon", true, ";");
				}
			)
		)
	)
;

// Entry rule entryRuleSimpleStatement2
entryRuleSimpleStatement2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStatement2Rule()); }
	iv_ruleSimpleStatement2=ruleSimpleStatement2
	{ $current=$iv_ruleSimpleStatement2.current; }
	EOF;

// Rule SimpleStatement2
ruleSimpleStatement2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSimpleStatement2Access().getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0());
			}
			this_StandardTypeWithoutQualifiedIdentifier_0=ruleStandardTypeWithoutQualifiedIdentifier
			{
				$current = $this_StandardTypeWithoutQualifiedIdentifier_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getSimpleStatement2Access().getStandardVariableDeclarationTypeAction_0_1_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleStatement2Access().getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0());
						}
						lv_optionalElements_2_0=ruleVariableDeclarationOptionalElement
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleStatement2Rule());
							}
							add(
								$current,
								"optionalElements",
								lv_optionalElements_2_0,
								"org.unicam.tryIde.TryIde.VariableDeclarationOptionalElement");
							afterParserOrEnumRuleCall();
						}
					)
				)*
				(
					(
						{
							newCompositeNode(grammarAccess.getSimpleStatement2Access().getVariableVariableParserRuleCall_0_1_2_0());
						}
						lv_variable_3_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSimpleStatement2Rule());
							}
							set(
								$current,
								"variable",
								lv_variable_3_0,
								"org.unicam.tryIde.TryIde.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_4='='
					{
						newLeafNode(otherlv_4, grammarAccess.getSimpleStatement2Access().getEqualsSignKeyword_0_1_3_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleStatement2Access().getExpressionExpressionParserRuleCall_0_1_3_1_0());
							}
							lv_expression_5_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleStatement2Rule());
								}
								set(
									$current,
									"expression",
									lv_expression_5_0,
									"org.unicam.tryIde.TryIde.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getSimpleStatement2Access().getVarTypeParserRuleCall_1_0());
			}
			ruleVarType
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					(
						{
							$current = forceCreateModelElement(
								grammarAccess.getSimpleStatement2Access().getVarVariableTypeDeclarationAction_1_1_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleStatement2Access().getVariableVariableParserRuleCall_1_1_0_1_0());
							}
							lv_variable_8_0=ruleVariable
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleStatement2Rule());
								}
								set(
									$current,
									"variable",
									lv_variable_8_0,
									"org.unicam.tryIde.TryIde.Variable");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_9='='
						{
							newLeafNode(otherlv_9, grammarAccess.getSimpleStatement2Access().getEqualsSignKeyword_1_1_0_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getSimpleStatement2Access().getExpressionExpressionParserRuleCall_1_1_0_2_1_0());
								}
								lv_expression_10_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSimpleStatement2Rule());
									}
									set(
										$current,
										"expression",
										lv_expression_10_0,
										"org.unicam.tryIde.TryIde.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
				    |
				(
					(
						{
							$current = forceCreateModelElement(
								grammarAccess.getSimpleStatement2Access().getVarVariableTupleVariableDeclarationAction_1_1_1_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getSimpleStatement2Access().getTupleTupleParserRuleCall_1_1_1_1_0());
							}
							lv_tuple_12_0=ruleTuple
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getSimpleStatement2Rule());
								}
								set(
									$current,
									"tuple",
									lv_tuple_12_0,
									"org.unicam.tryIde.TryIde.Tuple");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						otherlv_13='='
						{
							newLeafNode(otherlv_13, grammarAccess.getSimpleStatement2Access().getEqualsSignKeyword_1_1_1_2_0());
						}
						(
							(
								{
									newCompositeNode(grammarAccess.getSimpleStatement2Access().getExpressionExpressionParserRuleCall_1_1_1_2_1_0());
								}
								lv_expression_14_0=ruleExpression
								{
									if ($current==null) {
										$current = createModelElementForParent(grammarAccess.getSimpleStatement2Rule());
									}
									set(
										$current,
										"expression",
										lv_expression_14_0,
										"org.unicam.tryIde.TryIde.Expression");
									afterParserOrEnumRuleCall();
								}
							)
						)
					)
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStatement2Access().getExpressionStatementParserRuleCall_2());
		}
		this_ExpressionStatement_15=ruleExpressionStatement
		{
			$current = $this_ExpressionStatement_15.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); }
	iv_ruleExpressionStatement=ruleExpressionStatement
	{ $current=$iv_ruleExpressionStatement.current; }
	EOF;

// Rule ExpressionStatement
ruleExpressionStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionExpressionParserRuleCall_0());
			}
			lv_expression_0_0=ruleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getExpressionStatementRule());
				}
				set(
					$current,
					"expression",
					lv_expression_0_0,
					"org.unicam.tryIde.TryIde.Expression");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleQualifiedIdentifier
entryRuleQualifiedIdentifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedIdentifierRule()); }
	iv_ruleQualifiedIdentifier=ruleQualifiedIdentifier
	{ $current=$iv_ruleQualifiedIdentifier.current; }
	EOF;

// Rule QualifiedIdentifier
ruleQualifiedIdentifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_identifier_0_0=RULE_ID
				{
					newLeafNode(lv_identifier_0_0, grammarAccess.getQualifiedIdentifierAccess().getIdentifierIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getQualifiedIdentifierRule());
					}
					setWithLastConsumed(
						$current,
						"identifier",
						lv_identifier_0_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getQualifiedIdentifierAccess().getQualifiersQualifierParserRuleCall_1_0());
				}
				lv_qualifiers_1_0=ruleQualifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getQualifiedIdentifierRule());
					}
					add(
						$current,
						"qualifiers",
						lv_qualifiers_1_0,
						"org.unicam.tryIde.TryIde.Qualifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleQualifier
entryRuleQualifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getQualifierRule()); }
	iv_ruleQualifier=ruleQualifier
	{ $current=$iv_ruleQualifier.current; }
	EOF;

// Rule Qualifier
ruleQualifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getQualifierAccess().getFieldParserRuleCall_0());
		}
		this_Field_0=ruleField
		{
			$current = $this_Field_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQualifierAccess().getIndexParserRuleCall_1());
		}
		this_Index_1=ruleIndex
		{
			$current = $this_Index_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getQualifierAccess().getArgumentsParserRuleCall_2());
		}
		this_Arguments_2=ruleArguments
		{
			$current = $this_Arguments_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleField
entryRuleField returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFieldRule()); }
	iv_ruleField=ruleField
	{ $current=$iv_ruleField.current; }
	EOF;

// Rule Field
ruleField returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='.'
		{
			newLeafNode(otherlv_0, grammarAccess.getFieldAccess().getFullStopKeyword_0());
		}
		(
			(
				lv_field_1_0=RULE_ID
				{
					newLeafNode(lv_field_1_0, grammarAccess.getFieldAccess().getFieldIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFieldRule());
					}
					setWithLastConsumed(
						$current,
						"field",
						lv_field_1_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleIndex
entryRuleIndex returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIndexRule()); }
	iv_ruleIndex=ruleIndex
	{ $current=$iv_ruleIndex.current; }
	EOF;

// Rule Index
ruleIndex returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getIndexAccess().getLeftSquareBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIndexAccess().getIndexAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIndexAccess().getValueExpressionParserRuleCall_2_0());
				}
				lv_value_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIndexRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getIndexAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	iv_ruleArguments=ruleArguments
	{ $current=$iv_ruleArguments.current; }
	EOF;

// Rule Arguments
ruleArguments returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getArgumentsAccess().getArgumentsFunctionCallArgumentsParserRuleCall_0());
			}
			lv_arguments_0_0=ruleFunctionCallArguments
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getArgumentsRule());
				}
				set(
					$current,
					"arguments",
					lv_arguments_0_0,
					"org.unicam.tryIde.TryIde.FunctionCallArguments");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleModifier
entryRuleModifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifierRule()); }
	iv_ruleModifier=ruleModifier
	{ $current=$iv_ruleModifier.current; }
	EOF;

// Rule Modifier
ruleModifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='modifier'
		{
			newLeafNode(otherlv_0, grammarAccess.getModifierAccess().getModifierKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getModifierAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModifierRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModifierAccess().getParametersParameterListParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifierRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.unicam.tryIde.TryIde.ParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModifierAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifierRule());
					}
					set(
						$current,
						"block",
						lv_block_3_0,
						"org.unicam.tryIde.TryIde.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='event'
		{
			newLeafNode(otherlv_0, grammarAccess.getEventAccess().getEventKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getEventAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getParametersParameterListParserRuleCall_2_0());
				}
				lv_parameters_2_0=ruleParameterList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_2_0,
						"org.unicam.tryIde.TryIde.ParameterList");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_isAnonymous_3_0='anonymous'
				{
					newLeafNode(lv_isAnonymous_3_0, grammarAccess.getEventAccess().getIsAnonymousAnonymousKeyword_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEventRule());
					}
					setWithLastConsumed($current, "isAnonymous", true, "anonymous");
				}
			)
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getEventAccess().getSemicolonKeyword_4());
		}
	)
;

// Entry rule entryRuleModifierInvocation
entryRuleModifierInvocation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModifierInvocationRule()); }
	iv_ruleModifierInvocation=ruleModifierInvocation
	{ $current=$iv_ruleModifierInvocation.current; }
	EOF;

// Rule ModifierInvocation
ruleModifierInvocation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModifierInvocationRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getModifierInvocationAccess().getNameModifierCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModifierInvocationAccess().getArgsFunctionCallListArgumentsParserRuleCall_1_0());
				}
				lv_args_1_0=ruleFunctionCallListArguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModifierInvocationRule());
					}
					set(
						$current,
						"args",
						lv_args_1_0,
						"org.unicam.tryIde.TryIde.FunctionCallListArguments");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current; }
	EOF;

// Rule ParameterList
ruleParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getParameterListAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParameterListAccess().getParameterListAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParameterListAccess().getParametersVariableDeclarationParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleVariableDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParameterListRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"org.unicam.tryIde.TryIde.VariableDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getParameterListAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParameterListAccess().getParametersVariableDeclarationParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleVariableDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParameterListRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"org.unicam.tryIde.TryIde.VariableDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getParameterListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleReturnsParameterList
entryRuleReturnsParameterList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnsParameterListRule()); }
	iv_ruleReturnsParameterList=ruleReturnsParameterList
	{ $current=$iv_ruleReturnsParameterList.current; }
	EOF;

// Rule ReturnsParameterList
ruleReturnsParameterList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnsParameterListAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnsParameterListAccess().getReturnsParameterListAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getReturnsParameterListAccess().getParametersReturnParameterDeclarationParserRuleCall_2_0_0());
					}
					lv_parameters_2_0=ruleReturnParameterDeclaration
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getReturnsParameterListRule());
						}
						add(
							$current,
							"parameters",
							lv_parameters_2_0,
							"org.unicam.tryIde.TryIde.ReturnParameterDeclaration");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=','
				{
					newLeafNode(otherlv_3, grammarAccess.getReturnsParameterListAccess().getCommaKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getReturnsParameterListAccess().getParametersReturnParameterDeclarationParserRuleCall_2_1_1_0());
						}
						lv_parameters_4_0=ruleReturnParameterDeclaration
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getReturnsParameterListRule());
							}
							add(
								$current,
								"parameters",
								lv_parameters_4_0,
								"org.unicam.tryIde.TryIde.ReturnParameterDeclaration");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getReturnsParameterListAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleReturnParameterDeclaration
entryRuleReturnParameterDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnParameterDeclarationRule()); }
	iv_ruleReturnParameterDeclaration=ruleReturnParameterDeclaration
	{ $current=$iv_ruleReturnParameterDeclaration.current; }
	EOF;

// Rule ReturnParameterDeclaration
ruleReturnParameterDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnParameterDeclarationAccess().getTypeRefTypeParserRuleCall_0_0());
				}
				lv_typeRef_0_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnParameterDeclarationRule());
					}
					set(
						$current,
						"typeRef",
						lv_typeRef_0_0,
						"org.unicam.tryIde.TryIde.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnParameterDeclarationAccess().getVariableVariableParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnParameterDeclarationRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.unicam.tryIde.TryIde.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStatementParserRuleCall_0());
		}
		this_IfStatement_0=ruleIfStatement
		{
			$current = $this_IfStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_1());
		}
		this_WhileStatement_1=ruleWhileStatement
		{
			$current = $this_WhileStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForStatementParserRuleCall_2());
		}
		this_ForStatement_2=ruleForStatement
		{
			$current = $this_ForStatement_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getBlockParserRuleCall_3());
		}
		this_Block_3=ruleBlock
		{
			$current = $this_Block_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getPlaceHolderStatementParserRuleCall_4());
		}
		this_PlaceHolderStatement_4=rulePlaceHolderStatement
		{
			$current = $this_PlaceHolderStatement_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_5_0());
			}
			this_ContinueStatement_5=ruleContinueStatement
			{
				$current = $this_ContinueStatement_5.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_5_1());
			}
			this_BreakStatement_6=ruleBreakStatement
			{
				$current = $this_BreakStatement_6.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_5_2());
			}
			this_ReturnStatement_7=ruleReturnStatement
			{
				$current = $this_ReturnStatement_7.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getThrowStatementParserRuleCall_5_3());
			}
			this_ThrowStatement_8=ruleThrowStatement
			{
				$current = $this_ThrowStatement_8.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getDeleteStatementParserRuleCall_5_4());
			}
			this_DeleteStatement_9=ruleDeleteStatement
			{
				$current = $this_DeleteStatement_9.current;
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getStatementAccess().getSimpleStatementParserRuleCall_5_5());
			}
			this_SimpleStatement_10=ruleSimpleStatement
			{
				$current = $this_SimpleStatement_10.current;
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleDeleteStatement
entryRuleDeleteStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeleteStatementRule()); }
	iv_ruleDeleteStatement=ruleDeleteStatement
	{ $current=$iv_ruleDeleteStatement.current; }
	EOF;

// Rule DeleteStatement
ruleDeleteStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='delete'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeleteStatementAccess().getDeleteKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDeleteStatementAccess().getVariableQualifiedIdentifierParserRuleCall_1_0());
				}
				lv_variable_1_0=ruleQualifiedIdentifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeleteStatementRule());
					}
					set(
						$current,
						"variable",
						lv_variable_1_0,
						"org.unicam.tryIde.TryIde.QualifiedIdentifier");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getDeleteStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getTrueBodyStatementParserRuleCall_4_0());
				}
				lv_trueBody_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"trueBody",
						lv_trueBody_4_0,
						"org.unicam.tryIde.TryIde.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				('else')=>
				otherlv_5='else'
				{
					newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getFalseBodyStatementParserRuleCall_5_1_0());
					}
					lv_falseBody_6_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						set(
							$current,
							"falseBody",
							lv_falseBody_6_0,
							"org.unicam.tryIde.TryIde.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_2_0());
				}
				lv_condition_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"condition",
						lv_condition_2_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getBodyStatementParserRuleCall_4_0());
				}
				lv_body_4_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"body",
						lv_body_4_0,
						"org.unicam.tryIde.TryIde.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getInitExpressionSimpleStatement2ParserRuleCall_2_0());
				}
				lv_initExpression_2_0=ruleSimpleStatement2
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"initExpression",
						lv_initExpression_2_0,
						"org.unicam.tryIde.TryIde.SimpleStatement2");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(';')=>
			otherlv_3=';'
			{
				newLeafNode(otherlv_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getConditionExpressionExpressionParserRuleCall_4_0());
				}
				lv_conditionExpression_4_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"conditionExpression",
						lv_conditionExpression_4_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=';'
		{
			newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getSemicolonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getLoopExpressionExpressionStatementParserRuleCall_6_0());
				}
				lv_loopExpression_6_0=ruleExpressionStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"loopExpression",
						lv_loopExpression_6_0,
						"org.unicam.tryIde.TryIde.ExpressionStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7=')'
		{
			newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getBodyStatementParserRuleCall_8_0());
				}
				lv_body_8_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.unicam.tryIde.TryIde.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_1(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_0_0());
					}
					lv_statements_2_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"statements",
							lv_statements_2_0,
							"org.unicam.tryIde.TryIde.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_2_1_0());
					}
					lv_statements_3_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"statements",
							lv_statements_3_0,
							"org.unicam.tryIde.TryIde.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleContinueStatement
entryRuleContinueStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getContinueStatementRule()); }
	iv_ruleContinueStatement=ruleContinueStatement
	{ $current=$iv_ruleContinueStatement.current; }
	EOF;

// Rule ContinueStatement
ruleContinueStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='continue'
		{
			newLeafNode(otherlv_0, grammarAccess.getContinueStatementAccess().getContinueKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getContinueStatementAccess().getContinueAction_1(),
					$current);
			}
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	iv_ruleBreakStatement=ruleBreakStatement
	{ $current=$iv_ruleBreakStatement.current; }
	EOF;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='break'
		{
			newLeafNode(otherlv_0, grammarAccess.getBreakStatementAccess().getBreakKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBreakStatementAccess().getBreakStatementAction_1(),
					$current);
			}
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnStatementAccess().getReturnStatementAction_1(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=';'
		{
			newLeafNode(otherlv_3, grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3());
		}
	)
;

// Entry rule entryRuleThrowStatement
entryRuleThrowStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getThrowStatementRule()); }
	iv_ruleThrowStatement=ruleThrowStatement
	{ $current=$iv_ruleThrowStatement.current; }
	EOF;

// Rule ThrowStatement
ruleThrowStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='throw'
		{
			newLeafNode(otherlv_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getThrowStatementAccess().getThrowStatementAction_1(),
					$current);
			}
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getThrowStatementAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRulePlaceHolderStatement
entryRulePlaceHolderStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlaceHolderStatementRule()); }
	iv_rulePlaceHolderStatement=rulePlaceHolderStatement
	{ $current=$iv_rulePlaceHolderStatement.current; }
	EOF;

// Rule PlaceHolderStatement
rulePlaceHolderStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='_'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlaceHolderStatementAccess().get_Keyword_0());
		}
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPlaceHolderStatementAccess().getPlaceHolderStatementAction_1(),
					$current);
			}
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall());
	}
	this_Assignment_0=ruleAssignment
	{
		$current = $this_Assignment_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSpecialExpression
entryRuleSpecialExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecialExpressionRule()); }
	iv_ruleSpecialExpression=ruleSpecialExpression
	{ $current=$iv_ruleSpecialExpression.current; }
	EOF;

// Rule SpecialExpression
ruleSpecialExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecialExpressionAccess().getTypeSpecialExpressionTypeEnumEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleSpecialExpressionTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecialExpressionRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.unicam.tryIde.TryIde.SpecialExpressionTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecialExpressionAccess().getFieldOrMethodFieldParserRuleCall_1_0());
				}
				lv_fieldOrMethod_1_0=ruleField
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecialExpressionRule());
					}
					set(
						$current,
						"fieldOrMethod",
						lv_fieldOrMethod_1_0,
						"org.unicam.tryIde.TryIde.Field");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSpecialExpressionAccess().getQualifiersIndexParserRuleCall_2_0_0());
					}
					lv_qualifiers_2_1=ruleIndex
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecialExpressionRule());
						}
						add(
							$current,
							"qualifiers",
							lv_qualifiers_2_1,
							"org.unicam.tryIde.TryIde.Index");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getSpecialExpressionAccess().getQualifiersArgumentsParserRuleCall_2_0_1());
					}
					lv_qualifiers_2_2=ruleArguments
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSpecialExpressionRule());
						}
						add(
							$current,
							"qualifiers",
							lv_qualifiers_2_2,
							"org.unicam.tryIde.TryIde.Arguments");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignmentAccess().getBinaryExpressionParserRuleCall_0());
		}
		this_BinaryExpression_0=ruleBinaryExpression
		{
			$current = $this_BinaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAssignmentAccess().getAssignmentLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getAssignmentOpAssignmentOpEnumEnumRuleCall_1_0_1_0());
						}
						lv_assignmentOp_2_0=ruleAssignmentOpEnum
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							set(
								$current,
								"assignmentOp",
								lv_assignmentOp_2_0,
								"org.unicam.tryIde.TryIde.AssignmentOpEnum");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_1_0_2_0());
						}
						lv_expression_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							set(
								$current,
								"expression",
								lv_expression_3_0,
								"org.unicam.tryIde.TryIde.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAssignmentAccess().getVariableDeclarationExpressionTypeAction_1_1_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssignmentAccess().getVariableVariableParserRuleCall_1_1_1_0());
						}
						lv_variable_5_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssignmentRule());
							}
							set(
								$current,
								"variable",
								lv_variable_5_0,
								"org.unicam.tryIde.TryIde.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					otherlv_6='='
					{
						newLeafNode(otherlv_6, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1_1_2_0());
					}
					(
						(
							{
								newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_1_1_2_1_0());
							}
							lv_expression_7_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAssignmentRule());
								}
								set(
									$current,
									"expression",
									lv_expression_7_0,
									"org.unicam.tryIde.TryIde.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)?
			)
		)?
	)
;

// Entry rule entryRuleBinaryExpression
entryRuleBinaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryExpressionRule()); }
	iv_ruleBinaryExpression=ruleBinaryExpression
	{ $current=$iv_ruleBinaryExpression.current; }
	EOF;

// Rule BinaryExpression
ruleBinaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBinaryExpressionAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current = $this_Or_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current; }
	EOF;

// Rule Or
ruleOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0());
		}
		this_And_0=ruleAnd
		{
			$current = $this_And_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getOrAccess().getOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.And");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current; }
	EOF;

// Rule And
ruleAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0());
		}
		this_Equality_0=ruleEquality
		{
			$current = $this_Equality_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndAccess().getAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleEquality
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.Equality");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	iv_ruleEquality=ruleEquality
	{ $current=$iv_ruleEquality.current; }
	EOF;

// Rule Equality
ruleEquality returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getEqualityOpEqualityOpEnumEnumRuleCall_1_1_0());
					}
					lv_equalityOp_2_0=ruleEqualityOpEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"equalityOp",
							lv_equalityOp_2_0,
							"org.unicam.tryIde.TryIde.EqualityOpEnum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEqualityRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getBitOrParserRuleCall_0());
		}
		this_BitOr_0=ruleBitOr
		{
			$current = $this_BitOr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getComparisonOpComparisonOpEnumEnumRuleCall_1_1_0());
					}
					lv_comparisonOp_2_0=ruleComparisonOpEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"comparisonOp",
							lv_comparisonOp_2_0,
							"org.unicam.tryIde.TryIde.ComparisonOpEnum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightBitOrParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.BitOr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitOr
entryRuleBitOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitOrRule()); }
	iv_ruleBitOr=ruleBitOr
	{ $current=$iv_ruleBitOr.current; }
	EOF;

// Rule BitOr
ruleBitOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitOrAccess().getBitXorParserRuleCall_0());
		}
		this_BitXor_0=ruleBitXor
		{
			$current = $this_BitXor_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitOrAccess().getBitOrLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='|'
			{
				newLeafNode(otherlv_2, grammarAccess.getBitOrAccess().getVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitOrAccess().getRightBitXorParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitXor
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitOrRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.BitXor");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitXor
entryRuleBitXor returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitXorRule()); }
	iv_ruleBitXor=ruleBitXor
	{ $current=$iv_ruleBitXor.current; }
	EOF;

// Rule BitXor
ruleBitXor returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitXorAccess().getBitAndParserRuleCall_0());
		}
		this_BitAnd_0=ruleBitAnd
		{
			$current = $this_BitAnd_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitXorAccess().getBitXorLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='^'
			{
				newLeafNode(otherlv_2, grammarAccess.getBitXorAccess().getCircumflexAccentKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitXorAccess().getRightBitAndParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleBitAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitXorRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.BitAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBitAnd
entryRuleBitAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBitAndRule()); }
	iv_ruleBitAnd=ruleBitAnd
	{ $current=$iv_ruleBitAnd.current; }
	EOF;

// Rule BitAnd
ruleBitAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBitAndAccess().getShiftParserRuleCall_0());
		}
		this_Shift_0=ruleShift
		{
			$current = $this_Shift_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getBitAndAccess().getBitAndLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='&'
			{
				newLeafNode(otherlv_2, grammarAccess.getBitAndAccess().getAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBitAndAccess().getRightShiftParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleShift
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBitAndRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.Shift");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleShift
entryRuleShift returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShiftRule()); }
	iv_ruleShift=ruleShift
	{ $current=$iv_ruleShift.current; }
	EOF;

// Rule Shift
ruleShift returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getShiftAccess().getAddSubParserRuleCall_0());
		}
		this_AddSub_0=ruleAddSub
		{
			$current = $this_AddSub_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getShiftAccess().getShiftLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getShiftAccess().getShiftOpShiftOpEnumEnumRuleCall_1_1_0());
					}
					lv_shiftOp_2_0=ruleShiftOpEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShiftRule());
						}
						set(
							$current,
							"shiftOp",
							lv_shiftOp_2_0,
							"org.unicam.tryIde.TryIde.ShiftOpEnum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getShiftAccess().getRightAddSubParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAddSub
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShiftRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.AddSub");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddSub
entryRuleAddSub returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddSubRule()); }
	iv_ruleAddSub=ruleAddSub
	{ $current=$iv_ruleAddSub.current; }
	EOF;

// Rule AddSub
ruleAddSub returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddSubAccess().getMulDivModParserRuleCall_0());
		}
		this_MulDivMod_0=ruleMulDivMod
		{
			$current = $this_MulDivMod_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			((
				(
				)
				(
					(
						ruleAdditionOpEnum
					)
				)
				(
					(
						ruleMulDivMod
					)
				)
			)
			)=>
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAddSubAccess().getAddSubLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAddSubAccess().getAdditionOpAdditionOpEnumEnumRuleCall_1_0_1_0());
						}
						lv_additionOp_2_0=ruleAdditionOpEnum
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAddSubRule());
							}
							set(
								$current,
								"additionOp",
								lv_additionOp_2_0,
								"org.unicam.tryIde.TryIde.AdditionOpEnum");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAddSubAccess().getRightMulDivModParserRuleCall_1_0_2_0());
						}
						lv_right_3_0=ruleMulDivMod
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAddSubRule());
							}
							set(
								$current,
								"right",
								lv_right_3_0,
								"org.unicam.tryIde.TryIde.MulDivMod");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)*
	)
;

// Entry rule entryRuleMulDivMod
entryRuleMulDivMod returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMulDivModRule()); }
	iv_ruleMulDivMod=ruleMulDivMod
	{ $current=$iv_ruleMulDivMod.current; }
	EOF;

// Rule MulDivMod
ruleMulDivMod returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMulDivModAccess().getExponentParserRuleCall_0());
		}
		this_Exponent_0=ruleExponent
		{
			$current = $this_Exponent_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMulDivModAccess().getMulDivModLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulDivModAccess().getMultipliciativeOpMulDivModOpEnumEnumRuleCall_1_1_0());
					}
					lv_multipliciativeOp_2_0=ruleMulDivModOpEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulDivModRule());
						}
						set(
							$current,
							"multipliciativeOp",
							lv_multipliciativeOp_2_0,
							"org.unicam.tryIde.TryIde.MulDivModOpEnum");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMulDivModAccess().getRightExponentParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExponent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMulDivModRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.Exponent");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExponent
entryRuleExponent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExponentRule()); }
	iv_ruleExponent=ruleExponent
	{ $current=$iv_ruleExponent.current; }
	EOF;

// Rule Exponent
ruleExponent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExponentAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExponentAccess().getExponentLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='**'
			{
				newLeafNode(otherlv_2, grammarAccess.getExponentAccess().getAsteriskAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExponentAccess().getRightUnaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExponentRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.unicam.tryIde.TryIde.UnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getNotExpressionParserRuleCall_0());
		}
		this_NotExpression_0=ruleNotExpression
		{
			$current = $this_NotExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getBinaryNotExpressionParserRuleCall_1());
		}
		this_BinaryNotExpression_1=ruleBinaryNotExpression
		{
			$current = $this_BinaryNotExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getSignExpressionParserRuleCall_2());
		}
		this_SignExpression_2=ruleSignExpression
		{
			$current = $this_SignExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getNewExpressionParserRuleCall_3());
		}
		this_NewExpression_3=ruleNewExpression
		{
			$current = $this_NewExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPreExpressionParserRuleCall_4());
		}
		this_PreExpression_4=rulePreExpression
		{
			$current = $this_PreExpression_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNotExpression
entryRuleNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotExpressionRule()); }
	iv_ruleNotExpression=ruleNotExpression
	{ $current=$iv_ruleNotExpression.current; }
	EOF;

// Rule NotExpression
ruleNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!'
		{
			newLeafNode(otherlv_0, grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNotExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNotExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.unicam.tryIde.TryIde.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBinaryNotExpression
entryRuleBinaryNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryNotExpressionRule()); }
	iv_ruleBinaryNotExpression=ruleBinaryNotExpression
	{ $current=$iv_ruleBinaryNotExpression.current; }
	EOF;

// Rule BinaryNotExpression
ruleBinaryNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='~'
		{
			newLeafNode(otherlv_0, grammarAccess.getBinaryNotExpressionAccess().getTildeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryNotExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryNotExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.unicam.tryIde.TryIde.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSignExpression
entryRuleSignExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSignExpressionRule()); }
	iv_ruleSignExpression=ruleSignExpression
	{ $current=$iv_ruleSignExpression.current; }
	EOF;

// Rule SignExpression
ruleSignExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_signOp_0_1='+'
					{
						newLeafNode(lv_signOp_0_1, grammarAccess.getSignExpressionAccess().getSignOpPlusSignKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSignExpressionRule());
						}
						setWithLastConsumed($current, "signOp", lv_signOp_0_1, null);
					}
					    |
					lv_signOp_0_2='-'
					{
						newLeafNode(lv_signOp_0_2, grammarAccess.getSignExpressionAccess().getSignOpHyphenMinusKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSignExpressionRule());
						}
						setWithLastConsumed($current, "signOp", lv_signOp_0_2, null);
					}
				)
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSignExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleUnaryExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSignExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.unicam.tryIde.TryIde.UnaryExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNewExpression
entryRuleNewExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNewExpressionRule()); }
	iv_ruleNewExpression=ruleNewExpression
	{ $current=$iv_ruleNewExpression.current; }
	EOF;

// Rule NewExpression
ruleNewExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='new'
		{
			newLeafNode(otherlv_0, grammarAccess.getNewExpressionAccess().getNewKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNewExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getNewExpressionAccess().getContractContractOrLibraryCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNewExpressionAccess().getArgsFunctionCallListArgumentsParserRuleCall_2_0());
				}
				lv_args_2_0=ruleFunctionCallListArguments
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNewExpressionRule());
					}
					set(
						$current,
						"args",
						lv_args_2_0,
						"org.unicam.tryIde.TryIde.FunctionCallListArguments");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePreExpression
entryRulePreExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreExpressionRule()); }
	iv_rulePreExpression=rulePreExpression
	{ $current=$iv_rulePreExpression.current; }
	EOF;

// Rule PreExpression
rulePreExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPreExpressionAccess().getPostIncDecExpressionParserRuleCall_0());
		}
		this_PostIncDecExpression_0=rulePostIncDecExpression
		{
			$current = $this_PostIncDecExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_1='++'
			{
				newLeafNode(otherlv_1, grammarAccess.getPreExpressionAccess().getPlusSignPlusSignKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getPreExpressionAccess().getPostIncDecExpressionParserRuleCall_1_1());
			}
			this_PostIncDecExpression_2=rulePostIncDecExpression
			{
				$current = $this_PostIncDecExpression_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPreExpressionAccess().getPreIncExpressionExpressionAction_1_2(),
						$current);
				}
			)
		)
		    |
		(
			otherlv_4='--'
			{
				newLeafNode(otherlv_4, grammarAccess.getPreExpressionAccess().getHyphenMinusHyphenMinusKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPreExpressionAccess().getPostIncDecExpressionParserRuleCall_2_1());
			}
			this_PostIncDecExpression_5=rulePostIncDecExpression
			{
				$current = $this_PostIncDecExpression_5.current;
				afterParserOrEnumRuleCall();
			}
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPreExpressionAccess().getPreDecExpressionExpressionAction_2_2(),
						$current);
				}
			)
		)
	)
;

// Entry rule entryRulePostIncDecExpression
entryRulePostIncDecExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPostIncDecExpressionRule()); }
	iv_rulePostIncDecExpression=rulePostIncDecExpression
	{ $current=$iv_rulePostIncDecExpression.current; }
	EOF;

// Rule PostIncDecExpression
rulePostIncDecExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPostIncDecExpressionAccess().getPrimaryExpressionParserRuleCall_0());
		}
		this_PrimaryExpression_0=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPostIncDecExpressionAccess().getPostIncDecExpressionExpressionAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPostIncDecExpressionAccess().getPostOpIncDecOpEnumEnumRuleCall_1_1_0());
					}
					lv_postOp_2_0=ruleIncDecOpEnum
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPostIncDecExpressionRule());
						}
						set(
							$current,
							"postOp",
							lv_postOp_2_0,
							"org.unicam.tryIde.TryIde.IncDecOpEnum");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getSpecialExpressionParserRuleCall_0());
		}
		this_SpecialExpression_0=ruleSpecialExpression
		{
			$current = $this_SpecialExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getQualifiedIdentifierParserRuleCall_1());
		}
		this_QualifiedIdentifier_1=ruleQualifiedIdentifier
		{
			$current = $this_QualifiedIdentifier_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_2());
		}
		this_Literal_2=ruleLiteral
		{
			$current = $this_Literal_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTypeCastParserRuleCall_3());
		}
		this_TypeCast_3=ruleTypeCast
		{
			$current = $this_TypeCast_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_4_1());
			}
			this_Expression_5=ruleExpression
			{
				$current = $this_Expression_5.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getPrimaryExpressionAccess().getTupleMembersAction_4_2_0(),
							$current);
					}
				)
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMembersTupleSeparatorParserRuleCall_4_2_1_0_0());
							}
							lv_members_7_0=ruleTupleSeparator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
								}
								add(
									$current,
									"members",
									lv_members_7_0,
									"org.unicam.tryIde.TryIde.TupleSeparator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMembersExpressionParserRuleCall_4_2_1_1_0());
							}
							lv_members_8_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
								}
								add(
									$current,
									"members",
									lv_members_8_0,
									"org.unicam.tryIde.TryIde.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)?
				)+
			)?
			otherlv_9=')'
			{
				newLeafNode(otherlv_9, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_3());
			}
		)
		    |
		(
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getTupleSeparatorParserRuleCall_5_1());
			}
			this_TupleSeparator_11=ruleTupleSeparator
			{
				$current = $this_TupleSeparator_11.current;
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						$current = forceCreateModelElementAndAdd(
							grammarAccess.getPrimaryExpressionAccess().getTupleMembersAction_5_2_0(),
							$current);
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMembersExpressionParserRuleCall_5_2_1_0());
						}
						lv_members_13_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
							}
							add(
								$current,
								"members",
								lv_members_13_0,
								"org.unicam.tryIde.TryIde.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)?
				(
					(
						(
							{
								newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMembersTupleSeparatorParserRuleCall_5_2_2_0_0());
							}
							lv_members_14_0=ruleTupleSeparator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
								}
								add(
									$current,
									"members",
									lv_members_14_0,
									"org.unicam.tryIde.TryIde.TupleSeparator");
								afterParserOrEnumRuleCall();
							}
						)
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getMembersExpressionParserRuleCall_5_2_2_1_0());
							}
							lv_members_15_0=ruleExpression
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
								}
								add(
									$current,
									"members",
									lv_members_15_0,
									"org.unicam.tryIde.TryIde.Expression");
								afterParserOrEnumRuleCall();
							}
						)
					)?
				)*
			)
			otherlv_16=')'
			{
				newLeafNode(otherlv_16, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_5_3());
			}
		)
		    |
		(
			otherlv_17='('
			{
				newLeafNode(otherlv_17, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_6_0());
			}
			otherlv_18=')'
			{
				newLeafNode(otherlv_18, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_6_1());
			}
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getTupleAction_6_2(),
						$current);
				}
			)
		)
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getSpecialVariablesParserRuleCall_0());
		}
		this_SpecialVariables_0=ruleSpecialVariables
		{
			$current = $this_SpecialVariables_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanConstParserRuleCall_1());
		}
		this_BooleanConst_1=ruleBooleanConst
		{
			$current = $this_BooleanConst_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNumberParserRuleCall_2());
		}
		this_Number_2=ruleNumber
		{
			$current = $this_Number_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_3());
		}
		this_StringLiteral_3=ruleStringLiteral
		{
			$current = $this_StringLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanConst
entryRuleBooleanConst returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanConstRule()); }
	iv_ruleBooleanConst=ruleBooleanConst
	{ $current=$iv_ruleBooleanConst.current; }
	EOF;

// Rule BooleanConst
ruleBooleanConst returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBooleanConstAccess().getValueBooleanLiteralEnumEnumRuleCall_0());
			}
			lv_value_0_0=ruleBooleanLiteralEnum
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBooleanConstRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.unicam.tryIde.TryIde.BooleanLiteralEnum");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleNumber
entryRuleNumber returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberRule()); }
	iv_ruleNumber=ruleNumber
	{ $current=$iv_ruleNumber.current; }
	EOF;

// Rule Number
ruleNumber returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumberAccess().getNumberDimensionlessParserRuleCall_0());
		}
		this_NumberDimensionless_0=ruleNumberDimensionless
		{
			$current = $this_NumberDimensionless_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberAccess().getEtherParserRuleCall_1());
		}
		this_Ether_1=ruleEther
		{
			$current = $this_Ether_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberAccess().getNowParserRuleCall_2());
		}
		this_Now_2=ruleNow
		{
			$current = $this_Now_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberAccess().getHexLiteralParserRuleCall_3());
		}
		this_HexLiteral_3=ruleHexLiteral
		{
			$current = $this_HexLiteral_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberAccess().getDecimalLiteralParserRuleCall_4());
		}
		this_DecimalLiteral_4=ruleDecimalLiteral
		{
			$current = $this_DecimalLiteral_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumberAccess().getTimeParserRuleCall_5());
		}
		this_Time_5=ruleTime
		{
			$current = $this_Time_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumberDimensionless
entryRuleNumberDimensionless returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberDimensionlessRule()); }
	iv_ruleNumberDimensionless=ruleNumberDimensionless
	{ $current=$iv_ruleNumberDimensionless.current; }
	EOF;

// Rule NumberDimensionless
ruleNumberDimensionless returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberDimensionlessAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberDimensionlessRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.unicam.tryIde.TryIde.INT");
			}
		)
	)
;

// Entry rule entryRuleHexLiteral
entryRuleHexLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHexLiteralRule()); }
	iv_ruleHexLiteral=ruleHexLiteral
	{ $current=$iv_ruleHexLiteral.current; }
	EOF;

// Rule HexLiteral
ruleHexLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_HEX
			{
				newLeafNode(lv_value_0_0, grammarAccess.getHexLiteralAccess().getValueHEXTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getHexLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.unicam.tryIde.TryIde.HEX");
			}
		)
	)
;

// Entry rule entryRuleDecimalLiteral
entryRuleDecimalLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecimalLiteralRule()); }
	iv_ruleDecimalLiteral=ruleDecimalLiteral
	{ $current=$iv_ruleDecimalLiteral.current; }
	EOF;

// Rule DecimalLiteral
ruleDecimalLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_DECIMAL
			{
				newLeafNode(lv_value_0_0, grammarAccess.getDecimalLiteralAccess().getValueDECIMALTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDecimalLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.unicam.tryIde.TryIde.DECIMAL");
			}
		)
	)
;

// Entry rule entryRuleEther
entryRuleEther returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEtherRule()); }
	iv_ruleEther=ruleEther
	{ $current=$iv_ruleEther.current; }
	EOF;

// Rule Ether
ruleEther returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getEtherAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEtherRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.unicam.tryIde.TryIde.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEtherAccess().getEtherEtherSubDenominationEnumEnumRuleCall_1_0());
				}
				lv_ether_1_0=ruleEtherSubDenominationEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEtherRule());
					}
					set(
						$current,
						"ether",
						lv_ether_1_0,
						"org.unicam.tryIde.TryIde.EtherSubDenominationEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_INT
				{
					newLeafNode(lv_value_0_0, grammarAccess.getTimeAccess().getValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.unicam.tryIde.TryIde.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTimeAccess().getTimeTimeSubdenominationEnumEnumRuleCall_1_0());
				}
				lv_time_1_0=ruleTimeSubdenominationEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTimeRule());
					}
					set(
						$current,
						"time",
						lv_time_1_0,
						"org.unicam.tryIde.TryIde.TimeSubdenominationEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.unicam.tryIde.TryIde.STRING");
			}
		)
	)
;

// Entry rule entryRuleTypeCast
entryRuleTypeCast returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeCastRule()); }
	iv_ruleTypeCast=ruleTypeCast
	{ $current=$iv_ruleTypeCast.current; }
	EOF;

// Rule TypeCast
ruleTypeCast returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeCastAccess().getValueElementaryTypeNameEnumEnumRuleCall_0_0());
				}
				lv_value_0_0=ruleElementaryTypeNameEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeCastRule());
					}
					set(
						$current,
						"value",
						lv_value_0_0,
						"org.unicam.tryIde.TryIde.ElementaryTypeNameEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getTypeCastAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeCastAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeCastRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.unicam.tryIde.TryIde.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getTypeCastAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleNow
entryRuleNow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNowRule()); }
	iv_ruleNow=ruleNow
	{ $current=$iv_ruleNow.current; }
	EOF;

// Rule Now
ruleNow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNowAccess().getNowAction_0(),
					$current);
			}
		)
		otherlv_1='now'
		{
			newLeafNode(otherlv_1, grammarAccess.getNowAccess().getNowKeyword_1());
		}
	)
;

// Entry rule entryRuleSpecialVariables
entryRuleSpecialVariables returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSpecialVariablesRule()); }
	iv_ruleSpecialVariables=ruleSpecialVariables
	{ $current=$iv_ruleSpecialVariables.current; }
	EOF;

// Rule SpecialVariables
ruleSpecialVariables returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecialVariablesAccess().getTypeSpecialVariablesTypeEnumEnumRuleCall_0_0());
				}
				lv_type_0_0=ruleSpecialVariablesTypeEnum
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecialVariablesRule());
					}
					set(
						$current,
						"type",
						lv_type_0_0,
						"org.unicam.tryIde.TryIde.SpecialVariablesTypeEnum");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getSpecialVariablesAccess().getFullStopKeyword_1());
		}
		(
			(
				lv_field_2_0=RULE_ID
				{
					newLeafNode(lv_field_2_0, grammarAccess.getSpecialVariablesAccess().getFieldIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSpecialVariablesRule());
					}
					setWithLastConsumed(
						$current,
						"field",
						lv_field_2_0,
						"org.unicam.tryIde.TryIde.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSpecialVariablesAccess().getQualifiersQualifierParserRuleCall_3_0());
				}
				lv_qualifiers_3_0=ruleQualifier
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSpecialVariablesRule());
					}
					add(
						$current,
						"qualifiers",
						lv_qualifiers_3_0,
						"org.unicam.tryIde.TryIde.Qualifier");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Rule ElementaryTypeNameEnum
ruleElementaryTypeNameEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='int'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getElementaryTypeNameEnumAccess().getINTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='int16'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT16EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getElementaryTypeNameEnumAccess().getINT16EnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='int24'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT24EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getElementaryTypeNameEnumAccess().getINT24EnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='int32'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT32EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getElementaryTypeNameEnumAccess().getINT32EnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='int40'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT40EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getElementaryTypeNameEnumAccess().getINT40EnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='int48'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT48EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getElementaryTypeNameEnumAccess().getINT48EnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='int56'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT56EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getElementaryTypeNameEnumAccess().getINT56EnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='int64'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT64EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getElementaryTypeNameEnumAccess().getINT64EnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='int72'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT72EnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getElementaryTypeNameEnumAccess().getINT72EnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='int80'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT80EnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getElementaryTypeNameEnumAccess().getINT80EnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='int88'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT88EnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getElementaryTypeNameEnumAccess().getINT88EnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='int96'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT96EnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getElementaryTypeNameEnumAccess().getINT96EnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='int104'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT104EnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getElementaryTypeNameEnumAccess().getINT104EnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='int112'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT112EnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getElementaryTypeNameEnumAccess().getINT112EnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='int120'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT120EnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getElementaryTypeNameEnumAccess().getINT120EnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='int128'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT128EnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getElementaryTypeNameEnumAccess().getINT128EnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='int136'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT136EnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getElementaryTypeNameEnumAccess().getINT136EnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='int144'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT144EnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getElementaryTypeNameEnumAccess().getINT144EnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18='int152'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT152EnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getElementaryTypeNameEnumAccess().getINT152EnumLiteralDeclaration_18());
			}
		)
		    |
		(
			enumLiteral_19='int160'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT160EnumLiteralDeclaration_19().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_19, grammarAccess.getElementaryTypeNameEnumAccess().getINT160EnumLiteralDeclaration_19());
			}
		)
		    |
		(
			enumLiteral_20='int168'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT168EnumLiteralDeclaration_20().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_20, grammarAccess.getElementaryTypeNameEnumAccess().getINT168EnumLiteralDeclaration_20());
			}
		)
		    |
		(
			enumLiteral_21='int178'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT178EnumLiteralDeclaration_21().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_21, grammarAccess.getElementaryTypeNameEnumAccess().getINT178EnumLiteralDeclaration_21());
			}
		)
		    |
		(
			enumLiteral_22='int184'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT184EnumLiteralDeclaration_22().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_22, grammarAccess.getElementaryTypeNameEnumAccess().getINT184EnumLiteralDeclaration_22());
			}
		)
		    |
		(
			enumLiteral_23='int192'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT192EnumLiteralDeclaration_23().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_23, grammarAccess.getElementaryTypeNameEnumAccess().getINT192EnumLiteralDeclaration_23());
			}
		)
		    |
		(
			enumLiteral_24='int200'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT200EnumLiteralDeclaration_24().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_24, grammarAccess.getElementaryTypeNameEnumAccess().getINT200EnumLiteralDeclaration_24());
			}
		)
		    |
		(
			enumLiteral_25='int208'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT208EnumLiteralDeclaration_25().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_25, grammarAccess.getElementaryTypeNameEnumAccess().getINT208EnumLiteralDeclaration_25());
			}
		)
		    |
		(
			enumLiteral_26='int216'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT216EnumLiteralDeclaration_26().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_26, grammarAccess.getElementaryTypeNameEnumAccess().getINT216EnumLiteralDeclaration_26());
			}
		)
		    |
		(
			enumLiteral_27='int224'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT224EnumLiteralDeclaration_27().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_27, grammarAccess.getElementaryTypeNameEnumAccess().getINT224EnumLiteralDeclaration_27());
			}
		)
		    |
		(
			enumLiteral_28='int232'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT232EnumLiteralDeclaration_28().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_28, grammarAccess.getElementaryTypeNameEnumAccess().getINT232EnumLiteralDeclaration_28());
			}
		)
		    |
		(
			enumLiteral_29='int240'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT240EnumLiteralDeclaration_29().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_29, grammarAccess.getElementaryTypeNameEnumAccess().getINT240EnumLiteralDeclaration_29());
			}
		)
		    |
		(
			enumLiteral_30='int248'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT248EnumLiteralDeclaration_30().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_30, grammarAccess.getElementaryTypeNameEnumAccess().getINT248EnumLiteralDeclaration_30());
			}
		)
		    |
		(
			enumLiteral_31='int256'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getINT256EnumLiteralDeclaration_31().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_31, grammarAccess.getElementaryTypeNameEnumAccess().getINT256EnumLiteralDeclaration_31());
			}
		)
		    |
		(
			enumLiteral_32='uint'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINTEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_32, grammarAccess.getElementaryTypeNameEnumAccess().getUINTEnumLiteralDeclaration_32());
			}
		)
		    |
		(
			enumLiteral_33='uint8'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT8EnumLiteralDeclaration_33().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_33, grammarAccess.getElementaryTypeNameEnumAccess().getUINT8EnumLiteralDeclaration_33());
			}
		)
		    |
		(
			enumLiteral_34='uint16'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT16EnumLiteralDeclaration_34().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_34, grammarAccess.getElementaryTypeNameEnumAccess().getUINT16EnumLiteralDeclaration_34());
			}
		)
		    |
		(
			enumLiteral_35='uint24'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUNIT24EnumLiteralDeclaration_35().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_35, grammarAccess.getElementaryTypeNameEnumAccess().getUNIT24EnumLiteralDeclaration_35());
			}
		)
		    |
		(
			enumLiteral_36='uint32'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT32EnumLiteralDeclaration_36().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_36, grammarAccess.getElementaryTypeNameEnumAccess().getUINT32EnumLiteralDeclaration_36());
			}
		)
		    |
		(
			enumLiteral_37='uint40'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT40EnumLiteralDeclaration_37().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_37, grammarAccess.getElementaryTypeNameEnumAccess().getUINT40EnumLiteralDeclaration_37());
			}
		)
		    |
		(
			enumLiteral_38='uint48'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT48EnumLiteralDeclaration_38().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_38, grammarAccess.getElementaryTypeNameEnumAccess().getUINT48EnumLiteralDeclaration_38());
			}
		)
		    |
		(
			enumLiteral_39='uint56'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUNIT56EnumLiteralDeclaration_39().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_39, grammarAccess.getElementaryTypeNameEnumAccess().getUNIT56EnumLiteralDeclaration_39());
			}
		)
		    |
		(
			enumLiteral_40='uint64'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT64EnumLiteralDeclaration_40().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_40, grammarAccess.getElementaryTypeNameEnumAccess().getUINT64EnumLiteralDeclaration_40());
			}
		)
		    |
		(
			enumLiteral_41='uint72'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT72EnumLiteralDeclaration_41().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_41, grammarAccess.getElementaryTypeNameEnumAccess().getUINT72EnumLiteralDeclaration_41());
			}
		)
		    |
		(
			enumLiteral_42='uint80'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT80EnumLiteralDeclaration_42().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_42, grammarAccess.getElementaryTypeNameEnumAccess().getUINT80EnumLiteralDeclaration_42());
			}
		)
		    |
		(
			enumLiteral_43='uint88'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT88EnumLiteralDeclaration_43().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_43, grammarAccess.getElementaryTypeNameEnumAccess().getUINT88EnumLiteralDeclaration_43());
			}
		)
		    |
		(
			enumLiteral_44='uint96'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT96EnumLiteralDeclaration_44().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_44, grammarAccess.getElementaryTypeNameEnumAccess().getUINT96EnumLiteralDeclaration_44());
			}
		)
		    |
		(
			enumLiteral_45='uint104'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT104EnumLiteralDeclaration_45().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_45, grammarAccess.getElementaryTypeNameEnumAccess().getUINT104EnumLiteralDeclaration_45());
			}
		)
		    |
		(
			enumLiteral_46='uint112'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT112EnumLiteralDeclaration_46().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_46, grammarAccess.getElementaryTypeNameEnumAccess().getUINT112EnumLiteralDeclaration_46());
			}
		)
		    |
		(
			enumLiteral_47='uint120'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT120EnumLiteralDeclaration_47().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_47, grammarAccess.getElementaryTypeNameEnumAccess().getUINT120EnumLiteralDeclaration_47());
			}
		)
		    |
		(
			enumLiteral_48='uint128'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT128EnumLiteralDeclaration_48().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_48, grammarAccess.getElementaryTypeNameEnumAccess().getUINT128EnumLiteralDeclaration_48());
			}
		)
		    |
		(
			enumLiteral_49='uint136'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT136EnumLiteralDeclaration_49().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_49, grammarAccess.getElementaryTypeNameEnumAccess().getUINT136EnumLiteralDeclaration_49());
			}
		)
		    |
		(
			enumLiteral_50='uint144'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT144EnumLiteralDeclaration_50().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_50, grammarAccess.getElementaryTypeNameEnumAccess().getUINT144EnumLiteralDeclaration_50());
			}
		)
		    |
		(
			enumLiteral_51='uint152'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT152EnumLiteralDeclaration_51().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_51, grammarAccess.getElementaryTypeNameEnumAccess().getUINT152EnumLiteralDeclaration_51());
			}
		)
		    |
		(
			enumLiteral_52='uint160'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT160EnumLiteralDeclaration_52().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_52, grammarAccess.getElementaryTypeNameEnumAccess().getUINT160EnumLiteralDeclaration_52());
			}
		)
		    |
		(
			enumLiteral_53='uint168'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT168EnumLiteralDeclaration_53().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_53, grammarAccess.getElementaryTypeNameEnumAccess().getUINT168EnumLiteralDeclaration_53());
			}
		)
		    |
		(
			enumLiteral_54='uint178'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT178EnumLiteralDeclaration_54().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_54, grammarAccess.getElementaryTypeNameEnumAccess().getUINT178EnumLiteralDeclaration_54());
			}
		)
		    |
		(
			enumLiteral_55='uint184'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT184EnumLiteralDeclaration_55().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_55, grammarAccess.getElementaryTypeNameEnumAccess().getUINT184EnumLiteralDeclaration_55());
			}
		)
		    |
		(
			enumLiteral_56='uint192'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT192EnumLiteralDeclaration_56().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_56, grammarAccess.getElementaryTypeNameEnumAccess().getUINT192EnumLiteralDeclaration_56());
			}
		)
		    |
		(
			enumLiteral_57='uint200'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT200EnumLiteralDeclaration_57().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_57, grammarAccess.getElementaryTypeNameEnumAccess().getUINT200EnumLiteralDeclaration_57());
			}
		)
		    |
		(
			enumLiteral_58='uint208'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT208EnumLiteralDeclaration_58().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_58, grammarAccess.getElementaryTypeNameEnumAccess().getUINT208EnumLiteralDeclaration_58());
			}
		)
		    |
		(
			enumLiteral_59='uint216'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT216EnumLiteralDeclaration_59().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_59, grammarAccess.getElementaryTypeNameEnumAccess().getUINT216EnumLiteralDeclaration_59());
			}
		)
		    |
		(
			enumLiteral_60='uint224'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT244EnumLiteralDeclaration_60().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_60, grammarAccess.getElementaryTypeNameEnumAccess().getUINT244EnumLiteralDeclaration_60());
			}
		)
		    |
		(
			enumLiteral_61='uint232'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT232EnumLiteralDeclaration_61().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_61, grammarAccess.getElementaryTypeNameEnumAccess().getUINT232EnumLiteralDeclaration_61());
			}
		)
		    |
		(
			enumLiteral_62='uint240'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT240EnumLiteralDeclaration_62().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_62, grammarAccess.getElementaryTypeNameEnumAccess().getUINT240EnumLiteralDeclaration_62());
			}
		)
		    |
		(
			enumLiteral_63='uint248'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT248EnumLiteralDeclaration_63().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_63, grammarAccess.getElementaryTypeNameEnumAccess().getUINT248EnumLiteralDeclaration_63());
			}
		)
		    |
		(
			enumLiteral_64='uint256'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUINT256EnumLiteralDeclaration_64().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_64, grammarAccess.getElementaryTypeNameEnumAccess().getUINT256EnumLiteralDeclaration_64());
			}
		)
		    |
		(
			enumLiteral_65='byte'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTEEnumLiteralDeclaration_65().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_65, grammarAccess.getElementaryTypeNameEnumAccess().getBYTEEnumLiteralDeclaration_65());
			}
		)
		    |
		(
			enumLiteral_66='bytes'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTESEnumLiteralDeclaration_66().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_66, grammarAccess.getElementaryTypeNameEnumAccess().getBYTESEnumLiteralDeclaration_66());
			}
		)
		    |
		(
			enumLiteral_67='bytes1'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES1EnumLiteralDeclaration_67().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_67, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES1EnumLiteralDeclaration_67());
			}
		)
		    |
		(
			enumLiteral_68='bytes2'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES2EnumLiteralDeclaration_68().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_68, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES2EnumLiteralDeclaration_68());
			}
		)
		    |
		(
			enumLiteral_69='bytes3'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES3EnumLiteralDeclaration_69().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_69, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES3EnumLiteralDeclaration_69());
			}
		)
		    |
		(
			enumLiteral_70='bytes4'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES4EnumLiteralDeclaration_70().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_70, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES4EnumLiteralDeclaration_70());
			}
		)
		    |
		(
			enumLiteral_71='bytes5'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES5EnumLiteralDeclaration_71().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_71, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES5EnumLiteralDeclaration_71());
			}
		)
		    |
		(
			enumLiteral_72='bytes6'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES6EnumLiteralDeclaration_72().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_72, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES6EnumLiteralDeclaration_72());
			}
		)
		    |
		(
			enumLiteral_73='bytes7'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES7EnumLiteralDeclaration_73().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_73, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES7EnumLiteralDeclaration_73());
			}
		)
		    |
		(
			enumLiteral_74='bytes8'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES8EnumLiteralDeclaration_74().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_74, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES8EnumLiteralDeclaration_74());
			}
		)
		    |
		(
			enumLiteral_75='bytes9'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES9EnumLiteralDeclaration_75().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_75, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES9EnumLiteralDeclaration_75());
			}
		)
		    |
		(
			enumLiteral_76='bytes10'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES10EnumLiteralDeclaration_76().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_76, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES10EnumLiteralDeclaration_76());
			}
		)
		    |
		(
			enumLiteral_77='bytes11'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES11EnumLiteralDeclaration_77().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_77, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES11EnumLiteralDeclaration_77());
			}
		)
		    |
		(
			enumLiteral_78='bytes12'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES12EnumLiteralDeclaration_78().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_78, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES12EnumLiteralDeclaration_78());
			}
		)
		    |
		(
			enumLiteral_79='bytes13'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES13EnumLiteralDeclaration_79().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_79, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES13EnumLiteralDeclaration_79());
			}
		)
		    |
		(
			enumLiteral_80='bytes14'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES14EnumLiteralDeclaration_80().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_80, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES14EnumLiteralDeclaration_80());
			}
		)
		    |
		(
			enumLiteral_81='bytes15'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES15EnumLiteralDeclaration_81().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_81, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES15EnumLiteralDeclaration_81());
			}
		)
		    |
		(
			enumLiteral_82='bytes16'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES16EnumLiteralDeclaration_82().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_82, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES16EnumLiteralDeclaration_82());
			}
		)
		    |
		(
			enumLiteral_83='bytes17'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES17EnumLiteralDeclaration_83().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_83, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES17EnumLiteralDeclaration_83());
			}
		)
		    |
		(
			enumLiteral_84='bytes18'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES18EnumLiteralDeclaration_84().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_84, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES18EnumLiteralDeclaration_84());
			}
		)
		    |
		(
			enumLiteral_85='bytes19'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES19EnumLiteralDeclaration_85().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_85, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES19EnumLiteralDeclaration_85());
			}
		)
		    |
		(
			enumLiteral_86='bytes20'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES20EnumLiteralDeclaration_86().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_86, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES20EnumLiteralDeclaration_86());
			}
		)
		    |
		(
			enumLiteral_87='bytes21'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES21EnumLiteralDeclaration_87().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_87, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES21EnumLiteralDeclaration_87());
			}
		)
		    |
		(
			enumLiteral_88='bytes22'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES22EnumLiteralDeclaration_88().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_88, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES22EnumLiteralDeclaration_88());
			}
		)
		    |
		(
			enumLiteral_89='bytes23'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES23EnumLiteralDeclaration_89().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_89, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES23EnumLiteralDeclaration_89());
			}
		)
		    |
		(
			enumLiteral_90='bytes24'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES24EnumLiteralDeclaration_90().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_90, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES24EnumLiteralDeclaration_90());
			}
		)
		    |
		(
			enumLiteral_91='bytes25'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES25EnumLiteralDeclaration_91().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_91, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES25EnumLiteralDeclaration_91());
			}
		)
		    |
		(
			enumLiteral_92='bytes26'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES26EnumLiteralDeclaration_92().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_92, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES26EnumLiteralDeclaration_92());
			}
		)
		    |
		(
			enumLiteral_93='bytes27'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES27EnumLiteralDeclaration_93().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_93, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES27EnumLiteralDeclaration_93());
			}
		)
		    |
		(
			enumLiteral_94='bytes28'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES28EnumLiteralDeclaration_94().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_94, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES28EnumLiteralDeclaration_94());
			}
		)
		    |
		(
			enumLiteral_95='bytes29'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES29EnumLiteralDeclaration_95().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_95, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES29EnumLiteralDeclaration_95());
			}
		)
		    |
		(
			enumLiteral_96='bytes30'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES30EnumLiteralDeclaration_96().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_96, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES30EnumLiteralDeclaration_96());
			}
		)
		    |
		(
			enumLiteral_97='bytes31'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES31EnumLiteralDeclaration_97().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_97, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES31EnumLiteralDeclaration_97());
			}
		)
		    |
		(
			enumLiteral_98='bytes32'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBYTES32EnumLiteralDeclaration_98().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_98, grammarAccess.getElementaryTypeNameEnumAccess().getBYTES32EnumLiteralDeclaration_98());
			}
		)
		    |
		(
			enumLiteral_99='string'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getSTRINGEnumLiteralDeclaration_99().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_99, grammarAccess.getElementaryTypeNameEnumAccess().getSTRINGEnumLiteralDeclaration_99());
			}
		)
		    |
		(
			enumLiteral_100='address'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getADDRESSEnumLiteralDeclaration_100().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_100, grammarAccess.getElementaryTypeNameEnumAccess().getADDRESSEnumLiteralDeclaration_100());
			}
		)
		    |
		(
			enumLiteral_101='bool'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getBOOLEnumLiteralDeclaration_101().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_101, grammarAccess.getElementaryTypeNameEnumAccess().getBOOLEnumLiteralDeclaration_101());
			}
		)
		    |
		(
			enumLiteral_102='real'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getREALEnumLiteralDeclaration_102().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_102, grammarAccess.getElementaryTypeNameEnumAccess().getREALEnumLiteralDeclaration_102());
			}
		)
		    |
		(
			enumLiteral_103='ureal'
			{
				$current = grammarAccess.getElementaryTypeNameEnumAccess().getUREALEnumLiteralDeclaration_103().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_103, grammarAccess.getElementaryTypeNameEnumAccess().getUREALEnumLiteralDeclaration_103());
			}
		)
	)
;

// Rule LocationSpecifierEnum
ruleLocationSpecifierEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='memory'
			{
				$current = grammarAccess.getLocationSpecifierEnumAccess().getMEMORYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLocationSpecifierEnumAccess().getMEMORYEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='storage'
			{
				$current = grammarAccess.getLocationSpecifierEnumAccess().getSTORAGEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLocationSpecifierEnumAccess().getSTORAGEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule VisibilityEnum
ruleVisibilityEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='public'
			{
				$current = grammarAccess.getVisibilityEnumAccess().getPUBLICEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getVisibilityEnumAccess().getPUBLICEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='internal'
			{
				$current = grammarAccess.getVisibilityEnumAccess().getINTERNALEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getVisibilityEnumAccess().getINTERNALEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='private'
			{
				$current = grammarAccess.getVisibilityEnumAccess().getPRIVATEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getVisibilityEnumAccess().getPRIVATEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='external'
			{
				$current = grammarAccess.getVisibilityEnumAccess().getEXTERNALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getVisibilityEnumAccess().getEXTERNALEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule AssignmentOpEnum
ruleAssignmentOpEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGNEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAssignmentOpEnumAccess().getASSIGNEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='|='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_OREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_OREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='^='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_XOREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_XOREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='&='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_ANDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_ANDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='<<='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='>>='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='>>>='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='+='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_ADDEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_ADDEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='-='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SUBEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_SUBEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='*='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_MULTEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_MULTEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='/='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_DIVEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_DIVEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='%='
			{
				$current = grammarAccess.getAssignmentOpEnumAccess().getASSIGN_MODEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getAssignmentOpEnumAccess().getASSIGN_MODEnumLiteralDeclaration_11());
			}
		)
	)
;

// Rule EqualityOpEnum
ruleEqualityOpEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getEqualityOpEnumAccess().getEQEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEqualityOpEnumAccess().getEQEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='!='
			{
				$current = grammarAccess.getEqualityOpEnumAccess().getNOTEQEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEqualityOpEnumAccess().getNOTEQEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule ComparisonOpEnum
ruleComparisonOpEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getComparisonOpEnumAccess().getLTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getComparisonOpEnumAccess().getLTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getComparisonOpEnumAccess().getGTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getComparisonOpEnumAccess().getGTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<='
			{
				$current = grammarAccess.getComparisonOpEnumAccess().getLTEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getComparisonOpEnumAccess().getLTEEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getComparisonOpEnumAccess().getGTEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getComparisonOpEnumAccess().getGTEEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='in'
			{
				$current = grammarAccess.getComparisonOpEnumAccess().getINEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getComparisonOpEnumAccess().getINEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule ShiftOpEnum
ruleShiftOpEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<<'
			{
				$current = grammarAccess.getShiftOpEnumAccess().getLEFT_SHIFTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getShiftOpEnumAccess().getLEFT_SHIFTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>>'
			{
				$current = grammarAccess.getShiftOpEnumAccess().getRIGHT_SHIFTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getShiftOpEnumAccess().getRIGHT_SHIFTEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='>>>'
			{
				$current = grammarAccess.getShiftOpEnumAccess().getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getShiftOpEnumAccess().getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule AdditionOpEnum
ruleAdditionOpEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getAdditionOpEnumAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getAdditionOpEnumAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getAdditionOpEnumAccess().getSUBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getAdditionOpEnumAccess().getSUBEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule MulDivModOpEnum
ruleMulDivModOpEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='*'
			{
				$current = grammarAccess.getMulDivModOpEnumAccess().getMULTEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMulDivModOpEnumAccess().getMULTEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='/'
			{
				$current = grammarAccess.getMulDivModOpEnumAccess().getDIVEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMulDivModOpEnumAccess().getDIVEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='%'
			{
				$current = grammarAccess.getMulDivModOpEnumAccess().getMODEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMulDivModOpEnumAccess().getMODEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule IncDecOpEnum
ruleIncDecOpEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='++'
			{
				$current = grammarAccess.getIncDecOpEnumAccess().getINCEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getIncDecOpEnumAccess().getINCEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='--'
			{
				$current = grammarAccess.getIncDecOpEnumAccess().getDECEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getIncDecOpEnumAccess().getDECEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule BooleanLiteralEnum
ruleBooleanLiteralEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='true'
			{
				$current = grammarAccess.getBooleanLiteralEnumAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanLiteralEnumAccess().getTRUEEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='false'
			{
				$current = grammarAccess.getBooleanLiteralEnumAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanLiteralEnumAccess().getFALSEEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule EtherSubDenominationEnum
ruleEtherSubDenominationEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='wei'
			{
				$current = grammarAccess.getEtherSubDenominationEnumAccess().getWEIEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEtherSubDenominationEnumAccess().getWEIEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='szabo'
			{
				$current = grammarAccess.getEtherSubDenominationEnumAccess().getSZABOEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEtherSubDenominationEnumAccess().getSZABOEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='finney'
			{
				$current = grammarAccess.getEtherSubDenominationEnumAccess().getFINNEYEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEtherSubDenominationEnumAccess().getFINNEYEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='ether'
			{
				$current = grammarAccess.getEtherSubDenominationEnumAccess().getETHEREnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getEtherSubDenominationEnumAccess().getETHEREnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule TimeSubdenominationEnum
ruleTimeSubdenominationEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='seconds'
			{
				$current = grammarAccess.getTimeSubdenominationEnumAccess().getSECONDSEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTimeSubdenominationEnumAccess().getSECONDSEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='minutes'
			{
				$current = grammarAccess.getTimeSubdenominationEnumAccess().getMINUTESEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTimeSubdenominationEnumAccess().getMINUTESEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='hours'
			{
				$current = grammarAccess.getTimeSubdenominationEnumAccess().getHOURSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTimeSubdenominationEnumAccess().getHOURSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='days'
			{
				$current = grammarAccess.getTimeSubdenominationEnumAccess().getDAYSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getTimeSubdenominationEnumAccess().getDAYSEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='weeks'
			{
				$current = grammarAccess.getTimeSubdenominationEnumAccess().getWEEKSEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getTimeSubdenominationEnumAccess().getWEEKSEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='years'
			{
				$current = grammarAccess.getTimeSubdenominationEnumAccess().getYEARSEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getTimeSubdenominationEnumAccess().getYEARSEnumLiteralDeclaration_5());
			}
		)
	)
;

// Rule SpecialVariablesTypeEnum
ruleSpecialVariablesTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='msg'
			{
				$current = grammarAccess.getSpecialVariablesTypeEnumAccess().getMSGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSpecialVariablesTypeEnumAccess().getMSGEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='block'
			{
				$current = grammarAccess.getSpecialVariablesTypeEnumAccess().getBLOCKEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSpecialVariablesTypeEnumAccess().getBLOCKEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='tx'
			{
				$current = grammarAccess.getSpecialVariablesTypeEnumAccess().getTXEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getSpecialVariablesTypeEnumAccess().getTXEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule SpecialExpressionTypeEnum
ruleSpecialExpressionTypeEnum returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='super'
			{
				$current = grammarAccess.getSpecialExpressionTypeEnumAccess().getSUPEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getSpecialExpressionTypeEnumAccess().getSUPEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='this'
			{
				$current = grammarAccess.getSpecialExpressionTypeEnumAccess().getTHISEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getSpecialExpressionTypeEnumAccess().getTHISEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : '0' ('1'..'9')+;

RULE_HEX : '0x' ('0'..'9'|'A'..'F'|'a'..'f')+;

RULE_DECIMAL : RULE_INT '.' RULE_INT;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
