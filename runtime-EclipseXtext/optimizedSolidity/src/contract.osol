contract HotelBooking {
    uint counter;
    mapping (string=>uint) position;
    
    
    struct Element {
        string ID;
      }
    
    struct StateMemory {
        uint quotation;
        bool confirmation;
        string date;
        uint bedrooms;
        bool confirm;
        string motivation;
        string booking_id;
        bool cancel;
        string ID;
    }
    
    function init() internal {
        bool result=true;
        
        for(uint i=0; i<roleList.length; i++) {
            if(roles[roleList[i]]==0x0000000000000000000000000000000000000000) {
                result=false;
                break;
            }
        }
        if(result) {
            enable("StartEvent_1jtgn3j");
            StartEvent_1jtgn3j();
        }
    }
    
    function ExclusiveGateway_106je4z() private {
        require(elements[position["ExclusiveGateway_106je4z"]].status==State.ENABLED);
        done("ExclusiveGateway_106je4z");
        
        if(currentMemory.confirm==true) {
            enable("Message_1em0ee4");
        }
        if(currentMemory.confirm==false) {
            enable("ExclusiveGateway_0hs3ztq");
            ExclusiveGateway_0hs3ztq();
        }
    }
    
    function disable(string memory _taskID) internal {
        elements[position[_taskID]].status=State.DISABLED;
    }
    
    function done(string memory _taskID) internal {
        elements[position[_taskID]].status=State.DONE;
    }
    
    function getCurrentState() public view returns(Element[] memory, StateMemory memory) {
        // Emit stateChanged(elements, currentMemory);
        return (elements, currentMemory);
    }
    
    function compareStrings (string memory a, string memory b) internal pure returns (bool) {
        return keccak256(abi.encode(a))==keccak256(abi.encode(b));
    }
}