contract HotelBooking {
    uint counter;
	event stateChanged;
	mapping (string=>uint) position;
    
    Element[] elements;
    StateMemory currentMemory;
    
    struct Element {
        string ID;
        State status;
    }
    
    struct StateMemory {
        uint quotation;
        bool confirmation;
        string date;
        uint bedrooms;
        bool confirm;
        string motivation;
        string booking_id;
        bool cancel;
        string ID;
    }
    
    /*constructor() public {
        // Struct instantiation
        for (uint i = 0; i < elementsID.length; i ++) {
            elements.push(Element(elementsID[i], State.DISABLED));
            position[elementsID[i]]=i;
        }
        
        // Roles definition
        roles["Client"] = 0x8460b386B04018f31E04D1bF181be1f26f74bb32;
        roles["Hotel"] = 0x8460b386B04018f31E04D1bF181be1f26f74bb32;
        
        // Enable the start process
        init();
    }*/
    
    modifier checkMand(string storage role) {
        require(msg.sender == roles[role]);
        _;
    }

    modifier checkOpt(string storage role) {
        require(msg.sender == optionalRoles[role]);
        _;
    }

    function init() internal{
       bool result=true;
       	for(uint i=0; i<roleList.length;i++){
       	     if(roles[roleList[i]]==0x0000000000000000000000000000000000000000){
                result=false;
                break;
            }
       	}
       	if(result){
       	    enable("StartEvent_1jtgn3j");
				StartEvent_1jtgn3j();
       	}
   }
   
   function ExclusiveGateway_106je4z() private {
       require(elements[position["ExclusiveGateway_106je4z"]].status==State.ENABLED);
       done("ExclusiveGateway_106je4z");
       
       if(currentMemory.confirm==true) {
           enable("Message_1em0ee4");
        }
        
        if(currentMemory.confirm==false) {
            enable("ExclusiveGateway_0hs3ztq");
            ExclusiveGateway_0hs3ztq();
        }
    }
    
    function disable(string memory _taskID) internal {
        elements[position[_taskID]].status=State.DISABLED;
    }
    
    function done(string memory _taskID) internal {
        elements[position[_taskID]].status=State.DONE;
    }
    
    function getCurrentState() public {
        // Emit stateChanged(elements, currentMemory);
        return (elements, currentMemory);
    }
    
    function compareStrings (string memory a, string memory b) internal returns (bool) {
        return keccak256(abi.encode(a))==keccak256(abi.encode(b));
    }
}