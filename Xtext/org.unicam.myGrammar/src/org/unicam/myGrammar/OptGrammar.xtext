/*
 * Grammar for Solidity 0.5.2
 * 
 * Language name: osol
 */
grammar org.unicam.myGrammar.OptGrammar with org.eclipse.xtext.common.Terminals

generate optGrammar "http://www.unicam.org/myGrammar/OptGrammar"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// ---------- TO DO ----------
/*
 * Controllare gli array
 * Controllare le strutture
 */
// ---------- TO DO ----------

// ---------- Old grammar ----------
/*
 * Solidity:
 * (
 * importDirective+=ImportDirective |
 * contract+=Contract
 * )*
 * ;
 * 
 * ImportDirective:
 * "import" importURI=STRING ";" |
 * "import" "*" "as" unitAlias=ID "from" importURI=STRING ";" |
 * "import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";"
 * ;
 * 
 * SymbolAlias:
 * symbol=ID "as" alias=ID
 * ;
 */

Model:
	operations+=Contract*
;

Contract:
	"contract" name=ID (
		inheritanceSpecifiers+=InheritanceSpecifier
		("," inheritanceSpecifiers+=InheritanceSpecifier)*
	)? body=DefinitionBody
;

InheritanceSpecifier:
	SuperType=Contract (args=FunctionCallListArguments)?
;

DefinitionBody:
	{DefinitionBody} "{" (
		functions+=FunctionDefinition |
		structs+=StructDefinition |
		enums+=EnumDefinition |
		variables+=VariableDeclaration ";" |
		modifiers+=Modifier |
		events+=Event
	)* "}"
;
// ---------- End Old grammar ----------

// ---------- New grammar ----------
/*
 * Contract:
 * "contract" name=ID "{" (
 * blocks+=Declaration ";" |
 * blocks+=FunctionDefinition
 * )* "}"
 * ;
 * Declaration:
 * FunctionDeclaration |
 * StructDefinition
 * ;
 * 
 * FunctionDeclaration:
 * EnumDefinition |
 * FunctionParameterDeclaration
 * ;
 * 
 * FunctionParameterDeclaration:
 * //ArrayDefinitionDeclaration |
 * Mapping |
 * PrimaryTypeDefinitionDeclaration// |
 * //ConcreteStructureDefinitionDeclaration
 * ;
 * 
 * PrimaryTypeDefinitionDeclaration:
 * (
 * PrimaryTypeDeclaration |
 * ref=[PrimaryTypeDeclaration]
 * )
 * (
 * operator=OperationAssegnationLiteral value=(
 * Expression |
 * SingleDefinition
 * )
 * )?
 * ;
 * 
 * PrimaryTypeDeclaration:
 * ArrayableDeclaration |
 * NonArrayableDeclaration
 * ;
 * 
 * NonArrayableDeclaration:
 * location=LocationSpecifierEnum? constant?='constant'? visibility=VisibilityEnum? type=SimpleTypeDeclaration name=ID
 * ;
 * 
 * ArrayableDeclaration:
 * constant?='constant'? visibility=VisibilityEnum? type=ElementaryTypeNameEnum name=ID
 * ;
 * 
 * OperationAssegnationLiteral:
 * value = ('=' | '*=' | '+=' | '-=' | '/=')
 * ;
 * 
 * SimpleTypeDeclaration:
 * type=('string' | 'bool')
 * ;
 * 
 * SingleDefinition:
 * first=('++' | '--') name=[PrimaryTypeDeclaration] |
 * name=[PrimaryTypeDeclaration] second=('++' | '--')
 * ;
 */
// ---------- End New grammar ----------

// Anonymous function allowed when "name" is not specified.
FunctionDefinition:
	payable?="payable"? "function" name=ID parameters=ParameterList optionalElements+=FunctionDefinitionOptionalElement* (
		"returns" returnParameters=ReturnsParameterList
	)?
	(
		block=Body |
		";"
	)
;

FunctionCallListArguments:
	"(" {FunctionCallListArguments} (
			arguments+=Expression ("," arguments+=Expression)*
		)?
	")"
;

// call({arg1: 1, arg2: 2})
FunctionCallArguments:
	"("
		"{" {FunctionCallArguments} (
				args+=FunctionCallArg ("," args+=FunctionCallArg)*
			)?
		"}"
	")" |
	FunctionCallListArguments
;

FunctionCallArg:
	name=ID ":" expr=Expression
;

FunctionDefinitionOptionalElement:
	Const |
	ModifierInvocation |
	VisibilitySpecifier
;

Const:
	"constant" {Const}
;

VisibilitySpecifier:
	visibility=VisibilityEnum
;

StructDefinition:
	visibility=VisibilityEnum? "struct" name=ID "{"
		(
			members+=VariableDeclaration ";"
		)*
	"}"
;

EnumDefinition:
	visibility=VisibilityEnum? "enum" name=ID "{" members+=EnumValue ("," members+=EnumValue)* "}"
;

EnumValue:
	name=ID
;

Variable:
	name=ID
;

// Variable Declarations
VariableDeclaration returns Statement:
	StandardVariableDeclaration |
	VarVariableDeclaration |
	VarVariableTupleVariableDeclaration
;

StandardVariableDeclaration:
	type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable (
		"=" expression=Expression
	)?
;

VarVariableDeclaration:
	varType=VarType variable=Variable (
		"=" expression=Expression
	)?
;

VarVariableTupleVariableDeclaration:
	varType=VarType tuple=Tuple (
		"=" expression=Expression
	)?
;

VariableDeclarationOptionalElement:
	VisibilitySpecifier |
	IndexedSpecifer |
	ConstantSpecifier |
	LocationSpecifier
;

IndexedSpecifer:
	"indexed" {IndexedSpecifer}
;

ConstantSpecifier:
	 "constant" {ConstantSpecifier}
;

LocationSpecifier:
	location=LocationSpecifierEnum
;

// Types
Type:
	StandardType | isVarType?=VarType
;

StandardType:
	ElementaryType dimension=ArrayDimensions? |
	Mapping |
	QualifiedIdentifier
;

StandardTypeWithoutQualifiedIdentifier:
	ElementaryType dimension=ArrayDimensions? |
	Mapping
;

ElementaryType:
	name=ElementaryTypeNameEnum
;

Mapping:
	"mapping" "(" keyType=ElementaryTypeNameEnum "=>" valueType=Type ")"
;

ArrayDimensions:
	"[" {ArrayDimensions} value+=Expression? "]" ("[" value+=Expression? "]")*
;

VarType:
	"var"
;

// Tuples
Tuple:
	"(" {Tuple} (
		members+=Expression? (
			members+=TupleSeparator members+=Expression?
		)+
	)? ")"
;

TupleSeparator:
	"," {TupleSeparator}
;

// SimpleStatement
// ---------------------
// SimpleStatement:
// SimpleStatement2 ";"
// ;
SimpleStatement:
	(
		StandardTypeWithoutQualifiedIdentifier (
			{StandardVariableDeclaration.type=current} ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?
		) |
		VarType (
			(
				{VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression)
			) |
			(
				{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression)
			)
		) |
		ExpressionStatement
	) semicolon?=";"
;

SimpleStatement2:
	(
		StandardTypeWithoutQualifiedIdentifier (
			{StandardVariableDeclaration.type=current} optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?
		) |
		VarType (
			(
				{VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression)
			) |
			(
				{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression)
			)
		) |
		ExpressionStatement
	)
;

ExpressionStatement:
	expression=Expression
;

QualifiedIdentifier:
	identifier=ID qualifiers+=Qualifier*
;

Qualifier:
	Field |
	Index |
	Arguments
;

Field:
	"." field=ID
;

Index:
	"[" {Index} value=Expression? "]"
;

Arguments:
	arguments=FunctionCallArguments
;

Modifier:
	"modifier" name=ID parameters=ParameterList? block=Body
;

Event:
	"event" name=ID parameters=ParameterList? ";"
;

ModifierInvocation:
	name=[Modifier] args=FunctionCallListArguments?
;

ParameterList:
	"("
		{ParameterList} (parameters+=VariableDeclaration (
			"," parameters+=VariableDeclaration)*
		)?
	")"
;

ReturnsParameterList:
	"("
		{ReturnsParameterList} (parameters+=ReturnParameterDeclaration (
			"," parameters+=ReturnParameterDeclaration)*
		)?
	")"
;

ReturnParameterDeclaration:
	typeRef=Type variable=Variable?
;

Statement:
	IfStatement |
	WhileStatement |
	ForStatement |
	Body |
	PlaceHolderStatement |
	(
		(
			ContinueStatement |
			BreakStatement |
			ReturnStatement |
			ThrowStatement |
			DeleteStatement |
			SimpleStatement
		)
	)
;

DeleteStatement:
	"delete" variable=QualifiedIdentifier ";"
;

IfStatement:
	"if" "(" condition=Expression ")"
	trueBody=Statement (
		=> "else" falseBody=Statement
	)?
;

WhileStatement:
	"while" "(" condition=Expression ")"
	body=Statement
;

ForStatement:
	"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=Expression? ";" loopExpression=ExpressionStatement? ")"
	body=Statement
;

Body:
	"{" {Block} (
		statements+=Statement (statements+=Statement)*
	)? "}"
;

ContinueStatement:
	"continue" {Continue} ";"
;

BreakStatement:
	"break" {BreakStatement} ";"
;

ReturnStatement:
	"return" {ReturnStatement} expression=Expression? ";"
;

ThrowStatement:
	"throw" {ThrowStatement} ";"
;

// Only allowed in a Modifier DAF
PlaceHolderStatement:
	"_" {PlaceHolderStatement}
;

Expression:
	Assignment
;

SpecialExpression:
	type=SpecialExpressionTypeEnum fieldOrMethod=Field? qualifiers+=(
		Index |
		Arguments
	)*
;

// Right associative
Assignment returns Expression:
	BinaryExpression (
		(
			{Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression
		) |
		(
			{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?
		)
	)?
;

BinaryExpression returns Expression:
	Or
;

// Precedence: 4, Left associative
Or returns Expression:
	And (
		{Or.left=current} "||" right=And
	)*
;

// Precedence: 5, Left associative
And returns Expression:
	Equality (
		{And.left=current} "&&" right=Equality
	)*
;

// Precedence: 6, Left associative
Equality returns Expression:
	Comparison (
		{Equality.left=current} equalityOp=EqualityOpEnum right=Comparison
	)*
;

// Precedence: 7, Left associative
Comparison returns Expression:
	BitOr (
		{Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr
	)*
;

// Precedence: 8, Left associative
BitOr returns Expression:
	BitXor (
		{BitOr.left=current} "|" right=BitXor
	)*
;

// Precedence: 9, Left associativ
BitXor returns Expression:
	BitAnd (
		{BitXor.left=current} "^" right=BitAnd
	)*
;

// Precedence: 10, Left associative
BitAnd returns Expression:
	Shift (
		{BitAnd.left=current} "&" right=Shift
	)*
;

// Precedence: 11, Left associative
Shift returns Expression:
	AddSub (
		{Shift.left=current} shiftOp=ShiftOpEnum right=AddSub
	)*
;

// Precedence: 12, Left associative
AddSub returns Expression:
	MulDivMod => (
		{AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod
	)*
;

// Precedence: 13, Left associative
MulDivMod returns Expression:
	Exponent (
		{MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent
	)*
;

// Precedence: 14, Left associative
Exponent returns Expression:
	UnaryExpression (
		{Exponent.left=current} "**" right=UnaryExpression
	)*
;

UnaryExpression returns Expression:
	NotExpression |
	BinaryNotExpression |
	SignExpression |
	NewExpression |
	PreExpression
;

NotExpression:
	"!" expression=UnaryExpression
;

PreIncExpression:
	expression=PostIncDecExpression
;

PreDecExpression:
	expression=PostIncDecExpression
;

BinaryNotExpression:
	"~" expression=UnaryExpression
;

SignExpression:
	signOp=(
		"+" |
		"-"
	) expression=UnaryExpression
;

NewExpression:
	"new" contract=Contract args=FunctionCallListArguments
;

PreExpression returns Expression:
	PostIncDecExpression |
	("++") PostIncDecExpression (
		{PreIncExpression.expression=current}
	) |
	("--") PostIncDecExpression (
		{PreDecExpression.expression=current}
	)
;

PostIncDecExpression returns Expression:
	PrimaryExpression (
		{PostIncDecExpression.expression=current} postOp=IncDecOpEnum
	)*
;

PrimaryExpression returns Expression:
	SpecialExpression |
	QualifiedIdentifier |
	Literal |
	TypeCast |
	"("
		Expression (
			{Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+
		)?
	")" |
	"("
		TupleSeparator (
			{Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*
		)
	")" |
	"(" ")" {Tuple}
;

Literal:
	SpecialVariables |
	BooleanConst |
	Number |
	StringLiteral |
	GasleftFunction |
	BlockhashFunction |
	MathematicalFunction |
	HashFunction |
	EcrecoverFunction
;

GasleftFunction:
	name="gasleft" "(" ")"
;

BlockhashFunction:
	"blockhash" "(" parameter=IntParameter ")"
;

MathematicalFunction:
	function=("addmod" | "mulmod") "("
		parameters+=IntParameter ","
		parameters+=IntParameter ","
		parameters+=IntParameter
	')'
;

EcrecoverFunction:
	function="ecrecover" "("
		parameters+=IntParameter ","
		parameters+=IntParameter ","
		parameters+=IntParameter ","
		parameters+=IntParameter
	')'
;

HashFunction:
	name=("keccak256" | "sha256" | "ripemd160") "(" parameters=IntParameter ")"
;

IntParameter:
	param=ArithmeticOperations |
	fun=FunctionCall
;

FunctionCall:
	name=[FunctionDefinition] "(" (parameters+=Expression ("," parameters+=Expression)*)? ")"
;

ArithmeticOperations:
	first=PrimaryArithmetic seconds+=(SecondOperators)*;

PrimaryArithmetic:
	Number |
	"(" Expression ")"
;

SecondOperators:
	operator=("+" | "-" | "/" | "*") value=PrimaryArithmetic
;
	
BooleanConst:
	value=BooleanLiteralEnum
;

Number:
	(
		NumberDimensionless |
		HexLiteral |
		DecimalLiteral |
		Now
	) etherUnit=UnitTypes?
;

Now:
	{Now} "now"
;

UnitTypes:
	time=Time |
	units=Ether
;

NumberDimensionless:
	value=INT
;

Ether:
	value=INT ether=EtherSubDenominationEnum
;

Time:
	value=INT time=TimeSubdenominationEnum
;

StringLiteral:
	value=STRING
;

HexLiteral:
	value=HEX
;

DecimalLiteral:
	value=DECIMAL
;

TypeCast:
	value=ElementaryTypeNameEnum "("
		expression=Expression
	")"
;

SpecialVariables:
	type=SpecialVariablesTypeEnum "." field=ID qualifiers+=Qualifier*
;

terminal HEX:
	"0x" ("0".."9"|"A".."F"|"a".."f")+
;

terminal DECIMAL returns ecore::EDouble:
	INT("." INT)
;

// Enums
enum ElementaryTypeNameEnum:
	// INT
	INT="int" |
	INT16="int16" |
	INT24="int24" |
	INT32="int32" |
	INT40="int40" |
	INT48="int48" |
	INT56="int56" |
	INT64="int64" |
	INT72="int72" |
	INT80="int80" |
	INT88="int88" |
	INT96="int96" |
	INT104="int104" |
	INT112="int112" |
	INT120="int120" |
	INT128="int128" |
	INT136="int136" |
	INT144="int144" |
	INT152="int152" |
	INT160="int160" |
	INT168="int168" |
	INT178="int178" |
	INT184="int184" |
	INT192="int192" |
	INT200="int200" |
	INT208="int208" |
	INT216="int216" |
	INT224="int224" |
	INT232="int232" |
	INT240="int240" |
	INT248="int248" |
	INT256="int256" |
	// UINT
	UINT="uint" |
	UINT8="uint8" |
	UINT16="uint16" |
	UNIT24="uint24" |
	UINT32="uint32" |
	UINT40="uint40" |
	UINT48="uint48" |
	UNIT56="uint56" |
	UINT64="uint64" |
	UINT72="uint72" |
	UINT80="uint80" |
	UINT88="uint88" |
	UINT96="uint96" |
	UINT104="uint104" |
	UINT112="uint112" |
	UINT120="uint120" |
	UINT128="uint128" |
	UINT136="uint136" |
	UINT144="uint144" |
	UINT152="uint152" |
	UINT160="uint160" |
	UINT168="uint168" |
	UINT178="uint178" |
	UINT184="uint184" |
	UINT192="uint192" |
	UINT200="uint200" |
	UINT208="uint208" |
	UINT216="uint216" |
	UINT244="uint224" |
	UINT232="uint232" |
	UINT240="uint240" |
	UINT248="uint248" |
	UINT256="uint256" |
	// BYTE
	BYTE="byte" |
	BYTES="bytes" |
	BYTES1="bytes1" |
	BYTES2="bytes2" |
	BYTES3="bytes3" |
	BYTES4="bytes4" |
	BYTES5="bytes5" |
	BYTES6="bytes6" |
	BYTES7="bytes7" |
	BYTES8="bytes8" |
	BYTES9="bytes9" |
	BYTES10="bytes10" |
	BYTES11="bytes11" |
	BYTES12="bytes12" |
	BYTES13="bytes13" |
	BYTES14="bytes14" |
	BYTES15="bytes15" |
	BYTES16="bytes16" |
	BYTES17="bytes17" |
	BYTES18="bytes18" |
	BYTES19="bytes19" |
	BYTES20="bytes20" |
	BYTES21="bytes21" |
	BYTES22="bytes22" |
	BYTES23="bytes23" |
	BYTES24="bytes24" |
	BYTES25="bytes25" |
	BYTES26="bytes26" |
	BYTES27="bytes27" |
	BYTES28="bytes28" |
	BYTES29="bytes29" |
	BYTES30="bytes30" |
	BYTES31="bytes31" |
	BYTES32="bytes32" |
	// Other
	STRING="string" |
	ADDRESS="address" |
	BOOL="bool" |
	REAL="real" |
	UREAL="ureal"
;

MapLocationLiteral:
	"storage"
;

enum LocationSpecifierEnum:
	MEMORY="memory" |
	MapLocationLiteral |
	CALLDATA="calldata"
;

enum VisibilityEnum:
	PUBLIC="public" |
	INTERNAL="internal" |
	PRIVATE="private" |
	EXTERNAL="external"
;

enum AssignmentOpEnum:
	ASSIGN="=" |
	ASSIGN_OR="|=" |
	ASSIGN_XOR="^=" |
	ASSIGN_AND="&=" |
	ASSIGN_SHIFT_LEFT="<<=" |
	ASSIGN_SHIFT_RIGHT=">>=" |
	ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" |
	ASSIGN_ADD="+=" |
	ASSIGN_SUB="-=" |
	ASSIGN_MULT="*=" |
	ASSIGN_DIV="/=" |
	ASSIGN_MOD="%="
;

enum EqualityOpEnum:
	EQ="==" |
	NOTEQ="!="
;

enum ComparisonOpEnum:
	LT="<" |
	GT=">" |
	LTE="<=" |
	GTE=">=" |
	IN="in"
;

enum ShiftOpEnum:
	LEFT_SHIFT="<<" |
	RIGHT_SHIFT=">>" |
	ARITHMETIC_RIGHT_SHIFT=">>>"
;

enum AdditionOpEnum:
	ADD="+" |
	SUB="-"
;

enum MulDivModOpEnum:
	MULT="*" |
	DIV="/" |
	MOD="%"
;

enum IncDecOpEnum:
	INC="++" |
	DEC="--"
;

enum BooleanLiteralEnum:
	TRUE="true" |
	FALSE="false"
;

enum EtherSubDenominationEnum:
	WEI="wei" |
	SZABO="szabo" |
	FINNEY="finney" |
	ETHER="ether"
;

enum TimeSubdenominationEnum:
	SECONDS="seconds" |
	MINUTES="minutes" |
	HOURS="hours" |
	DAYS="days" |
	WEEKS="weeks" |
	YEARS="years"
;

// Also "EOS" DAF

SpecialVariablesTypeEnum:
	name=(
		BLOCK |
		MSG |
		TX
	)
;

terminal BLOCK:
	"block." (
		"coinbase" |
		"difficulty" |
		"gaslimit" |
		"number" |
		"timestamp"
	)
;

terminal MSG:
	"msg." (
		"data" |
		"gas" |
		"sender" |
		"sig" |
		"value"
	)
;

terminal TX:
	"tx." (
		"gasprice" |
		"origin"
	)
;

enum SpecialExpressionTypeEnum:
	SUPER="super" |
	THIS="this"
;

enum ReservedWordsEnum:
	AS="as" |
	CASE="case" |
	CATCH="catch" |
	FINAL="final" |
	LET="let" |
	MATCH="match" |
	OF="of" |
	RELOCATABLE="relocatable" |
	SWITCH="switch" |
	TRY="try" |
	TYPE="type" |
	TYPEOF="typeof" |
	USING="using" |
	ILLEGAL="ILLEGAL"
;