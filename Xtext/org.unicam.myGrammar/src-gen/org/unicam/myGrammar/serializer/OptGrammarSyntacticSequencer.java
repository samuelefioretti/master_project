/*
 * generated by Xtext 2.20.0
 */
package org.unicam.myGrammar.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.unicam.myGrammar.services.OptGrammarGrammarAccess;

@SuppressWarnings("all")
public class OptGrammarSyntacticSequencer extends AbstractSyntacticSequencer {

	protected OptGrammarGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArrayType___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__a;
	protected AbstractElementAlias match_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__a;
	protected AbstractElementAlias match_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__p;
	protected AbstractElementAlias match_PlaceHolderStatement_SemicolonKeyword_1_q;
	protected AbstractElementAlias match_PrimaryArithmetic_PrimaryExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_4_0_a__q;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_4_0_a;
	protected AbstractElementAlias match_PrimaryExpression_LeftParenthesisKeyword_4_0_p;
	protected AbstractElementAlias match_Tuple___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_3___or___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_3__;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (OptGrammarGrammarAccess) access;
		match_ArrayType___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4_2()));
		match_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_4_0()));
		match_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getArrayTypeAccess().getRightSquareBracketKeyword_4_2()), new TokenAlias(false, false, grammarAccess.getArrayTypeAccess().getLeftSquareBracketKeyword_4_0()));
		match_PlaceHolderStatement_SemicolonKeyword_1_q = new TokenAlias(false, true, grammarAccess.getPlaceHolderStatementAccess().getSemicolonKeyword_1());
		match_PrimaryArithmetic_PrimaryExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_4_0_a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getPrimaryArithmeticAccess().getLeftParenthesisKeyword_1_0()), new TokenAlias(true, true, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0()));
		match_PrimaryExpression_LeftParenthesisKeyword_4_0_a = new TokenAlias(true, true, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_PrimaryExpression_LeftParenthesisKeyword_4_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
		match_Tuple___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_3___or___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_3__ = new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTupleAccess().getLeftParenthesisKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getTupleAccess().getRightParenthesisKeyword_0_3())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getTupleAccess().getLeftSquareBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTupleAccess().getRightSquareBracketKeyword_1_3())));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getVarTypeRule())
			return getVarTypeToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * VarType:
	 * 	"var";
	 */
	protected String getVarTypeToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "var";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ArrayType___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__a.equals(syntax))
				emit_ArrayType___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__a.equals(syntax))
				emit_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__p.equals(syntax))
				emit_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PlaceHolderStatement_SemicolonKeyword_1_q.equals(syntax))
				emit_PlaceHolderStatement_SemicolonKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryArithmetic_PrimaryExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_4_0_a__q.equals(syntax))
				emit_PrimaryArithmetic_PrimaryExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_4_0_a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_4_0_a.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_4_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryExpression_LeftParenthesisKeyword_4_0_p.equals(syntax))
				emit_PrimaryExpression_LeftParenthesisKeyword_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Tuple___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_3___or___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_3__.equals(syntax))
				emit_Tuple___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_3___or___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_3__(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '[' ']' (ambiguity) (rule start)
	 *     value+=Expression ']' (ambiguity) (rule end)
	 */
	protected void emit_ArrayType___LeftSquareBracketKeyword_4_0_RightSquareBracketKeyword_4_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (']' '[')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '[' ']' '[' (ambiguity) value+=Expression
	 *     value+=Expression ']' '[' (ambiguity) value+=Expression
	 */
	protected void emit_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (']' '[')+
	 *
	 * This ambiguous syntax occurs at:
	 *     value+=Expression (ambiguity) value+=Expression
	 */
	protected void emit_ArrayType___RightSquareBracketKeyword_4_2_LeftSquareBracketKeyword_4_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '_' (ambiguity) (rule start)
	 */
	protected void emit_PlaceHolderStatement_SemicolonKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' '('*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) decimalValue=DecimalLiteral
	 *     (rule start) (ambiguity) hexValue=HexLiteral
	 *     (rule start) (ambiguity) intValue=IntLiteral
	 */
	protected void emit_PrimaryArithmetic_PrimaryExpression___LeftParenthesisKeyword_1_0_LeftParenthesisKeyword_4_0_a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '(' (ambiguity) '!' expression=UnaryExpression
	 *     (rule start) '(' (ambiguity) '(' ')' ')' (rule start)
	 *     (rule start) '(' (ambiguity) 'blockhash' '(' parameter=IntParameter
	 *     (rule start) '(' (ambiguity) 'new' contract=[Contract|ID]
	 *     (rule start) '(' (ambiguity) '~' expression=UnaryExpression
	 *     (rule start) '(' (ambiguity) function='addmod'
	 *     (rule start) '(' (ambiguity) function='ecrecover'
	 *     (rule start) '(' (ambiguity) function='mulmod'
	 *     (rule start) '(' (ambiguity) identifier=ID
	 *     (rule start) '(' (ambiguity) name='gasleft'
	 *     (rule start) '(' (ambiguity) name='keccak256'
	 *     (rule start) '(' (ambiguity) name='ripemd160'
	 *     (rule start) '(' (ambiguity) name='sha256'
	 *     (rule start) '(' (ambiguity) name=BLOCK
	 *     (rule start) '(' (ambiguity) name=MSG
	 *     (rule start) '(' (ambiguity) name=NOW
	 *     (rule start) '(' (ambiguity) name=TX
	 *     (rule start) '(' (ambiguity) signOp='+'
	 *     (rule start) '(' (ambiguity) signOp='-'
	 *     (rule start) '(' (ambiguity) type=SpecialExpressionTypeEnum
	 *     (rule start) '(' (ambiguity) value='false'
	 *     (rule start) '(' (ambiguity) value='true'
	 *     (rule start) '(' (ambiguity) value=STRING
	 *     (rule start) '(' (ambiguity) value=SizedDeclaration
	 *     (rule start) '(' (ambiguity) {AddSub.left=}
	 *     (rule start) '(' (ambiguity) {And.left=}
	 *     (rule start) '(' (ambiguity) {Assignment.left=}
	 *     (rule start) '(' (ambiguity) {BitAnd.left=}
	 *     (rule start) '(' (ambiguity) {BitOr.left=}
	 *     (rule start) '(' (ambiguity) {BitXor.left=}
	 *     (rule start) '(' (ambiguity) {Comparison.left=}
	 *     (rule start) '(' (ambiguity) {Equality.left=}
	 *     (rule start) '(' (ambiguity) {Exponent.left=}
	 *     (rule start) '(' (ambiguity) {MulDivMod.left=}
	 *     (rule start) '(' (ambiguity) {Or.left=}
	 *     (rule start) '(' (ambiguity) {PostIncDecExpression.expression=}
	 *     (rule start) '(' (ambiguity) {PreDecExpression.expression=}
	 *     (rule start) '(' (ambiguity) {PreIncExpression.expression=}
	 *     (rule start) '(' (ambiguity) {Shift.left=}
	 *     (rule start) '(' (ambiguity) {Tuple.members+=}
	 *     (rule start) '(' (ambiguity) {VariableDeclarationExpression.type=}
	 *     (rule start) '++' (ambiguity) '(' ')' (rule start)
	 *     (rule start) '++' (ambiguity) 'blockhash' '(' parameter=IntParameter
	 *     (rule start) '++' (ambiguity) decimalValue=DecimalLiteral
	 *     (rule start) '++' (ambiguity) function='addmod'
	 *     (rule start) '++' (ambiguity) function='ecrecover'
	 *     (rule start) '++' (ambiguity) function='mulmod'
	 *     (rule start) '++' (ambiguity) hexValue=HexLiteral
	 *     (rule start) '++' (ambiguity) identifier=ID
	 *     (rule start) '++' (ambiguity) intValue=IntLiteral
	 *     (rule start) '++' (ambiguity) name='gasleft'
	 *     (rule start) '++' (ambiguity) name='keccak256'
	 *     (rule start) '++' (ambiguity) name='ripemd160'
	 *     (rule start) '++' (ambiguity) name='sha256'
	 *     (rule start) '++' (ambiguity) name=BLOCK
	 *     (rule start) '++' (ambiguity) name=MSG
	 *     (rule start) '++' (ambiguity) name=NOW
	 *     (rule start) '++' (ambiguity) name=TX
	 *     (rule start) '++' (ambiguity) type=SpecialExpressionTypeEnum
	 *     (rule start) '++' (ambiguity) value='false'
	 *     (rule start) '++' (ambiguity) value='true'
	 *     (rule start) '++' (ambiguity) value=STRING
	 *     (rule start) '++' (ambiguity) value=SizedDeclaration
	 *     (rule start) '++' (ambiguity) {PostIncDecExpression.expression=}
	 *     (rule start) '++' (ambiguity) {Tuple.members+=}
	 *     (rule start) '--' (ambiguity) '(' ')' (rule start)
	 *     (rule start) '--' (ambiguity) 'blockhash' '(' parameter=IntParameter
	 *     (rule start) '--' (ambiguity) decimalValue=DecimalLiteral
	 *     (rule start) '--' (ambiguity) function='addmod'
	 *     (rule start) '--' (ambiguity) function='ecrecover'
	 *     (rule start) '--' (ambiguity) function='mulmod'
	 *     (rule start) '--' (ambiguity) hexValue=HexLiteral
	 *     (rule start) '--' (ambiguity) identifier=ID
	 *     (rule start) '--' (ambiguity) intValue=IntLiteral
	 *     (rule start) '--' (ambiguity) name='gasleft'
	 *     (rule start) '--' (ambiguity) name='keccak256'
	 *     (rule start) '--' (ambiguity) name='ripemd160'
	 *     (rule start) '--' (ambiguity) name='sha256'
	 *     (rule start) '--' (ambiguity) name=BLOCK
	 *     (rule start) '--' (ambiguity) name=MSG
	 *     (rule start) '--' (ambiguity) name=NOW
	 *     (rule start) '--' (ambiguity) name=TX
	 *     (rule start) '--' (ambiguity) type=SpecialExpressionTypeEnum
	 *     (rule start) '--' (ambiguity) value='false'
	 *     (rule start) '--' (ambiguity) value='true'
	 *     (rule start) '--' (ambiguity) value=STRING
	 *     (rule start) '--' (ambiguity) value=SizedDeclaration
	 *     (rule start) '--' (ambiguity) {PostIncDecExpression.expression=}
	 *     (rule start) '--' (ambiguity) {Tuple.members+=}
	 *     (rule start) (ambiguity) '!' expression=UnaryExpression
	 *     (rule start) (ambiguity) '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'blockhash' '(' parameter=IntParameter
	 *     (rule start) (ambiguity) 'new' contract=[Contract|ID]
	 *     (rule start) (ambiguity) '~' expression=UnaryExpression
	 *     (rule start) (ambiguity) decimalValue=DecimalLiteral
	 *     (rule start) (ambiguity) function='addmod'
	 *     (rule start) (ambiguity) function='ecrecover'
	 *     (rule start) (ambiguity) function='mulmod'
	 *     (rule start) (ambiguity) hexValue=HexLiteral
	 *     (rule start) (ambiguity) identifier=ID
	 *     (rule start) (ambiguity) intValue=IntLiteral
	 *     (rule start) (ambiguity) name='gasleft'
	 *     (rule start) (ambiguity) name='keccak256'
	 *     (rule start) (ambiguity) name='ripemd160'
	 *     (rule start) (ambiguity) name='sha256'
	 *     (rule start) (ambiguity) name=BLOCK
	 *     (rule start) (ambiguity) name=MSG
	 *     (rule start) (ambiguity) name=NOW
	 *     (rule start) (ambiguity) name=TX
	 *     (rule start) (ambiguity) signOp='+'
	 *     (rule start) (ambiguity) signOp='-'
	 *     (rule start) (ambiguity) type=SpecialExpressionTypeEnum
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='true'
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) value=SizedDeclaration
	 *     (rule start) (ambiguity) {AddSub.left=}
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Assignment.left=}
	 *     (rule start) (ambiguity) {BitAnd.left=}
	 *     (rule start) (ambiguity) {BitOr.left=}
	 *     (rule start) (ambiguity) {BitXor.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Exponent.left=}
	 *     (rule start) (ambiguity) {MulDivMod.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {PostIncDecExpression.expression=}
	 *     (rule start) (ambiguity) {PreDecExpression.expression=}
	 *     (rule start) (ambiguity) {PreIncExpression.expression=}
	 *     (rule start) (ambiguity) {Shift.left=}
	 *     (rule start) (ambiguity) {Tuple.members+=}
	 *     (rule start) (ambiguity) {VariableDeclarationExpression.type=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_4_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '++' (ambiguity) '!' expression=UnaryExpression
	 *     (rule start) '++' (ambiguity) 'new' contract=[Contract|ID]
	 *     (rule start) '++' (ambiguity) '~' expression=UnaryExpression
	 *     (rule start) '++' (ambiguity) signOp='+'
	 *     (rule start) '++' (ambiguity) signOp='-'
	 *     (rule start) '++' (ambiguity) {AddSub.left=}
	 *     (rule start) '++' (ambiguity) {And.left=}
	 *     (rule start) '++' (ambiguity) {Assignment.left=}
	 *     (rule start) '++' (ambiguity) {BitAnd.left=}
	 *     (rule start) '++' (ambiguity) {BitOr.left=}
	 *     (rule start) '++' (ambiguity) {BitXor.left=}
	 *     (rule start) '++' (ambiguity) {Comparison.left=}
	 *     (rule start) '++' (ambiguity) {Equality.left=}
	 *     (rule start) '++' (ambiguity) {Exponent.left=}
	 *     (rule start) '++' (ambiguity) {MulDivMod.left=}
	 *     (rule start) '++' (ambiguity) {Or.left=}
	 *     (rule start) '++' (ambiguity) {PreDecExpression.expression=}
	 *     (rule start) '++' (ambiguity) {PreIncExpression.expression=}
	 *     (rule start) '++' (ambiguity) {Shift.left=}
	 *     (rule start) '++' (ambiguity) {VariableDeclarationExpression.type=}
	 *     (rule start) '--' (ambiguity) '!' expression=UnaryExpression
	 *     (rule start) '--' (ambiguity) 'new' contract=[Contract|ID]
	 *     (rule start) '--' (ambiguity) '~' expression=UnaryExpression
	 *     (rule start) '--' (ambiguity) signOp='+'
	 *     (rule start) '--' (ambiguity) signOp='-'
	 *     (rule start) '--' (ambiguity) {AddSub.left=}
	 *     (rule start) '--' (ambiguity) {And.left=}
	 *     (rule start) '--' (ambiguity) {Assignment.left=}
	 *     (rule start) '--' (ambiguity) {BitAnd.left=}
	 *     (rule start) '--' (ambiguity) {BitOr.left=}
	 *     (rule start) '--' (ambiguity) {BitXor.left=}
	 *     (rule start) '--' (ambiguity) {Comparison.left=}
	 *     (rule start) '--' (ambiguity) {Equality.left=}
	 *     (rule start) '--' (ambiguity) {Exponent.left=}
	 *     (rule start) '--' (ambiguity) {MulDivMod.left=}
	 *     (rule start) '--' (ambiguity) {Or.left=}
	 *     (rule start) '--' (ambiguity) {PreDecExpression.expression=}
	 *     (rule start) '--' (ambiguity) {PreIncExpression.expression=}
	 *     (rule start) '--' (ambiguity) {Shift.left=}
	 *     (rule start) '--' (ambiguity) {VariableDeclarationExpression.type=}
	 *     (rule start) (ambiguity) '!' expression=UnaryExpression
	 *     (rule start) (ambiguity) '(' ')' (rule start)
	 *     (rule start) (ambiguity) 'blockhash' '(' parameter=IntParameter
	 *     (rule start) (ambiguity) 'new' contract=[Contract|ID]
	 *     (rule start) (ambiguity) '~' expression=UnaryExpression
	 *     (rule start) (ambiguity) decimalValue=DecimalLiteral
	 *     (rule start) (ambiguity) function='addmod'
	 *     (rule start) (ambiguity) function='ecrecover'
	 *     (rule start) (ambiguity) function='mulmod'
	 *     (rule start) (ambiguity) hexValue=HexLiteral
	 *     (rule start) (ambiguity) identifier=ID
	 *     (rule start) (ambiguity) intValue=IntLiteral
	 *     (rule start) (ambiguity) name='gasleft'
	 *     (rule start) (ambiguity) name='keccak256'
	 *     (rule start) (ambiguity) name='ripemd160'
	 *     (rule start) (ambiguity) name='sha256'
	 *     (rule start) (ambiguity) name=BLOCK
	 *     (rule start) (ambiguity) name=MSG
	 *     (rule start) (ambiguity) name=NOW
	 *     (rule start) (ambiguity) name=TX
	 *     (rule start) (ambiguity) signOp='+'
	 *     (rule start) (ambiguity) signOp='-'
	 *     (rule start) (ambiguity) type=SpecialExpressionTypeEnum
	 *     (rule start) (ambiguity) value='false'
	 *     (rule start) (ambiguity) value='true'
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) value=SizedDeclaration
	 *     (rule start) (ambiguity) {AddSub.left=}
	 *     (rule start) (ambiguity) {And.left=}
	 *     (rule start) (ambiguity) {Assignment.left=}
	 *     (rule start) (ambiguity) {BitAnd.left=}
	 *     (rule start) (ambiguity) {BitOr.left=}
	 *     (rule start) (ambiguity) {BitXor.left=}
	 *     (rule start) (ambiguity) {Comparison.left=}
	 *     (rule start) (ambiguity) {Equality.left=}
	 *     (rule start) (ambiguity) {Exponent.left=}
	 *     (rule start) (ambiguity) {MulDivMod.left=}
	 *     (rule start) (ambiguity) {Or.left=}
	 *     (rule start) (ambiguity) {PostIncDecExpression.expression=}
	 *     (rule start) (ambiguity) {PreDecExpression.expression=}
	 *     (rule start) (ambiguity) {PreIncExpression.expression=}
	 *     (rule start) (ambiguity) {Shift.left=}
	 *     (rule start) (ambiguity) {Tuple.members+=}
	 *     (rule start) (ambiguity) {VariableDeclarationExpression.type=}
	 */
	protected void emit_PrimaryExpression_LeftParenthesisKeyword_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')') | ('[' ']')
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Tuple___LeftParenthesisKeyword_0_0_RightParenthesisKeyword_0_3___or___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_3__(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
