/*
 * generated by Xtext 2.20.0
 */
package org.unicam.myGrammar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OptGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Model");
		private final Assignment cOperationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationsContractParserRuleCall_0 = (RuleCall)cOperationsAssignment.eContents().get(0);
		
		//// ---------- TO DO ----------
		///*
		// * Controllare gli array
		// * Finire i validators
		// */ // ---------- TO DO ----------
		//Model:
		//	operations+=Contract*;
		@Override public ParserRule getRule() { return rule; }
		
		//operations+=Contract*
		public Assignment getOperationsAssignment() { return cOperationsAssignment; }
		
		//Contract
		public RuleCall getOperationsContractParserRuleCall_0() { return cOperationsContractParserRuleCall_0; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInheritanceSpecifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0 = (RuleCall)cInheritanceSpecifiersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInheritanceSpecifiersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0 = (RuleCall)cInheritanceSpecifiersAssignment_2_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyDefinitionBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		///*
		// * Solidity:
		// * (importDirective+=ImportDirective |
		// * contract+=Contract |
		// * library+=Library)
		// * 
		// * ImportDirective:
		// * "import" importURI=STRING ";" |
		// * "import" "*" "as" unitAlias=ID "from" importURI=STRING ";" |
		// * "import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";";
		// * 
		// * SymbolAlias:
		// * symbol=ID "as" alias=I
		// * 
		// * ContractOrLibrary:
		// * Contract |
		// * Library;
		// */ Contract:
		//	"contract" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
		//	inheritanceSpecifiers+=InheritanceSpecifier)*)? body=DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//"contract" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
		//inheritanceSpecifiers+=InheritanceSpecifier)*)? body=DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//"contract"
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("is" inheritanceSpecifiers+=InheritanceSpecifier ("," inheritanceSpecifiers+=InheritanceSpecifier)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//inheritanceSpecifiers+=InheritanceSpecifier
		public Assignment getInheritanceSpecifiersAssignment_2_1() { return cInheritanceSpecifiersAssignment_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0() { return cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0; }
		
		//("," inheritanceSpecifiers+=InheritanceSpecifier)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//inheritanceSpecifiers+=InheritanceSpecifier
		public Assignment getInheritanceSpecifiersAssignment_2_2_1() { return cInheritanceSpecifiersAssignment_2_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0() { return cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0; }
		
		//body=DefinitionBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//DefinitionBody
		public RuleCall getBodyDefinitionBodyParserRuleCall_3_0() { return cBodyDefinitionBodyParserRuleCall_3_0; }
	}
	public class DefinitionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.DefinitionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFunctionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFunctionsFunctionDefinitionParserRuleCall_2_0_0 = (RuleCall)cFunctionsAssignment_2_0.eContents().get(0);
		private final Assignment cStructsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStructsStructDefinitionParserRuleCall_2_1_0 = (RuleCall)cStructsAssignment_2_1.eContents().get(0);
		private final Assignment cEnumsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cEnumsEnumDefinitionParserRuleCall_2_2_0 = (RuleCall)cEnumsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Assignment cVariablesAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_3_0_0 = (RuleCall)cVariablesAssignment_2_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cModifiersAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cModifiersModifierParserRuleCall_2_4_0 = (RuleCall)cModifiersAssignment_2_4.eContents().get(0);
		private final Assignment cEventsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cEventsEventParserRuleCall_2_5_0 = (RuleCall)cEventsAssignment_2_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Library:
		// * "library" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier
		// * ("," inheritanceSpecifiers+=InheritanceSpecifier)*)? body=DefinitionBody;
		// */ DefinitionBody:
		//	{DefinitionBody}
		//	"{" (functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition |
		//	variables+=VariableDeclaration ";" | modifiers+=Modifier | events+=Event)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionBody} "{" (functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition |
		//variables+=VariableDeclaration ";" | modifiers+=Modifier | events+=Event)* "}"
		public Group getGroup() { return cGroup; }
		
		//{DefinitionBody}
		public Action getDefinitionBodyAction_0() { return cDefinitionBodyAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition | variables+=VariableDeclaration ";"
		//| modifiers+=Modifier | events+=Event)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//functions+=FunctionDefinition
		public Assignment getFunctionsAssignment_2_0() { return cFunctionsAssignment_2_0; }
		
		//FunctionDefinition
		public RuleCall getFunctionsFunctionDefinitionParserRuleCall_2_0_0() { return cFunctionsFunctionDefinitionParserRuleCall_2_0_0; }
		
		//structs+=StructDefinition
		public Assignment getStructsAssignment_2_1() { return cStructsAssignment_2_1; }
		
		//StructDefinition
		public RuleCall getStructsStructDefinitionParserRuleCall_2_1_0() { return cStructsStructDefinitionParserRuleCall_2_1_0; }
		
		//enums+=EnumDefinition
		public Assignment getEnumsAssignment_2_2() { return cEnumsAssignment_2_2; }
		
		//EnumDefinition
		public RuleCall getEnumsEnumDefinitionParserRuleCall_2_2_0() { return cEnumsEnumDefinitionParserRuleCall_2_2_0; }
		
		//variables+=VariableDeclaration ";"
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_3_0() { return cVariablesAssignment_2_3_0; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_3_0_0() { return cVariablesVariableDeclarationParserRuleCall_2_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_3_1() { return cSemicolonKeyword_2_3_1; }
		
		//modifiers+=Modifier
		public Assignment getModifiersAssignment_2_4() { return cModifiersAssignment_2_4; }
		
		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_2_4_0() { return cModifiersModifierParserRuleCall_2_4_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_2_5() { return cEventsAssignment_2_5; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_5_0() { return cEventsEventParserRuleCall_2_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InheritanceSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.InheritanceSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSuperTypeContractCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeContractIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeContractCrossReference_0_0.eContents().get(1);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsFunctionCallListArgumentsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//InheritanceSpecifier:
		//	superType=[Contract] args=FunctionCallListArguments?;
		@Override public ParserRule getRule() { return rule; }
		
		//superType=[Contract] args=FunctionCallListArguments?
		public Group getGroup() { return cGroup; }
		
		//superType=[Contract]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }
		
		//[Contract]
		public CrossReference getSuperTypeContractCrossReference_0_0() { return cSuperTypeContractCrossReference_0_0; }
		
		//ID
		public RuleCall getSuperTypeContractIDTerminalRuleCall_0_0_1() { return cSuperTypeContractIDTerminalRuleCall_0_0_1; }
		
		//args=FunctionCallListArguments?
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//FunctionCallListArguments
		public RuleCall getArgsFunctionCallListArgumentsParserRuleCall_1_0() { return cArgsFunctionCallListArgumentsParserRuleCall_1_0; }
	}
	public class FunctionCallListArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionCallListArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFunctionCallListArgumentsAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCallListArguments:
		//	"(" {FunctionCallListArguments} (arguments+=Expression ("," arguments+=Expression)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {FunctionCallListArguments} (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{FunctionCallListArguments}
		public Action getFunctionCallListArgumentsAction_1() { return cFunctionCallListArgumentsAction_1; }
		
		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }
		
		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionCallArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionCallArguments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Action cFunctionCallArgumentsAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cArgsAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cArgsFunctionCallArgParserRuleCall_0_3_0_0 = (RuleCall)cArgsAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cArgsFunctionCallArgParserRuleCall_0_3_1_1_0 = (RuleCall)cArgsAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cFunctionCallListArgumentsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// call({arg1: 1, arg2: 2})
		//FunctionCallArguments:
		//	"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")" |
		//	FunctionCallListArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")" |
		//FunctionCallListArguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//{FunctionCallArguments}
		public Action getFunctionCallArgumentsAction_0_2() { return cFunctionCallArgumentsAction_0_2; }
		
		//(args+=FunctionCallArg ("," args+=FunctionCallArg)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//args+=FunctionCallArg
		public Assignment getArgsAssignment_0_3_0() { return cArgsAssignment_0_3_0; }
		
		//FunctionCallArg
		public RuleCall getArgsFunctionCallArgParserRuleCall_0_3_0_0() { return cArgsFunctionCallArgParserRuleCall_0_3_0_0; }
		
		//("," args+=FunctionCallArg)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//","
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }
		
		//args+=FunctionCallArg
		public Assignment getArgsAssignment_0_3_1_1() { return cArgsAssignment_0_3_1_1; }
		
		//FunctionCallArg
		public RuleCall getArgsFunctionCallArgParserRuleCall_0_3_1_1_0() { return cArgsFunctionCallArgParserRuleCall_0_3_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//FunctionCallListArguments
		public RuleCall getFunctionCallListArgumentsParserRuleCall_1() { return cFunctionCallListArgumentsParserRuleCall_1; }
	}
	public class FunctionCallArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionCallArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//FunctionCallArg:
		//	name=ID ":" expr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" expr=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFunctionDefinitionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_4_0 = (RuleCall)cOptionalElementsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnParametersReturnsParameterListParserRuleCall_5_1_0 = (RuleCall)cReturnParametersAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cBlockBodyParserRuleCall_6_0_0 = (RuleCall)cBlockAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//// Anonymous function allowed when "name" is not specified.
		//FunctionDefinition:
		//	"function" {FunctionDefinition} name=ID?
		//	parameters=ParameterList
		//	optionalElements+=FunctionDefinitionOptionalElement* ("returns" returnParameters=ReturnsParameterList)? (block=Body |
		//	";");
		@Override public ParserRule getRule() { return rule; }
		
		//"function" {FunctionDefinition} name=ID? parameters=ParameterList optionalElements+=FunctionDefinitionOptionalElement*
		//("returns" returnParameters=ReturnsParameterList)? (block=Body | ";")
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_1() { return cFunctionDefinitionAction_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//parameters=ParameterList
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_3_0() { return cParametersParameterListParserRuleCall_3_0; }
		
		//optionalElements+=FunctionDefinitionOptionalElement*
		public Assignment getOptionalElementsAssignment_4() { return cOptionalElementsAssignment_4; }
		
		//FunctionDefinitionOptionalElement
		public RuleCall getOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_4_0() { return cOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_4_0; }
		
		//("returns" returnParameters=ReturnsParameterList)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"returns"
		public Keyword getReturnsKeyword_5_0() { return cReturnsKeyword_5_0; }
		
		//returnParameters=ReturnsParameterList
		public Assignment getReturnParametersAssignment_5_1() { return cReturnParametersAssignment_5_1; }
		
		//ReturnsParameterList
		public RuleCall getReturnParametersReturnsParameterListParserRuleCall_5_1_0() { return cReturnParametersReturnsParameterListParserRuleCall_5_1_0; }
		
		//(block=Body | ";")
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//block=Body
		public Assignment getBlockAssignment_6_0() { return cBlockAssignment_6_0; }
		
		//Body
		public RuleCall getBlockBodyParserRuleCall_6_0_0() { return cBlockBodyParserRuleCall_6_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}
	public class FunctionDefinitionOptionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionDefinitionOptionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModifierInvocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVisibilitySpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FunctionDefinitionOptionalElement:
		//	Const | ModifierInvocation | VisibilitySpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Const | ModifierInvocation | VisibilitySpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Const
		public RuleCall getConstParserRuleCall_0() { return cConstParserRuleCall_0; }
		
		//ModifierInvocation
		public RuleCall getModifierInvocationParserRuleCall_1() { return cModifierInvocationParserRuleCall_1; }
		
		//VisibilitySpecifier
		public RuleCall getVisibilitySpecifierParserRuleCall_2() { return cVisibilitySpecifierParserRuleCall_2; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstAction_1 = (Action)cGroup.eContents().get(1);
		
		//Const:
		//	"constant" {Const};
		@Override public ParserRule getRule() { return rule; }
		
		//"constant" {Const}
		public Group getGroup() { return cGroup; }
		
		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//{Const}
		public Action getConstAction_1() { return cConstAction_1; }
	}
	public class VisibilitySpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VisibilitySpecifier");
		private final Assignment cVisibilityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_0 = (RuleCall)cVisibilityAssignment.eContents().get(0);
		
		//VisibilitySpecifier:
		//	visibility=VisibilityEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityEnum
		public Assignment getVisibilityAssignment() { return cVisibilityAssignment; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_0() { return cVisibilityVisibilityEnumParserRuleCall_0; }
	}
	public class StructDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StructDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMembersVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cMembersAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructDefinition:
		//	"struct" name=ID "{" (members+=VariableDeclaration ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" name=ID "{" (members+=VariableDeclaration ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(members+=VariableDeclaration ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//members+=VariableDeclaration
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }
		
		//VariableDeclaration
		public RuleCall getMembersVariableDeclarationParserRuleCall_3_0_0() { return cMembersVariableDeclarationParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EnumDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMembersEnumValueParserRuleCall_3_0_0 = (RuleCall)cMembersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cMembersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cMembersEnumValueParserRuleCall_3_1_1_0 = (RuleCall)cMembersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDefinition:
		//	"enum" name=ID "{" (members+=EnumValue ("," members+=EnumValue)*)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" name=ID "{" (members+=EnumValue ("," members+=EnumValue)*)? "}"
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(members+=EnumValue ("," members+=EnumValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//members+=EnumValue
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }
		
		//EnumValue
		public RuleCall getMembersEnumValueParserRuleCall_3_0_0() { return cMembersEnumValueParserRuleCall_3_0_0; }
		
		//("," members+=EnumValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//members+=EnumValue
		public Assignment getMembersAssignment_3_1_1() { return cMembersAssignment_3_1_1; }
		
		//EnumValue
		public RuleCall getMembersEnumValueParserRuleCall_3_1_1_0() { return cMembersEnumValueParserRuleCall_3_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarVariableTupleVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Variable Declarations
		////----------------------------------------------------------------
		//VariableDeclaration Statement:
		//	StandardVariableDeclaration | VarVariableDeclaration | VarVariableTupleVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardVariableDeclaration | VarVariableDeclaration | VarVariableTupleVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardVariableDeclaration
		public RuleCall getStandardVariableDeclarationParserRuleCall_0() { return cStandardVariableDeclarationParserRuleCall_0; }
		
		//VarVariableDeclaration
		public RuleCall getVarVariableDeclarationParserRuleCall_1() { return cVarVariableDeclarationParserRuleCall_1; }
		
		//VarVariableTupleVariableDeclaration
		public RuleCall getVarVariableTupleVariableDeclarationParserRuleCall_2() { return cVarVariableTupleVariableDeclarationParserRuleCall_2; }
	}
	public class StandardVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StandardVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeStandardTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_1_0 = (RuleCall)cOptionalElementsAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//StandardVariableDeclaration:
		//	type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//	expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=StandardType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//StandardType
		public RuleCall getTypeStandardTypeParserRuleCall_0_0() { return cTypeStandardTypeParserRuleCall_0_0; }
		
		//optionalElements+=VariableDeclarationOptionalElement*
		public Assignment getOptionalElementsAssignment_1() { return cOptionalElementsAssignment_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_1_0() { return cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}
	public class VarVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VarVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarTypeVarTypeParserRuleCall_0_0 = (RuleCall)cVarTypeAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//VarVariableDeclaration:
		//	varType=VarType variable=Variable ("=" expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//varType=VarType variable=Variable ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//varType=VarType
		public Assignment getVarTypeAssignment_0() { return cVarTypeAssignment_0; }
		
		//VarType
		public RuleCall getVarTypeVarTypeParserRuleCall_0_0() { return cVarTypeVarTypeParserRuleCall_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class VarVariableTupleVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VarVariableTupleVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarTypeVarTypeParserRuleCall_0_0 = (RuleCall)cVarTypeAssignment_0.eContents().get(0);
		private final Assignment cTupleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_1_0 = (RuleCall)cTupleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//VarVariableTupleVariableDeclaration:
		//	varType=VarType tuple=Tuple ("=" expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//varType=VarType tuple=Tuple ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//varType=VarType
		public Assignment getVarTypeAssignment_0() { return cVarTypeAssignment_0; }
		
		//VarType
		public RuleCall getVarTypeVarTypeParserRuleCall_0_0() { return cVarTypeVarTypeParserRuleCall_0_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_1() { return cTupleAssignment_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_0() { return cTupleTupleParserRuleCall_1_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class VariableDeclarationOptionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VariableDeclarationOptionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisibilitySpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexedSpeciferParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocationSpecifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//VariableDeclarationOptionalElement:
		//	VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VisibilitySpecifier
		public RuleCall getVisibilitySpecifierParserRuleCall_0() { return cVisibilitySpecifierParserRuleCall_0; }
		
		//IndexedSpecifer
		public RuleCall getIndexedSpeciferParserRuleCall_1() { return cIndexedSpeciferParserRuleCall_1; }
		
		//ConstantSpecifier
		public RuleCall getConstantSpecifierParserRuleCall_2() { return cConstantSpecifierParserRuleCall_2; }
		
		//LocationSpecifier
		public RuleCall getLocationSpecifierParserRuleCall_3() { return cLocationSpecifierParserRuleCall_3; }
	}
	public class IndexedSpeciferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IndexedSpecifer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIndexedSpeciferAction_1 = (Action)cGroup.eContents().get(1);
		
		//IndexedSpecifer:
		//	"indexed" {IndexedSpecifer};
		@Override public ParserRule getRule() { return rule; }
		
		//"indexed" {IndexedSpecifer}
		public Group getGroup() { return cGroup; }
		
		//"indexed"
		public Keyword getIndexedKeyword_0() { return cIndexedKeyword_0; }
		
		//{IndexedSpecifer}
		public Action getIndexedSpeciferAction_1() { return cIndexedSpeciferAction_1; }
	}
	public class ConstantSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ConstantSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstantSpecifierAction_1 = (Action)cGroup.eContents().get(1);
		
		//ConstantSpecifier:
		//	"constant" {ConstantSpecifier};
		@Override public ParserRule getRule() { return rule; }
		
		//"constant" {ConstantSpecifier}
		public Group getGroup() { return cGroup; }
		
		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//{ConstantSpecifier}
		public Action getConstantSpecifierAction_1() { return cConstantSpecifierAction_1; }
	}
	public class LocationSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.LocationSpecifier");
		private final Assignment cLocationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLocationLocationSpecifierEnumParserRuleCall_0 = (RuleCall)cLocationAssignment.eContents().get(0);
		
		//LocationSpecifier:
		//	location=LocationSpecifierEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//location=LocationSpecifierEnum
		public Assignment getLocationAssignment() { return cLocationAssignment; }
		
		//LocationSpecifierEnum
		public RuleCall getLocationLocationSpecifierEnumParserRuleCall_0() { return cLocationLocationSpecifierEnumParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cIsVarTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIsVarTypeVarTypeParserRuleCall_1_0 = (RuleCall)cIsVarTypeAssignment_1.eContents().get(0);
		
		//// Types
		////----------------------------------------------------------------
		//Type:
		//	StandardType | isVarType?=VarType;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardType | isVarType?=VarType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardType
		public RuleCall getStandardTypeParserRuleCall_0() { return cStandardTypeParserRuleCall_0; }
		
		//isVarType?=VarType
		public Assignment getIsVarTypeAssignment_1() { return cIsVarTypeAssignment_1; }
		
		//VarType
		public RuleCall getIsVarTypeVarTypeParserRuleCall_1_0() { return cIsVarTypeVarTypeParserRuleCall_1_0; }
	}
	public class StandardTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StandardType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDimensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionsParserRuleCall_0_1_0 = (RuleCall)cDimensionAssignment_0_1.eContents().get(0);
		private final RuleCall cMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StandardType:
		//	ElementaryType dimension=ArrayDimensions? | Mapping | QualifiedIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementaryType dimension=ArrayDimensions? | Mapping | QualifiedIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementaryType dimension=ArrayDimensions?
		public Group getGroup_0() { return cGroup_0; }
		
		//ElementaryType
		public RuleCall getElementaryTypeParserRuleCall_0_0() { return cElementaryTypeParserRuleCall_0_0; }
		
		//dimension=ArrayDimensions?
		public Assignment getDimensionAssignment_0_1() { return cDimensionAssignment_0_1; }
		
		//ArrayDimensions
		public RuleCall getDimensionArrayDimensionsParserRuleCall_0_1_0() { return cDimensionArrayDimensionsParserRuleCall_0_1_0; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_1() { return cMappingParserRuleCall_1; }
		
		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_2() { return cQualifiedIdentifierParserRuleCall_2; }
	}
	public class StandardTypeWithoutQualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StandardTypeWithoutQualifiedIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDimensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionsParserRuleCall_0_1_0 = (RuleCall)cDimensionAssignment_0_1.eContents().get(0);
		private final RuleCall cMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StandardTypeWithoutQualifiedIdentifier:
		//	ElementaryType dimension=ArrayDimensions? | Mapping;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementaryType dimension=ArrayDimensions? | Mapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementaryType dimension=ArrayDimensions?
		public Group getGroup_0() { return cGroup_0; }
		
		//ElementaryType
		public RuleCall getElementaryTypeParserRuleCall_0_0() { return cElementaryTypeParserRuleCall_0_0; }
		
		//dimension=ArrayDimensions?
		public Assignment getDimensionAssignment_0_1() { return cDimensionAssignment_0_1; }
		
		//ArrayDimensions
		public RuleCall getDimensionArrayDimensionsParserRuleCall_0_1_0() { return cDimensionArrayDimensionsParserRuleCall_0_1_0; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_1() { return cMappingParserRuleCall_1; }
	}
	public class ElementaryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ElementaryType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameElementaryTypeNameEnumParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ElementaryType:
		//	name=ElementaryTypeNameEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ElementaryTypeNameEnum
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ElementaryTypeNameEnum
		public RuleCall getNameElementaryTypeNameEnumParserRuleCall_0() { return cNameElementaryTypeNameEnumParserRuleCall_0; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeElementaryTypeNameEnumParserRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeTypeParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mapping:
		//	"mapping" "(" keyType=ElementaryTypeNameEnum "=>" valueType=Type ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"mapping" "(" keyType=ElementaryTypeNameEnum "=>" valueType=Type ")"
		public Group getGroup() { return cGroup; }
		
		//"mapping"
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//keyType=ElementaryTypeNameEnum
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//ElementaryTypeNameEnum
		public RuleCall getKeyTypeElementaryTypeNameEnumParserRuleCall_2_0() { return cKeyTypeElementaryTypeNameEnumParserRuleCall_2_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//valueType=Type
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }
		
		//Type
		public RuleCall getValueTypeTypeParserRuleCall_4_0() { return cValueTypeTypeParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ArrayDimensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayDimensions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cArrayDimensionsAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ArrayDimensions:
		//	"[" {ArrayDimensions} value+=Expression? "]" ("[" value+=Expression? "]")*;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" {ArrayDimensions} value+=Expression? "]" ("[" value+=Expression? "]")*
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{ArrayDimensions}
		public Action getArrayDimensionsAction_1() { return cArrayDimensionsAction_1; }
		
		//value+=Expression?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//("[" value+=Expression? "]")*
		public Group getGroup_4() { return cGroup_4; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//value+=Expression?
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_1_0() { return cValueExpressionParserRuleCall_4_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VarType");
		private final Keyword cVarKeyword = (Keyword)rule.eContents().get(1);
		
		//VarType:
		//	"var";
		@Override public ParserRule getRule() { return rule; }
		
		//"var"
		public Keyword getVarKeyword() { return cVarKeyword; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMembersExpressionParserRuleCall_2_0_0 = (RuleCall)cMembersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cMembersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cMembersTupleSeparatorParserRuleCall_2_1_0_0 = (RuleCall)cMembersAssignment_2_1_0.eContents().get(0);
		private final Assignment cMembersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_2_1_1_0 = (RuleCall)cMembersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Tuples
		////----------------------------------------------------------------
		//Tuple:
		//	"(" {Tuple} (members+=Expression? (members+=TupleSeparator members+=Expression?)+)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {Tuple} (members+=Expression? (members+=TupleSeparator members+=Expression?)+)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{Tuple}
		public Action getTupleAction_1() { return cTupleAction_1; }
		
		//(members+=Expression? (members+=TupleSeparator members+=Expression?)+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_2_0() { return cMembersAssignment_2_0; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_2_0_0() { return cMembersExpressionParserRuleCall_2_0_0; }
		
		//(members+=TupleSeparator members+=Expression?)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//members+=TupleSeparator
		public Assignment getMembersAssignment_2_1_0() { return cMembersAssignment_2_1_0; }
		
		//TupleSeparator
		public RuleCall getMembersTupleSeparatorParserRuleCall_2_1_0_0() { return cMembersTupleSeparatorParserRuleCall_2_1_0_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_2_1_1() { return cMembersAssignment_2_1_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_2_1_1_0() { return cMembersExpressionParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TupleSeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TupleSeparator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleSeparatorAction_1 = (Action)cGroup.eContents().get(1);
		
		//TupleSeparator:
		//	"," {TupleSeparator};
		@Override public ParserRule getRule() { return rule; }
		
		//"," {TupleSeparator}
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//{TupleSeparator}
		public Action getTupleSeparatorAction_1() { return cTupleSeparatorAction_1; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SimpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Action cStandardVariableDeclarationTypeAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0 = (RuleCall)cOptionalElementsAssignment_0_0_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_0_1_2 = (Assignment)cGroup_0_0_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_0_0_1_2_0 = (RuleCall)cVariableAssignment_0_0_1_2.eContents().get(0);
		private final Group cGroup_0_0_1_3 = (Group)cGroup_0_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_0_1_3_0 = (Keyword)cGroup_0_0_1_3.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1_3_1 = (Assignment)cGroup_0_0_1_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_1_3_1_0 = (RuleCall)cExpressionAssignment_0_0_1_3_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cVarTypeParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_1_0 = (Group)cAlternatives_0_1_1.eContents().get(0);
		private final Action cVarVariableTypeDeclarationAction_0_1_1_0_0 = (Action)cGroup_0_1_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_1_0_1 = (Assignment)cGroup_0_1_1_0.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_0_1_1_0_1_0 = (RuleCall)cVariableAssignment_0_1_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_1_0_2 = (Group)cGroup_0_1_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_0_1_1_0_2_0 = (Keyword)cGroup_0_1_1_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1_0_2_1 = (Assignment)cGroup_0_1_1_0_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_0_2_1_0 = (RuleCall)cExpressionAssignment_0_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cAlternatives_0_1_1.eContents().get(1);
		private final Action cVarVariableTupleVariableDeclarationAction_0_1_1_1_0 = (Action)cGroup_0_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_0_1_1_1_1_0 = (RuleCall)cTupleAssignment_0_1_1_1_1.eContents().get(0);
		private final Group cGroup_0_1_1_1_2 = (Group)cGroup_0_1_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_0_1_1_1_2_0 = (Keyword)cGroup_0_1_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1_1_2_1 = (Assignment)cGroup_0_1_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_1_2_1_0 = (RuleCall)cExpressionAssignment_0_1_1_1_2_1.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cSemicolonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSemicolonSemicolonKeyword_1_0 = (Keyword)cSemicolonAssignment_1.eContents().get(0);
		
		//// SimpleStatement
		////----------------------------------------------------------------
		////SimpleStatement:
		////    SimpleStatement2 ";"
		////;
		//SimpleStatement:
		//	(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement) semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression)) | ExpressionStatement) semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression)) | ExpressionStatement)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//StandardTypeWithoutQualifiedIdentifier
		public RuleCall getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0() { return cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0; }
		
		//({StandardVariableDeclaration.type=current} optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//expression=Expression)?)
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//{StandardVariableDeclaration.type=current}
		public Action getStandardVariableDeclarationTypeAction_0_0_1_0() { return cStandardVariableDeclarationTypeAction_0_0_1_0; }
		
		//optionalElements+=VariableDeclarationOptionalElement*
		public Assignment getOptionalElementsAssignment_0_0_1_1() { return cOptionalElementsAssignment_0_0_1_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0() { return cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_0_1_2() { return cVariableAssignment_0_0_1_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_1_2_0() { return cVariableVariableParserRuleCall_0_0_1_2_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_0_0_1_3() { return cGroup_0_0_1_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1_3_0() { return cEqualsSignKeyword_0_0_1_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_0_1_3_1() { return cExpressionAssignment_0_0_1_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_1_3_1_0() { return cExpressionExpressionParserRuleCall_0_0_1_3_1_0; }
		
		//VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression))
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//VarType
		public RuleCall getVarTypeParserRuleCall_0_1_0() { return cVarTypeParserRuleCall_0_1_0; }
		
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression))
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//{VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression)
		public Group getGroup_0_1_1_0() { return cGroup_0_1_1_0; }
		
		//{VarVariableTypeDeclaration}
		public Action getVarVariableTypeDeclarationAction_0_1_1_0_0() { return cVarVariableTypeDeclarationAction_0_1_1_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_1_1_0_1() { return cVariableAssignment_0_1_1_0_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_1_0_1_0() { return cVariableVariableParserRuleCall_0_1_1_0_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_0_1_1_0_2() { return cGroup_0_1_1_0_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1_0_2_0() { return cEqualsSignKeyword_0_1_1_0_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1_0_2_1() { return cExpressionAssignment_0_1_1_0_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_0_2_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_0_2_1_0; }
		
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression)
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }
		
		//{VarVariableTupleVariableDeclaration}
		public Action getVarVariableTupleVariableDeclarationAction_0_1_1_1_0() { return cVarVariableTupleVariableDeclarationAction_0_1_1_1_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_0_1_1_1_1() { return cTupleAssignment_0_1_1_1_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_0_1_1_1_1_0() { return cTupleTupleParserRuleCall_0_1_1_1_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_0_1_1_1_2() { return cGroup_0_1_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1_1_2_0() { return cEqualsSignKeyword_0_1_1_1_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1_1_2_1() { return cExpressionAssignment_0_1_1_1_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_1_2_1_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0_2() { return cExpressionStatementParserRuleCall_0_2; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_1() { return cSemicolonAssignment_1; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_1_0() { return cSemicolonSemicolonKeyword_1_0; }
	}
	public class SimpleStatement2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SimpleStatement2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cStandardVariableDeclarationTypeAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0 = (RuleCall)cOptionalElementsAssignment_0_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_0_1_2_0 = (RuleCall)cVariableAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_3_1_0 = (RuleCall)cExpressionAssignment_0_1_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cVarVariableTypeDeclarationAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_1_0_1_0 = (RuleCall)cVariableAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0_2_1_0 = (RuleCall)cExpressionAssignment_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cVarVariableTupleVariableDeclarationAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_1_1_1_1_0 = (RuleCall)cTupleAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_1_2_1.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleStatement2:
		//	StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression)) | ExpressionStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//StandardTypeWithoutQualifiedIdentifier
		public RuleCall getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0() { return cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0; }
		
		//({StandardVariableDeclaration.type=current} optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//expression=Expression)?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{StandardVariableDeclaration.type=current}
		public Action getStandardVariableDeclarationTypeAction_0_1_0() { return cStandardVariableDeclarationTypeAction_0_1_0; }
		
		//optionalElements+=VariableDeclarationOptionalElement*
		public Assignment getOptionalElementsAssignment_0_1_1() { return cOptionalElementsAssignment_0_1_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0() { return cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_1_2() { return cVariableAssignment_0_1_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_2_0() { return cVariableVariableParserRuleCall_0_1_2_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_3_0() { return cEqualsSignKeyword_0_1_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_3_1() { return cExpressionAssignment_0_1_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_3_1_0() { return cExpressionExpressionParserRuleCall_0_1_3_1_0; }
		
		//VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression))
		public Group getGroup_1() { return cGroup_1; }
		
		//VarType
		public RuleCall getVarTypeParserRuleCall_1_0() { return cVarTypeParserRuleCall_1_0; }
		
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//{VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{VarVariableTypeDeclaration}
		public Action getVarVariableTypeDeclarationAction_1_1_0_0() { return cVarVariableTypeDeclarationAction_1_1_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_1_0_1() { return cVariableAssignment_1_1_0_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_0_1_0() { return cVariableVariableParserRuleCall_1_1_0_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0_2_0() { return cEqualsSignKeyword_1_1_0_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1_0_2_1() { return cExpressionAssignment_1_1_0_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_0_2_1_0; }
		
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//{VarVariableTupleVariableDeclaration}
		public Action getVarVariableTupleVariableDeclarationAction_1_1_1_0() { return cVarVariableTupleVariableDeclarationAction_1_1_1_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_1_1_1_1() { return cTupleAssignment_1_1_1_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_1_1_1_0() { return cTupleTupleParserRuleCall_1_1_1_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_1_2_0() { return cEqualsSignKeyword_1_1_1_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1_1_2_1() { return cExpressionAssignment_1_1_1_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_2_1_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_2() { return cExpressionStatementParserRuleCall_2; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ExpressionStatement");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ExpressionStatement:
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.QualifiedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		
		//QualifiedIdentifier:
		//	identifier=ID qualifiers+=Qualifier*;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID qualifiers+=Qualifier*
		public Group getGroup() { return cGroup; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }
		
		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }
		
		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_0() { return cQualifiersQualifierParserRuleCall_1_0; }
	}
	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Qualifier:
		//	Field | Index | Arguments;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Index | Arguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Index
		public RuleCall getIndexParserRuleCall_1() { return cIndexParserRuleCall_1; }
		
		//Arguments
		public RuleCall getArgumentsParserRuleCall_2() { return cArgumentsParserRuleCall_2; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		
		//Field:
		//	"." field=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"." field=ID
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//field=ID
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_0() { return cFieldIDTerminalRuleCall_1_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIndexAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Index:
		//	"[" {Index} value=Expression? "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" {Index} value=Expression? "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{Index}
		public Action getIndexAction_1() { return cIndexAction_1; }
		
		//value=Expression?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Arguments");
		private final Assignment cArgumentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArgumentsFunctionCallArgumentsParserRuleCall_0 = (RuleCall)cArgumentsAssignment.eContents().get(0);
		
		//Arguments:
		//	arguments=FunctionCallArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//arguments=FunctionCallArguments
		public Assignment getArgumentsAssignment() { return cArgumentsAssignment; }
		
		//FunctionCallArguments
		public RuleCall getArgumentsFunctionCallArgumentsParserRuleCall_0() { return cArgumentsFunctionCallArgumentsParserRuleCall_0; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Modifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBodyParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//Modifier:
		//	"modifier" name=ID parameters=ParameterList? block=Body;
		@Override public ParserRule getRule() { return rule; }
		
		//"modifier" name=ID parameters=ParameterList? block=Body
		public Group getGroup() { return cGroup; }
		
		//"modifier"
		public Keyword getModifierKeyword_0() { return cModifierKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//block=Body
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Body
		public RuleCall getBlockBodyParserRuleCall_3_0() { return cBlockBodyParserRuleCall_3_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Assignment cIsAnonymousAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsAnonymousAnonymousKeyword_3_0 = (Keyword)cIsAnonymousAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Event:
		//	"event" name=ID parameters=ParameterList? isAnonymous?="anonymous"? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"event" name=ID parameters=ParameterList? isAnonymous?="anonymous"? ";"
		public Group getGroup() { return cGroup; }
		
		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//isAnonymous?="anonymous"?
		public Assignment getIsAnonymousAssignment_3() { return cIsAnonymousAssignment_3; }
		
		//"anonymous"
		public Keyword getIsAnonymousAnonymousKeyword_3_0() { return cIsAnonymousAnonymousKeyword_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ModifierInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ModifierInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameModifierCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameModifierIDTerminalRuleCall_0_0_1 = (RuleCall)cNameModifierCrossReference_0_0.eContents().get(1);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsFunctionCallListArgumentsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//ModifierInvocation:
		//	name=[Modifier] args=FunctionCallListArguments?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Modifier] args=FunctionCallListArguments?
		public Group getGroup() { return cGroup; }
		
		//name=[Modifier]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Modifier]
		public CrossReference getNameModifierCrossReference_0_0() { return cNameModifierCrossReference_0_0; }
		
		//ID
		public RuleCall getNameModifierIDTerminalRuleCall_0_0_1() { return cNameModifierIDTerminalRuleCall_0_0_1; }
		
		//args=FunctionCallListArguments?
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//FunctionCallListArguments
		public RuleCall getArgsFunctionCallListArgumentsParserRuleCall_1_0() { return cArgsFunctionCallListArgumentsParserRuleCall_1_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParameterList:
		//	"(" {ParameterList} (parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {ParameterList} (parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{ParameterList}
		public Action getParameterListAction_1() { return cParameterListAction_1; }
		
		//(parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_2_0_0() { return cParametersVariableDeclarationParserRuleCall_2_0_0; }
		
		//("," parameters+=VariableDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_2_1_1_0() { return cParametersVariableDeclarationParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReturnsParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ReturnsParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReturnsParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersReturnParameterDeclarationParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersReturnParameterDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnsParameterList:
		//	"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{ReturnsParameterList}
		public Action getReturnsParameterListAction_1() { return cReturnsParameterListAction_1; }
		
		//(parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=ReturnParameterDeclaration
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//ReturnParameterDeclaration
		public RuleCall getParametersReturnParameterDeclarationParserRuleCall_2_0_0() { return cParametersReturnParameterDeclarationParserRuleCall_2_0_0; }
		
		//("," parameters+=ReturnParameterDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=ReturnParameterDeclaration
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//ReturnParameterDeclaration
		public RuleCall getParametersReturnParameterDeclarationParserRuleCall_2_1_1_0() { return cParametersReturnParameterDeclarationParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReturnParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ReturnParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRefTypeParserRuleCall_0_0 = (RuleCall)cTypeRefAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//ReturnParameterDeclaration:
		//	typeRef=Type variable=Variable?;
		@Override public ParserRule getRule() { return rule; }
		
		//typeRef=Type variable=Variable?
		public Group getGroup() { return cGroup; }
		
		//typeRef=Type
		public Assignment getTypeRefAssignment_0() { return cTypeRefAssignment_0; }
		
		//Type
		public RuleCall getTypeRefTypeParserRuleCall_0_0() { return cTypeRefTypeParserRuleCall_0_0; }
		
		//variable=Variable?
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBodyParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPlaceHolderStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cAlternatives.eContents().get(5);
		private final RuleCall cContinueStatementParserRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final RuleCall cBreakStatementParserRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final RuleCall cReturnStatementParserRuleCall_5_2 = (RuleCall)cAlternatives_5.eContents().get(2);
		private final RuleCall cThrowStatementParserRuleCall_5_3 = (RuleCall)cAlternatives_5.eContents().get(3);
		private final RuleCall cDeleteStatementParserRuleCall_5_4 = (RuleCall)cAlternatives_5.eContents().get(4);
		private final RuleCall cSimpleStatementParserRuleCall_5_5 = (RuleCall)cAlternatives_5.eContents().get(5);
		
		//Statement:
		//	IfStatement | WhileStatement | ForStatement | Body | PlaceHolderStatement | (ContinueStatement | BreakStatement |
		//	ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement);
		@Override public ParserRule getRule() { return rule; }
		
		//IfStatement | WhileStatement | ForStatement | Body | PlaceHolderStatement | (ContinueStatement | BreakStatement |
		//ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_1() { return cWhileStatementParserRuleCall_1; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_2() { return cForStatementParserRuleCall_2; }
		
		//Body
		public RuleCall getBodyParserRuleCall_3() { return cBodyParserRuleCall_3; }
		
		//PlaceHolderStatement
		public RuleCall getPlaceHolderStatementParserRuleCall_4() { return cPlaceHolderStatementParserRuleCall_4; }
		
		//(ContinueStatement | BreakStatement | ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_5_0() { return cContinueStatementParserRuleCall_5_0; }
		
		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_5_1() { return cBreakStatementParserRuleCall_5_1; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_5_2() { return cReturnStatementParserRuleCall_5_2; }
		
		//ThrowStatement
		public RuleCall getThrowStatementParserRuleCall_5_3() { return cThrowStatementParserRuleCall_5_3; }
		
		//DeleteStatement
		public RuleCall getDeleteStatementParserRuleCall_5_4() { return cDeleteStatementParserRuleCall_5_4; }
		
		//SimpleStatement
		public RuleCall getSimpleStatementParserRuleCall_5_5() { return cSimpleStatementParserRuleCall_5_5; }
	}
	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.DeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableQualifiedIdentifierParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteStatement:
		//	"delete" variable=QualifiedIdentifier ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"delete" variable=QualifiedIdentifier ";"
		public Group getGroup() { return cGroup; }
		
		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//variable=QualifiedIdentifier
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//QualifiedIdentifier
		public RuleCall getVariableQualifiedIdentifierParserRuleCall_1_0() { return cVariableQualifiedIdentifierParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTrueBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrueBodyStatementParserRuleCall_4_0 = (RuleCall)cTrueBodyAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFalseBodyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFalseBodyStatementParserRuleCall_5_1_0 = (RuleCall)cFalseBodyAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	"if" "(" condition=Expression ")" trueBody=Statement (=> "else" falseBody=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" condition=Expression ")" trueBody=Statement (=> "else" falseBody=Statement)?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//trueBody=Statement
		public Assignment getTrueBodyAssignment_4() { return cTrueBodyAssignment_4; }
		
		//Statement
		public RuleCall getTrueBodyStatementParserRuleCall_4_0() { return cTrueBodyStatementParserRuleCall_4_0; }
		
		//(=> "else" falseBody=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//falseBody=Statement
		public Assignment getFalseBodyAssignment_5_1() { return cFalseBodyAssignment_5_1; }
		
		//Statement
		public RuleCall getFalseBodyStatementParserRuleCall_5_1_0() { return cFalseBodyStatementParserRuleCall_5_1_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	"while" "(" condition=Expression ")" body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" "(" condition=Expression ")" body=Statement
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitExpressionSimpleStatement2ParserRuleCall_2_0 = (RuleCall)cInitExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionExpressionParserRuleCall_4_0 = (RuleCall)cConditionExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopExpressionExpressionStatementParserRuleCall_6_0 = (RuleCall)cLoopExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStatementParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=Expression? ";"
		//	loopExpression=ExpressionStatement? ")" body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=Expression? ";"
		//loopExpression=ExpressionStatement? ")" body=Statement
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initExpression=SimpleStatement2?
		public Assignment getInitExpressionAssignment_2() { return cInitExpressionAssignment_2; }
		
		//SimpleStatement2
		public RuleCall getInitExpressionSimpleStatement2ParserRuleCall_2_0() { return cInitExpressionSimpleStatement2ParserRuleCall_2_0; }
		
		//=> ";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//conditionExpression=Expression?
		public Assignment getConditionExpressionAssignment_4() { return cConditionExpressionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionExpressionParserRuleCall_4_0() { return cConditionExpressionExpressionParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//loopExpression=ExpressionStatement?
		public Assignment getLoopExpressionAssignment_6() { return cLoopExpressionAssignment_6; }
		
		//ExpressionStatement
		public RuleCall getLoopExpressionExpressionStatementParserRuleCall_6_0() { return cLoopExpressionExpressionStatementParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=Statement
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_8_0() { return cBodyStatementParserRuleCall_8_0; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Body:
		//	"{" {Block} (statements+=Statement statements+=Statement*)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" {Block} (statements+=Statement statements+=Statement*)? "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{Block}
		public Action getBlockAction_1() { return cBlockAction_1; }
		
		//(statements+=Statement statements+=Statement*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_1_0() { return cStatementsStatementParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cContinueAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStatement:
		//	"continue" {Continue} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" {Continue} ";"
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//{Continue}
		public Action getContinueAction_1() { return cContinueAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBreakStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	"break" {BreakStatement} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"break" {BreakStatement} ";"
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//{BreakStatement}
		public Action getBreakStatementAction_1() { return cBreakStatementAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReturnStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//	"return" {ReturnStatement} expression=Expression? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"return" {ReturnStatement} expression=Expression? ";"
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_1() { return cReturnStatementAction_1; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ThrowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ThrowStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cThrowStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ThrowStatement:
		//	"throw" {ThrowStatement} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"throw" {ThrowStatement} ";"
		public Group getGroup() { return cGroup; }
		
		//"throw"
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }
		
		//{ThrowStatement}
		public Action getThrowStatementAction_1() { return cThrowStatementAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PlaceHolderStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PlaceHolderStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPlaceHolderStatementAction_1 = (Action)cGroup.eContents().get(1);
		
		//// Only allowed in a Modifier DAF
		//PlaceHolderStatement:
		//	"_" {PlaceHolderStatement};
		@Override public ParserRule getRule() { return rule; }
		
		//"_" {PlaceHolderStatement}
		public Group getGroup() { return cGroup; }
		
		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }
		
		//{PlaceHolderStatement}
		public Action getPlaceHolderStatementAction_1() { return cPlaceHolderStatementAction_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}
	public class SpecialExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SpecialExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecialExpressionTypeEnumEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cFieldOrMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldOrMethodFieldParserRuleCall_1_0 = (RuleCall)cFieldOrMethodAssignment_1.eContents().get(0);
		private final Assignment cQualifiersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cQualifiersAlternatives_2_0 = (Alternatives)cQualifiersAssignment_2.eContents().get(0);
		private final RuleCall cQualifiersIndexParserRuleCall_2_0_0 = (RuleCall)cQualifiersAlternatives_2_0.eContents().get(0);
		private final RuleCall cQualifiersArgumentsParserRuleCall_2_0_1 = (RuleCall)cQualifiersAlternatives_2_0.eContents().get(1);
		
		//SpecialExpression:
		//	type=SpecialExpressionTypeEnum fieldOrMethod=Field? qualifiers+=(Index | Arguments)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=SpecialExpressionTypeEnum fieldOrMethod=Field? qualifiers+=(Index | Arguments)*
		public Group getGroup() { return cGroup; }
		
		//type=SpecialExpressionTypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//SpecialExpressionTypeEnum
		public RuleCall getTypeSpecialExpressionTypeEnumEnumRuleCall_0_0() { return cTypeSpecialExpressionTypeEnumEnumRuleCall_0_0; }
		
		//fieldOrMethod=Field?
		public Assignment getFieldOrMethodAssignment_1() { return cFieldOrMethodAssignment_1; }
		
		//Field
		public RuleCall getFieldOrMethodFieldParserRuleCall_1_0() { return cFieldOrMethodFieldParserRuleCall_1_0; }
		
		//qualifiers+=(Index | Arguments)*
		public Assignment getQualifiersAssignment_2() { return cQualifiersAssignment_2; }
		
		//(Index | Arguments)
		public Alternatives getQualifiersAlternatives_2_0() { return cQualifiersAlternatives_2_0; }
		
		//Index
		public RuleCall getQualifiersIndexParserRuleCall_2_0_0() { return cQualifiersIndexParserRuleCall_2_0_0; }
		
		//Arguments
		public RuleCall getQualifiersArgumentsParserRuleCall_2_0_1() { return cQualifiersArgumentsParserRuleCall_2_0_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAssignmentLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cAssignmentOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAssignmentOpAssignmentOpEnumEnumRuleCall_1_0_1_0 = (RuleCall)cAssignmentOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_2_0 = (RuleCall)cExpressionAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cVariableDeclarationExpressionTypeAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_1_1_0 = (RuleCall)cVariableAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_2_1.eContents().get(0);
		
		//// Right associative
		//Assignment Expression:
		//	BinaryExpression ({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression |
		//	{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryExpression ({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression |
		//{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?
		public Group getGroup() { return cGroup; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_0() { return cBinaryExpressionParserRuleCall_0; }
		
		//({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression |
		//{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Assignment.left=current}
		public Action getAssignmentLeftAction_1_0_0() { return cAssignmentLeftAction_1_0_0; }
		
		//assignmentOp=AssignmentOpEnum
		public Assignment getAssignmentOpAssignment_1_0_1() { return cAssignmentOpAssignment_1_0_1; }
		
		//AssignmentOpEnum
		public RuleCall getAssignmentOpAssignmentOpEnumEnumRuleCall_1_0_1_0() { return cAssignmentOpAssignmentOpEnumEnumRuleCall_1_0_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_0_2() { return cExpressionAssignment_1_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_2_0() { return cExpressionExpressionParserRuleCall_1_0_2_0; }
		
		//{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{VariableDeclarationExpression.type=current}
		public Action getVariableDeclarationExpressionTypeAction_1_1_0() { return cVariableDeclarationExpressionTypeAction_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_1_1() { return cVariableAssignment_1_1_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_1_0() { return cVariableVariableParserRuleCall_1_1_1_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_2_0() { return cEqualsSignKeyword_1_1_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1_2_1() { return cExpressionAssignment_1_1_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_2_1_0; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BinaryExpression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BinaryExpression Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 4, Left associative
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 5, Left associative
		//And Expression:
		//	Equality ({And.left=current} "&&" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEqualityOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqualityOpEqualityOpEnumEnumRuleCall_1_1_0 = (RuleCall)cEqualityOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 6, Left associative
		//Equality Expression:
		//	Comparison ({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//equalityOp=EqualityOpEnum
		public Assignment getEqualityOpAssignment_1_1() { return cEqualityOpAssignment_1_1; }
		
		//EqualityOpEnum
		public RuleCall getEqualityOpEqualityOpEnumEnumRuleCall_1_1_0() { return cEqualityOpEqualityOpEnumEnumRuleCall_1_1_0; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cComparisonOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cComparisonOpComparisonOpEnumEnumRuleCall_1_1_0 = (RuleCall)cComparisonOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 7, Left associative
		//Comparison Expression:
		//	BitOr ({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitOr ({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*
		public Group getGroup() { return cGroup; }
		
		//BitOr
		public RuleCall getBitOrParserRuleCall_0() { return cBitOrParserRuleCall_0; }
		
		//({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//comparisonOp=ComparisonOpEnum
		public Assignment getComparisonOpAssignment_1_1() { return cComparisonOpAssignment_1_1; }
		
		//ComparisonOpEnum
		public RuleCall getComparisonOpComparisonOpEnumEnumRuleCall_1_1_0() { return cComparisonOpComparisonOpEnumEnumRuleCall_1_1_0; }
		
		//right=BitOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitOr
		public RuleCall getRightBitOrParserRuleCall_1_2_0() { return cRightBitOrParserRuleCall_1_2_0; }
	}
	public class BitOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BitOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitXorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 8, Left associative
		//BitOr Expression:
		//	BitXor ({BitOr.left=current} "|" right=BitXor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitXor ({BitOr.left=current} "|" right=BitXor)*
		public Group getGroup() { return cGroup; }
		
		//BitXor
		public RuleCall getBitXorParserRuleCall_0() { return cBitXorParserRuleCall_0; }
		
		//({BitOr.left=current} "|" right=BitXor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitOr.left=current}
		public Action getBitOrLeftAction_1_0() { return cBitOrLeftAction_1_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=BitXor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitXor
		public RuleCall getRightBitXorParserRuleCall_1_2_0() { return cRightBitXorParserRuleCall_1_2_0; }
	}
	public class BitXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BitXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitXorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 9, Left associative
		//BitXor Expression:
		//	BitAnd ({BitXor.left=current} "^" right=BitAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitAnd ({BitXor.left=current} "^" right=BitAnd)*
		public Group getGroup() { return cGroup; }
		
		//BitAnd
		public RuleCall getBitAndParserRuleCall_0() { return cBitAndParserRuleCall_0; }
		
		//({BitXor.left=current} "^" right=BitAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitXor.left=current}
		public Action getBitXorLeftAction_1_0() { return cBitXorLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=BitAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitAnd
		public RuleCall getRightBitAndParserRuleCall_1_2_0() { return cRightBitAndParserRuleCall_1_2_0; }
	}
	public class BitAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BitAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 10, Left associative
		//BitAnd Expression:
		//	Shift ({BitAnd.left=current} "&" right=Shift)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Shift ({BitAnd.left=current} "&" right=Shift)*
		public Group getGroup() { return cGroup; }
		
		//Shift
		public RuleCall getShiftParserRuleCall_0() { return cShiftParserRuleCall_0; }
		
		//({BitAnd.left=current} "&" right=Shift)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitAnd.left=current}
		public Action getBitAndLeftAction_1_0() { return cBitAndLeftAction_1_0; }
		
		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=Shift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Shift
		public RuleCall getRightShiftParserRuleCall_1_2_0() { return cRightShiftParserRuleCall_1_2_0; }
	}
	public class ShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Shift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddSubParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cShiftOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cShiftOpShiftOpEnumEnumRuleCall_1_1_0 = (RuleCall)cShiftOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddSubParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 11, Left associative
		//Shift Expression:
		//	AddSub ({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddSub ({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*
		public Group getGroup() { return cGroup; }
		
		//AddSub
		public RuleCall getAddSubParserRuleCall_0() { return cAddSubParserRuleCall_0; }
		
		//({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Shift.left=current}
		public Action getShiftLeftAction_1_0() { return cShiftLeftAction_1_0; }
		
		//shiftOp=ShiftOpEnum
		public Assignment getShiftOpAssignment_1_1() { return cShiftOpAssignment_1_1; }
		
		//ShiftOpEnum
		public RuleCall getShiftOpShiftOpEnumEnumRuleCall_1_1_0() { return cShiftOpShiftOpEnumEnumRuleCall_1_1_0; }
		
		//right=AddSub
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddSub
		public RuleCall getRightAddSubParserRuleCall_1_2_0() { return cRightAddSubParserRuleCall_1_2_0; }
	}
	public class AddSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.AddSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulDivModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAddSubLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cAdditionOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAdditionOpAdditionOpEnumEnumRuleCall_1_0_1_0 = (RuleCall)cAdditionOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMulDivModParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//// Precedence: 12, Left associative
		//AddSub Expression:
		//	MulDivMod => ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulDivMod => ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*
		public Group getGroup() { return cGroup; }
		
		//MulDivMod
		public RuleCall getMulDivModParserRuleCall_0() { return cMulDivModParserRuleCall_0; }
		
		//=> ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AddSub.left=current}
		public Action getAddSubLeftAction_1_0_0() { return cAddSubLeftAction_1_0_0; }
		
		//additionOp=AdditionOpEnum
		public Assignment getAdditionOpAssignment_1_0_1() { return cAdditionOpAssignment_1_0_1; }
		
		//AdditionOpEnum
		public RuleCall getAdditionOpAdditionOpEnumEnumRuleCall_1_0_1_0() { return cAdditionOpAdditionOpEnumEnumRuleCall_1_0_1_0; }
		
		//right=MulDivMod
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MulDivMod
		public RuleCall getRightMulDivModParserRuleCall_1_0_2_0() { return cRightMulDivModParserRuleCall_1_0_2_0; }
	}
	public class MulDivModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MulDivMod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulDivModLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMultipliciativeOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultipliciativeOpMulDivModOpEnumEnumRuleCall_1_1_0 = (RuleCall)cMultipliciativeOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExponentParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 13, Left associative
		//MulDivMod Expression:
		//	Exponent ({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Exponent ({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*
		public Group getGroup() { return cGroup; }
		
		//Exponent
		public RuleCall getExponentParserRuleCall_0() { return cExponentParserRuleCall_0; }
		
		//({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulDivMod.left=current}
		public Action getMulDivModLeftAction_1_0() { return cMulDivModLeftAction_1_0; }
		
		//multipliciativeOp=MulDivModOpEnum
		public Assignment getMultipliciativeOpAssignment_1_1() { return cMultipliciativeOpAssignment_1_1; }
		
		//MulDivModOpEnum
		public RuleCall getMultipliciativeOpMulDivModOpEnumEnumRuleCall_1_1_0() { return cMultipliciativeOpMulDivModOpEnumEnumRuleCall_1_1_0; }
		
		//right=Exponent
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Exponent
		public RuleCall getRightExponentParserRuleCall_1_2_0() { return cRightExponentParserRuleCall_1_2_0; }
	}
	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 14, Left associative
		//Exponent Expression:
		//	UnaryExpression ({Exponent.left=current} "**" right=UnaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({Exponent.left=current} "**" right=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({Exponent.left=current} "**" right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exponent.left=current}
		public Action getExponentLeftAction_1_0() { return cExponentLeftAction_1_0; }
		
		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1() { return cAsteriskAsteriskKeyword_1_1; }
		
		//right=UnaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryNotExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNewExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPreExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//UnaryExpression Expression:
		//	NotExpression | BinaryNotExpression | SignExpression | NewExpression | PreExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NotExpression | BinaryNotExpression | SignExpression | NewExpression | PreExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//BinaryNotExpression
		public RuleCall getBinaryNotExpressionParserRuleCall_1() { return cBinaryNotExpressionParserRuleCall_1; }
		
		//SignExpression
		public RuleCall getSignExpressionParserRuleCall_2() { return cSignExpressionParserRuleCall_2; }
		
		//NewExpression
		public RuleCall getNewExpressionParserRuleCall_3() { return cNewExpressionParserRuleCall_3; }
		
		//PreExpression
		public RuleCall getPreExpressionParserRuleCall_4() { return cPreExpressionParserRuleCall_4; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//NotExpression:
		//	"!" expression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"!" expression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class PreIncExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PreIncExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionPostIncDecExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//PreIncExpression:
		//	expression=PostIncDecExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=PostIncDecExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//PostIncDecExpression
		public RuleCall getExpressionPostIncDecExpressionParserRuleCall_0() { return cExpressionPostIncDecExpressionParserRuleCall_0; }
	}
	public class PreDecExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PreDecExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionPostIncDecExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//PreDecExpression:
		//	expression=PostIncDecExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=PostIncDecExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//PostIncDecExpression
		public RuleCall getExpressionPostIncDecExpressionParserRuleCall_0() { return cExpressionPostIncDecExpressionParserRuleCall_0; }
	}
	public class BinaryNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BinaryNotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//BinaryNotExpression:
		//	"~" expression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"~" expression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class SignExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SignExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSignOpAlternatives_0_0 = (Alternatives)cSignOpAssignment_0.eContents().get(0);
		private final Keyword cSignOpPlusSignKeyword_0_0_0 = (Keyword)cSignOpAlternatives_0_0.eContents().get(0);
		private final Keyword cSignOpHyphenMinusKeyword_0_0_1 = (Keyword)cSignOpAlternatives_0_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//SignExpression:
		//	signOp=("+" | "-") expression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//signOp=("+" | "-") expression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//signOp=("+" | "-")
		public Assignment getSignOpAssignment_0() { return cSignOpAssignment_0; }
		
		//("+" | "-")
		public Alternatives getSignOpAlternatives_0_0() { return cSignOpAlternatives_0_0; }
		
		//"+"
		public Keyword getSignOpPlusSignKeyword_0_0_0() { return cSignOpPlusSignKeyword_0_0_0; }
		
		//"-"
		public Keyword getSignOpHyphenMinusKeyword_0_0_1() { return cSignOpHyphenMinusKeyword_0_0_1; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class NewExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NewExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContractContractCrossReference_1_0 = (CrossReference)cContractAssignment_1.eContents().get(0);
		private final RuleCall cContractContractIDTerminalRuleCall_1_0_1 = (RuleCall)cContractContractCrossReference_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsFunctionCallListArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		
		//NewExpression:
		//	"new" contract=[Contract] args=FunctionCallListArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//"new" contract=[Contract] args=FunctionCallListArguments
		public Group getGroup() { return cGroup; }
		
		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//contract=[Contract]
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }
		
		//[Contract]
		public CrossReference getContractContractCrossReference_1_0() { return cContractContractCrossReference_1_0; }
		
		//ID
		public RuleCall getContractContractIDTerminalRuleCall_1_0_1() { return cContractContractIDTerminalRuleCall_1_0_1; }
		
		//args=FunctionCallListArguments
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//FunctionCallListArguments
		public RuleCall getArgsFunctionCallListArgumentsParserRuleCall_2_0() { return cArgsFunctionCallListArgumentsParserRuleCall_2_0; }
	}
	public class PreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PreExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostIncDecExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPostIncDecExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Action cPreIncExpressionExpressionAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cPostIncDecExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Action cPreDecExpressionExpressionAction_2_2 = (Action)cGroup_2.eContents().get(2);
		
		//PreExpression Expression:
		//	PostIncDecExpression | "++" PostIncDecExpression {PreIncExpression.expression=current} | "--" PostIncDecExpression
		//	{PreDecExpression.expression=current};
		@Override public ParserRule getRule() { return rule; }
		
		//PostIncDecExpression | "++" PostIncDecExpression {PreIncExpression.expression=current} | "--" PostIncDecExpression
		//{PreDecExpression.expression=current}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PostIncDecExpression
		public RuleCall getPostIncDecExpressionParserRuleCall_0() { return cPostIncDecExpressionParserRuleCall_0; }
		
		//"++" PostIncDecExpression {PreIncExpression.expression=current}
		public Group getGroup_1() { return cGroup_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//PostIncDecExpression
		public RuleCall getPostIncDecExpressionParserRuleCall_1_1() { return cPostIncDecExpressionParserRuleCall_1_1; }
		
		//{PreIncExpression.expression=current}
		public Action getPreIncExpressionExpressionAction_1_2() { return cPreIncExpressionExpressionAction_1_2; }
		
		//"--" PostIncDecExpression {PreDecExpression.expression=current}
		public Group getGroup_2() { return cGroup_2; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_0() { return cHyphenMinusHyphenMinusKeyword_2_0; }
		
		//PostIncDecExpression
		public RuleCall getPostIncDecExpressionParserRuleCall_2_1() { return cPostIncDecExpressionParserRuleCall_2_1; }
		
		//{PreDecExpression.expression=current}
		public Action getPreDecExpressionExpressionAction_2_2() { return cPreDecExpressionExpressionAction_2_2; }
	}
	public class PostIncDecExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PostIncDecExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPostIncDecExpressionExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPostOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPostOpIncDecOpEnumEnumRuleCall_1_1_0 = (RuleCall)cPostOpAssignment_1_1.eContents().get(0);
		
		//PostIncDecExpression Expression:
		//	PrimaryExpression ({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PostIncDecExpression.expression=current}
		public Action getPostIncDecExpressionExpressionAction_1_0() { return cPostIncDecExpressionExpressionAction_1_0; }
		
		//postOp=IncDecOpEnum
		public Assignment getPostOpAssignment_1_1() { return cPostOpAssignment_1_1; }
		
		//IncDecOpEnum
		public RuleCall getPostOpIncDecOpEnumEnumRuleCall_1_1_0() { return cPostOpIncDecOpEnumEnumRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeCastParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Action cTupleMembersAction_4_2_0 = (Action)cGroup_4_2.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Assignment cMembersAssignment_4_2_1_0 = (Assignment)cGroup_4_2_1.eContents().get(0);
		private final RuleCall cMembersTupleSeparatorParserRuleCall_4_2_1_0_0 = (RuleCall)cMembersAssignment_4_2_1_0.eContents().get(0);
		private final Assignment cMembersAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_4_2_1_1_0 = (RuleCall)cMembersAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cTupleSeparatorParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Action cTupleMembersAction_5_2_0 = (Action)cGroup_5_2.eContents().get(0);
		private final Assignment cMembersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_5_2_1_0 = (RuleCall)cMembersAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_2_2 = (Group)cGroup_5_2.eContents().get(2);
		private final Assignment cMembersAssignment_5_2_2_0 = (Assignment)cGroup_5_2_2.eContents().get(0);
		private final RuleCall cMembersTupleSeparatorParserRuleCall_5_2_2_0_0 = (RuleCall)cMembersAssignment_5_2_2_0.eContents().get(0);
		private final Assignment cMembersAssignment_5_2_2_1 = (Assignment)cGroup_5_2_2.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_5_2_2_1_0 = (RuleCall)cMembersAssignment_5_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Action cTupleAction_6_2 = (Action)cGroup_6.eContents().get(2);
		
		//PrimaryExpression Expression:
		//	SpecialExpression | QualifiedIdentifier | Literal | TypeCast |
		//	"(" Expression ({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)? ")" |
		//	"(" TupleSeparator ({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*)
		//	")" |
		//	"(" ")" {Tuple};
		@Override public ParserRule getRule() { return rule; }
		
		//SpecialExpression | QualifiedIdentifier | Literal | TypeCast | "(" Expression ({Tuple.members+=current}
		//(members+=TupleSeparator members+=Expression?)+)? ")" | "(" TupleSeparator ({Tuple.members+=current}
		//members+=Expression? (members+=TupleSeparator members+=Expression?)*) ")" | "(" ")" {Tuple}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpecialExpression
		public RuleCall getSpecialExpressionParserRuleCall_0() { return cSpecialExpressionParserRuleCall_0; }
		
		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_1() { return cQualifiedIdentifierParserRuleCall_1; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }
		
		//TypeCast
		public RuleCall getTypeCastParserRuleCall_3() { return cTypeCastParserRuleCall_3; }
		
		//"(" Expression ({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)? ")"
		public Group getGroup_4() { return cGroup_4; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }
		
		//({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//{Tuple.members+=current}
		public Action getTupleMembersAction_4_2_0() { return cTupleMembersAction_4_2_0; }
		
		//(members+=TupleSeparator members+=Expression?)+
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//members+=TupleSeparator
		public Assignment getMembersAssignment_4_2_1_0() { return cMembersAssignment_4_2_1_0; }
		
		//TupleSeparator
		public RuleCall getMembersTupleSeparatorParserRuleCall_4_2_1_0_0() { return cMembersTupleSeparatorParserRuleCall_4_2_1_0_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_4_2_1_1() { return cMembersAssignment_4_2_1_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_4_2_1_1_0() { return cMembersExpressionParserRuleCall_4_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//"(" TupleSeparator ({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*) ")"
		public Group getGroup_5() { return cGroup_5; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//TupleSeparator
		public RuleCall getTupleSeparatorParserRuleCall_5_1() { return cTupleSeparatorParserRuleCall_5_1; }
		
		//({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*)
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//{Tuple.members+=current}
		public Action getTupleMembersAction_5_2_0() { return cTupleMembersAction_5_2_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_5_2_1() { return cMembersAssignment_5_2_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_5_2_1_0() { return cMembersExpressionParserRuleCall_5_2_1_0; }
		
		//(members+=TupleSeparator members+=Expression?)*
		public Group getGroup_5_2_2() { return cGroup_5_2_2; }
		
		//members+=TupleSeparator
		public Assignment getMembersAssignment_5_2_2_0() { return cMembersAssignment_5_2_2_0; }
		
		//TupleSeparator
		public RuleCall getMembersTupleSeparatorParserRuleCall_5_2_2_0_0() { return cMembersTupleSeparatorParserRuleCall_5_2_2_0_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_5_2_2_1() { return cMembersAssignment_5_2_2_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_5_2_2_1_0() { return cMembersExpressionParserRuleCall_5_2_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//"(" ")" {Tuple}
		public Group getGroup_6() { return cGroup_6; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6_1() { return cRightParenthesisKeyword_6_1; }
		
		//{Tuple}
		public Action getTupleAction_6_2() { return cTupleAction_6_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	SpecialLiteral | BooleanConst | NumericLiteral | StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//SpecialLiteral | BooleanConst | NumericLiteral | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpecialLiteral
		public RuleCall getSpecialLiteralParserRuleCall_0() { return cSpecialLiteralParserRuleCall_0; }
		
		//BooleanConst
		public RuleCall getBooleanConstParserRuleCall_1() { return cBooleanConstParserRuleCall_1; }
		
		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_2() { return cNumericLiteralParserRuleCall_2; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }
	}
	public class SpecialLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SpecialLiteral");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameBLOCKTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameMSGTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		private final RuleCall cNameTXTerminalRuleCall_0_2 = (RuleCall)cNameAlternatives_0.eContents().get(2);
		private final RuleCall cNameNOWTerminalRuleCall_0_3 = (RuleCall)cNameAlternatives_0.eContents().get(3);
		
		//SpecialLiteral:
		//	name=(BLOCK
		//	| MSG
		//	| TX
		//	| NOW);
		@Override public ParserRule getRule() { return rule; }
		
		//name=(BLOCK | MSG | TX | NOW)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(BLOCK | MSG | TX | NOW)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//BLOCK
		public RuleCall getNameBLOCKTerminalRuleCall_0_0() { return cNameBLOCKTerminalRuleCall_0_0; }
		
		//MSG
		public RuleCall getNameMSGTerminalRuleCall_0_1() { return cNameMSGTerminalRuleCall_0_1; }
		
		//TX
		public RuleCall getNameTXTerminalRuleCall_0_2() { return cNameTXTerminalRuleCall_0_2; }
		
		//NOW
		public RuleCall getNameNOWTerminalRuleCall_0_3() { return cNameNOWTerminalRuleCall_0_3; }
	}
	public class BooleanConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BooleanConst");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanLiteralEnumEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanConst:
		//	value=BooleanLiteralEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BooleanLiteralEnum
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanLiteralEnum
		public RuleCall getValueBooleanLiteralEnumEnumRuleCall_0() { return cValueBooleanLiteralEnumEnumRuleCall_0; }
	}
	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NumericLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIntValueAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cIntValueIntLiteralParserRuleCall_0_0_0 = (RuleCall)cIntValueAssignment_0_0.eContents().get(0);
		private final Assignment cHexValueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cHexValueHexLiteralParserRuleCall_0_1_0 = (RuleCall)cHexValueAssignment_0_1.eContents().get(0);
		private final Assignment cDecimalValueAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cDecimalValueDecimalLiteralParserRuleCall_0_2_0 = (RuleCall)cDecimalValueAssignment_0_2.eContents().get(0);
		private final Assignment cEtherUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEtherUnitUnitTypesParserRuleCall_1_0 = (RuleCall)cEtherUnitAssignment_1.eContents().get(0);
		
		//NumericLiteral:
		//	(intValue=IntLiteral
		//	| hexValue=HexLiteral
		//	| decimalValue=DecimalLiteral) etherUnit=UnitTypes?;
		@Override public ParserRule getRule() { return rule; }
		
		//(intValue=IntLiteral | hexValue=HexLiteral | decimalValue=DecimalLiteral) etherUnit=UnitTypes?
		public Group getGroup() { return cGroup; }
		
		//(intValue=IntLiteral | hexValue=HexLiteral | decimalValue=DecimalLiteral)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//intValue=IntLiteral
		public Assignment getIntValueAssignment_0_0() { return cIntValueAssignment_0_0; }
		
		//IntLiteral
		public RuleCall getIntValueIntLiteralParserRuleCall_0_0_0() { return cIntValueIntLiteralParserRuleCall_0_0_0; }
		
		//hexValue=HexLiteral
		public Assignment getHexValueAssignment_0_1() { return cHexValueAssignment_0_1; }
		
		//HexLiteral
		public RuleCall getHexValueHexLiteralParserRuleCall_0_1_0() { return cHexValueHexLiteralParserRuleCall_0_1_0; }
		
		//decimalValue=DecimalLiteral
		public Assignment getDecimalValueAssignment_0_2() { return cDecimalValueAssignment_0_2; }
		
		//DecimalLiteral
		public RuleCall getDecimalValueDecimalLiteralParserRuleCall_0_2_0() { return cDecimalValueDecimalLiteralParserRuleCall_0_2_0; }
		
		//etherUnit=UnitTypes?
		public Assignment getEtherUnitAssignment_1() { return cEtherUnitAssignment_1; }
		
		//UnitTypes
		public RuleCall getEtherUnitUnitTypesParserRuleCall_1_0() { return cEtherUnitUnitTypesParserRuleCall_1_0; }
	}
	public class UnitTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.UnitTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTimeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTimeTimeUnitsLiteralParserRuleCall_0_0 = (RuleCall)cTimeAssignment_0.eContents().get(0);
		private final Assignment cUnitsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnitsUnitsLiteralParserRuleCall_1_0 = (RuleCall)cUnitsAssignment_1.eContents().get(0);
		
		//UnitTypes:
		//	time=TimeUnitsLiteral
		//	| units=UnitsLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//time=TimeUnitsLiteral | units=UnitsLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//time=TimeUnitsLiteral
		public Assignment getTimeAssignment_0() { return cTimeAssignment_0; }
		
		//TimeUnitsLiteral
		public RuleCall getTimeTimeUnitsLiteralParserRuleCall_0_0() { return cTimeTimeUnitsLiteralParserRuleCall_0_0; }
		
		//units=UnitsLiteral
		public Assignment getUnitsAssignment_1() { return cUnitsAssignment_1; }
		
		//UnitsLiteral
		public RuleCall getUnitsUnitsLiteralParserRuleCall_1_0() { return cUnitsUnitsLiteralParserRuleCall_1_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class HexLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.HexLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HexLiteral:
		//	value=HEX;
		@Override public ParserRule getRule() { return rule; }
		
		//value=HEX
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0() { return cValueHEXTerminalRuleCall_0; }
	}
	public class DecimalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.DecimalLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DecimalLiteral:
		//	value=DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DECIMAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0() { return cValueDECIMALTerminalRuleCall_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TypeCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TypeCast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueElementaryTypeNameEnumParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeCast:
		//	value=ElementaryTypeNameEnum "(" expression=Expression ")";
		@Override public ParserRule getRule() { return rule; }
		
		//value=ElementaryTypeNameEnum "(" expression=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//value=ElementaryTypeNameEnum
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ElementaryTypeNameEnum
		public RuleCall getValueElementaryTypeNameEnumParserRuleCall_0_0() { return cValueElementaryTypeNameEnumParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ElementaryTypeNameEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ElementaryTypeNameEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeInt16Keyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeInt24Keyword_0_0_2 = (Keyword)cTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cTypeInt32Keyword_0_0_3 = (Keyword)cTypeAlternatives_0_0.eContents().get(3);
		private final Keyword cTypeInt40Keyword_0_0_4 = (Keyword)cTypeAlternatives_0_0.eContents().get(4);
		private final Keyword cTypeInt48Keyword_0_0_5 = (Keyword)cTypeAlternatives_0_0.eContents().get(5);
		private final Keyword cTypeInt56Keyword_0_0_6 = (Keyword)cTypeAlternatives_0_0.eContents().get(6);
		private final Keyword cTypeInt64Keyword_0_0_7 = (Keyword)cTypeAlternatives_0_0.eContents().get(7);
		private final Keyword cTypeInt72Keyword_0_0_8 = (Keyword)cTypeAlternatives_0_0.eContents().get(8);
		private final Keyword cTypeInt80Keyword_0_0_9 = (Keyword)cTypeAlternatives_0_0.eContents().get(9);
		private final Keyword cTypeInt88Keyword_0_0_10 = (Keyword)cTypeAlternatives_0_0.eContents().get(10);
		private final Keyword cTypeInt96Keyword_0_0_11 = (Keyword)cTypeAlternatives_0_0.eContents().get(11);
		private final Keyword cTypeInt104Keyword_0_0_12 = (Keyword)cTypeAlternatives_0_0.eContents().get(12);
		private final Keyword cTypeInt112Keyword_0_0_13 = (Keyword)cTypeAlternatives_0_0.eContents().get(13);
		private final Keyword cTypeInt120Keyword_0_0_14 = (Keyword)cTypeAlternatives_0_0.eContents().get(14);
		private final Keyword cTypeInt128Keyword_0_0_15 = (Keyword)cTypeAlternatives_0_0.eContents().get(15);
		private final Keyword cTypeInt136Keyword_0_0_16 = (Keyword)cTypeAlternatives_0_0.eContents().get(16);
		private final Keyword cTypeInt144Keyword_0_0_17 = (Keyword)cTypeAlternatives_0_0.eContents().get(17);
		private final Keyword cTypeInt152Keyword_0_0_18 = (Keyword)cTypeAlternatives_0_0.eContents().get(18);
		private final Keyword cTypeInt160Keyword_0_0_19 = (Keyword)cTypeAlternatives_0_0.eContents().get(19);
		private final Keyword cTypeInt168Keyword_0_0_20 = (Keyword)cTypeAlternatives_0_0.eContents().get(20);
		private final Keyword cTypeInt178Keyword_0_0_21 = (Keyword)cTypeAlternatives_0_0.eContents().get(21);
		private final Keyword cTypeInt184Keyword_0_0_22 = (Keyword)cTypeAlternatives_0_0.eContents().get(22);
		private final Keyword cTypeInt192Keyword_0_0_23 = (Keyword)cTypeAlternatives_0_0.eContents().get(23);
		private final Keyword cTypeInt200Keyword_0_0_24 = (Keyword)cTypeAlternatives_0_0.eContents().get(24);
		private final Keyword cTypeInt208Keyword_0_0_25 = (Keyword)cTypeAlternatives_0_0.eContents().get(25);
		private final Keyword cTypeInt216Keyword_0_0_26 = (Keyword)cTypeAlternatives_0_0.eContents().get(26);
		private final Keyword cTypeInt224Keyword_0_0_27 = (Keyword)cTypeAlternatives_0_0.eContents().get(27);
		private final Keyword cTypeInt232Keyword_0_0_28 = (Keyword)cTypeAlternatives_0_0.eContents().get(28);
		private final Keyword cTypeInt240Keyword_0_0_29 = (Keyword)cTypeAlternatives_0_0.eContents().get(29);
		private final Keyword cTypeInt248Keyword_0_0_30 = (Keyword)cTypeAlternatives_0_0.eContents().get(30);
		private final Keyword cTypeInt256Keyword_0_0_31 = (Keyword)cTypeAlternatives_0_0.eContents().get(31);
		private final Assignment cTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeUintKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeUint8Keyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cTypeUint16Keyword_1_0_2 = (Keyword)cTypeAlternatives_1_0.eContents().get(2);
		private final Keyword cTypeUint24Keyword_1_0_3 = (Keyword)cTypeAlternatives_1_0.eContents().get(3);
		private final Keyword cTypeUint32Keyword_1_0_4 = (Keyword)cTypeAlternatives_1_0.eContents().get(4);
		private final Keyword cTypeUint40Keyword_1_0_5 = (Keyword)cTypeAlternatives_1_0.eContents().get(5);
		private final Keyword cTypeUint48Keyword_1_0_6 = (Keyword)cTypeAlternatives_1_0.eContents().get(6);
		private final Keyword cTypeUint56Keyword_1_0_7 = (Keyword)cTypeAlternatives_1_0.eContents().get(7);
		private final Keyword cTypeUint64Keyword_1_0_8 = (Keyword)cTypeAlternatives_1_0.eContents().get(8);
		private final Keyword cTypeUint72Keyword_1_0_9 = (Keyword)cTypeAlternatives_1_0.eContents().get(9);
		private final Keyword cTypeUint80Keyword_1_0_10 = (Keyword)cTypeAlternatives_1_0.eContents().get(10);
		private final Keyword cTypeUint88Keyword_1_0_11 = (Keyword)cTypeAlternatives_1_0.eContents().get(11);
		private final Keyword cTypeUint96Keyword_1_0_12 = (Keyword)cTypeAlternatives_1_0.eContents().get(12);
		private final Keyword cTypeUint104Keyword_1_0_13 = (Keyword)cTypeAlternatives_1_0.eContents().get(13);
		private final Keyword cTypeUint112Keyword_1_0_14 = (Keyword)cTypeAlternatives_1_0.eContents().get(14);
		private final Keyword cTypeUint120Keyword_1_0_15 = (Keyword)cTypeAlternatives_1_0.eContents().get(15);
		private final Keyword cTypeUint128Keyword_1_0_16 = (Keyword)cTypeAlternatives_1_0.eContents().get(16);
		private final Keyword cTypeUint136Keyword_1_0_17 = (Keyword)cTypeAlternatives_1_0.eContents().get(17);
		private final Keyword cTypeUint144Keyword_1_0_18 = (Keyword)cTypeAlternatives_1_0.eContents().get(18);
		private final Keyword cTypeUint152Keyword_1_0_19 = (Keyword)cTypeAlternatives_1_0.eContents().get(19);
		private final Keyword cTypeUint160Keyword_1_0_20 = (Keyword)cTypeAlternatives_1_0.eContents().get(20);
		private final Keyword cTypeUint168Keyword_1_0_21 = (Keyword)cTypeAlternatives_1_0.eContents().get(21);
		private final Keyword cTypeUint178Keyword_1_0_22 = (Keyword)cTypeAlternatives_1_0.eContents().get(22);
		private final Keyword cTypeUint184Keyword_1_0_23 = (Keyword)cTypeAlternatives_1_0.eContents().get(23);
		private final Keyword cTypeUint192Keyword_1_0_24 = (Keyword)cTypeAlternatives_1_0.eContents().get(24);
		private final Keyword cTypeUint200Keyword_1_0_25 = (Keyword)cTypeAlternatives_1_0.eContents().get(25);
		private final Keyword cTypeUint208Keyword_1_0_26 = (Keyword)cTypeAlternatives_1_0.eContents().get(26);
		private final Keyword cTypeUint216Keyword_1_0_27 = (Keyword)cTypeAlternatives_1_0.eContents().get(27);
		private final Keyword cTypeUint224Keyword_1_0_28 = (Keyword)cTypeAlternatives_1_0.eContents().get(28);
		private final Keyword cTypeUint232Keyword_1_0_29 = (Keyword)cTypeAlternatives_1_0.eContents().get(29);
		private final Keyword cTypeUint240Keyword_1_0_30 = (Keyword)cTypeAlternatives_1_0.eContents().get(30);
		private final Keyword cTypeUint248Keyword_1_0_31 = (Keyword)cTypeAlternatives_1_0.eContents().get(31);
		private final Keyword cTypeUint256Keyword_1_0_32 = (Keyword)cTypeAlternatives_1_0.eContents().get(32);
		private final Assignment cTypeAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Alternatives cTypeAlternatives_2_0 = (Alternatives)cTypeAssignment_2.eContents().get(0);
		private final Keyword cTypeBytes1Keyword_2_0_0 = (Keyword)cTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cTypeBytes2Keyword_2_0_1 = (Keyword)cTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cTypeBytes3Keyword_2_0_2 = (Keyword)cTypeAlternatives_2_0.eContents().get(2);
		private final Keyword cTypeBytes4Keyword_2_0_3 = (Keyword)cTypeAlternatives_2_0.eContents().get(3);
		private final Keyword cTypeBytes5Keyword_2_0_4 = (Keyword)cTypeAlternatives_2_0.eContents().get(4);
		private final Keyword cTypeBytes6Keyword_2_0_5 = (Keyword)cTypeAlternatives_2_0.eContents().get(5);
		private final Keyword cTypeBytes7Keyword_2_0_6 = (Keyword)cTypeAlternatives_2_0.eContents().get(6);
		private final Keyword cTypeBytes8Keyword_2_0_7 = (Keyword)cTypeAlternatives_2_0.eContents().get(7);
		private final Keyword cTypeBytes9Keyword_2_0_8 = (Keyword)cTypeAlternatives_2_0.eContents().get(8);
		private final Keyword cTypeBytes10Keyword_2_0_9 = (Keyword)cTypeAlternatives_2_0.eContents().get(9);
		private final Keyword cTypeBytes11Keyword_2_0_10 = (Keyword)cTypeAlternatives_2_0.eContents().get(10);
		private final Keyword cTypeBytes12Keyword_2_0_11 = (Keyword)cTypeAlternatives_2_0.eContents().get(11);
		private final Keyword cTypeBytes13Keyword_2_0_12 = (Keyword)cTypeAlternatives_2_0.eContents().get(12);
		private final Keyword cTypeBytes14Keyword_2_0_13 = (Keyword)cTypeAlternatives_2_0.eContents().get(13);
		private final Keyword cTypeBytes15Keyword_2_0_14 = (Keyword)cTypeAlternatives_2_0.eContents().get(14);
		private final Keyword cTypeBytes16Keyword_2_0_15 = (Keyword)cTypeAlternatives_2_0.eContents().get(15);
		private final Keyword cTypeBytes17Keyword_2_0_16 = (Keyword)cTypeAlternatives_2_0.eContents().get(16);
		private final Keyword cTypeBytes18Keyword_2_0_17 = (Keyword)cTypeAlternatives_2_0.eContents().get(17);
		private final Keyword cTypeBytes19Keyword_2_0_18 = (Keyword)cTypeAlternatives_2_0.eContents().get(18);
		private final Keyword cTypeBytes20Keyword_2_0_19 = (Keyword)cTypeAlternatives_2_0.eContents().get(19);
		private final Keyword cTypeBytes21Keyword_2_0_20 = (Keyword)cTypeAlternatives_2_0.eContents().get(20);
		private final Keyword cTypeBytes22Keyword_2_0_21 = (Keyword)cTypeAlternatives_2_0.eContents().get(21);
		private final Keyword cTypeBytes23Keyword_2_0_22 = (Keyword)cTypeAlternatives_2_0.eContents().get(22);
		private final Keyword cTypeBytes24Keyword_2_0_23 = (Keyword)cTypeAlternatives_2_0.eContents().get(23);
		private final Keyword cTypeBytes25Keyword_2_0_24 = (Keyword)cTypeAlternatives_2_0.eContents().get(24);
		private final Keyword cTypeBytes26Keyword_2_0_25 = (Keyword)cTypeAlternatives_2_0.eContents().get(25);
		private final Keyword cTypeBytes27Keyword_2_0_26 = (Keyword)cTypeAlternatives_2_0.eContents().get(26);
		private final Keyword cTypeBytes28Keyword_2_0_27 = (Keyword)cTypeAlternatives_2_0.eContents().get(27);
		private final Keyword cTypeBytes29Keyword_2_0_28 = (Keyword)cTypeAlternatives_2_0.eContents().get(28);
		private final Keyword cTypeBytes30Keyword_2_0_29 = (Keyword)cTypeAlternatives_2_0.eContents().get(29);
		private final Keyword cTypeBytes31Keyword_2_0_30 = (Keyword)cTypeAlternatives_2_0.eContents().get(30);
		private final Keyword cTypeBytes32Keyword_2_0_31 = (Keyword)cTypeAlternatives_2_0.eContents().get(31);
		private final Keyword cTypeBytesKeyword_2_0_32 = (Keyword)cTypeAlternatives_2_0.eContents().get(32);
		private final Keyword cTypeByteKeyword_2_0_33 = (Keyword)cTypeAlternatives_2_0.eContents().get(33);
		private final Assignment cTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeAddressKeyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeRealKeyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Keyword cTypeUrealKeyword_3_0_2 = (Keyword)cTypeAlternatives_3_0.eContents().get(2);
		
		//ElementaryTypeNameEnum:
		//	type=(
		//	//INT
		//	"int" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" |
		//	"int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" |
		//	"int178" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" |
		//	"int256") | type=(
		//	// UINT
		//	"uint" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" |
		//	"uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" |
		//	"uint160" | "uint168" | "uint178" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" |
		//	"uint232" | "uint240" | "uint248" | "uint256") | type=(
		//	// BYTES
		//	"bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" |
		//	"bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" |
		//	"bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" |
		//	"bytes29" | "bytes30" | "bytes31" | "bytes32" | "bytes" | "byte") | type=("address" | "real" | "ureal");
		@Override public ParserRule getRule() { return rule; }
		
		//type=( //INT
		//"int" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" |
		//"int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int178" | "int184"
		//| "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256") | type=( // UINT
		//"uint" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" |
		//"uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" |
		//"uint168" | "uint178" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240"
		//| "uint248" | "uint256") | type=( // BYTES
		//"bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11"
		//| "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" |
		//"bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30"
		//| "bytes31" | "bytes32" | "bytes" | "byte") | type=("address" | "real" | "ureal")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//type=( //INT
		//"int" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" |
		//"int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int178" | "int184"
		//| "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//( //INT
		//"int" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" |
		//"int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int178" | "int184"
		//| "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256")
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }
		
		////INT
		//"int"
		public Keyword getTypeIntKeyword_0_0_0() { return cTypeIntKeyword_0_0_0; }
		
		//"int16"
		public Keyword getTypeInt16Keyword_0_0_1() { return cTypeInt16Keyword_0_0_1; }
		
		//"int24"
		public Keyword getTypeInt24Keyword_0_0_2() { return cTypeInt24Keyword_0_0_2; }
		
		//"int32"
		public Keyword getTypeInt32Keyword_0_0_3() { return cTypeInt32Keyword_0_0_3; }
		
		//"int40"
		public Keyword getTypeInt40Keyword_0_0_4() { return cTypeInt40Keyword_0_0_4; }
		
		//"int48"
		public Keyword getTypeInt48Keyword_0_0_5() { return cTypeInt48Keyword_0_0_5; }
		
		//"int56"
		public Keyword getTypeInt56Keyword_0_0_6() { return cTypeInt56Keyword_0_0_6; }
		
		//"int64"
		public Keyword getTypeInt64Keyword_0_0_7() { return cTypeInt64Keyword_0_0_7; }
		
		//"int72"
		public Keyword getTypeInt72Keyword_0_0_8() { return cTypeInt72Keyword_0_0_8; }
		
		//"int80"
		public Keyword getTypeInt80Keyword_0_0_9() { return cTypeInt80Keyword_0_0_9; }
		
		//"int88"
		public Keyword getTypeInt88Keyword_0_0_10() { return cTypeInt88Keyword_0_0_10; }
		
		//"int96"
		public Keyword getTypeInt96Keyword_0_0_11() { return cTypeInt96Keyword_0_0_11; }
		
		//"int104"
		public Keyword getTypeInt104Keyword_0_0_12() { return cTypeInt104Keyword_0_0_12; }
		
		//"int112"
		public Keyword getTypeInt112Keyword_0_0_13() { return cTypeInt112Keyword_0_0_13; }
		
		//"int120"
		public Keyword getTypeInt120Keyword_0_0_14() { return cTypeInt120Keyword_0_0_14; }
		
		//"int128"
		public Keyword getTypeInt128Keyword_0_0_15() { return cTypeInt128Keyword_0_0_15; }
		
		//"int136"
		public Keyword getTypeInt136Keyword_0_0_16() { return cTypeInt136Keyword_0_0_16; }
		
		//"int144"
		public Keyword getTypeInt144Keyword_0_0_17() { return cTypeInt144Keyword_0_0_17; }
		
		//"int152"
		public Keyword getTypeInt152Keyword_0_0_18() { return cTypeInt152Keyword_0_0_18; }
		
		//"int160"
		public Keyword getTypeInt160Keyword_0_0_19() { return cTypeInt160Keyword_0_0_19; }
		
		//"int168"
		public Keyword getTypeInt168Keyword_0_0_20() { return cTypeInt168Keyword_0_0_20; }
		
		//"int178"
		public Keyword getTypeInt178Keyword_0_0_21() { return cTypeInt178Keyword_0_0_21; }
		
		//"int184"
		public Keyword getTypeInt184Keyword_0_0_22() { return cTypeInt184Keyword_0_0_22; }
		
		//"int192"
		public Keyword getTypeInt192Keyword_0_0_23() { return cTypeInt192Keyword_0_0_23; }
		
		//"int200"
		public Keyword getTypeInt200Keyword_0_0_24() { return cTypeInt200Keyword_0_0_24; }
		
		//"int208"
		public Keyword getTypeInt208Keyword_0_0_25() { return cTypeInt208Keyword_0_0_25; }
		
		//"int216"
		public Keyword getTypeInt216Keyword_0_0_26() { return cTypeInt216Keyword_0_0_26; }
		
		//"int224"
		public Keyword getTypeInt224Keyword_0_0_27() { return cTypeInt224Keyword_0_0_27; }
		
		//"int232"
		public Keyword getTypeInt232Keyword_0_0_28() { return cTypeInt232Keyword_0_0_28; }
		
		//"int240"
		public Keyword getTypeInt240Keyword_0_0_29() { return cTypeInt240Keyword_0_0_29; }
		
		//"int248"
		public Keyword getTypeInt248Keyword_0_0_30() { return cTypeInt248Keyword_0_0_30; }
		
		//"int256"
		public Keyword getTypeInt256Keyword_0_0_31() { return cTypeInt256Keyword_0_0_31; }
		
		//type=( // UINT
		//"uint" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" |
		//"uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" |
		//"uint168" | "uint178" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240"
		//| "uint248" | "uint256")
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//( // UINT
		//"uint" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" |
		//"uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" |
		//"uint168" | "uint178" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240"
		//| "uint248" | "uint256")
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }
		
		//// UINT
		//"uint"
		public Keyword getTypeUintKeyword_1_0_0() { return cTypeUintKeyword_1_0_0; }
		
		//"uint8"
		public Keyword getTypeUint8Keyword_1_0_1() { return cTypeUint8Keyword_1_0_1; }
		
		//"uint16"
		public Keyword getTypeUint16Keyword_1_0_2() { return cTypeUint16Keyword_1_0_2; }
		
		//"uint24"
		public Keyword getTypeUint24Keyword_1_0_3() { return cTypeUint24Keyword_1_0_3; }
		
		//"uint32"
		public Keyword getTypeUint32Keyword_1_0_4() { return cTypeUint32Keyword_1_0_4; }
		
		//"uint40"
		public Keyword getTypeUint40Keyword_1_0_5() { return cTypeUint40Keyword_1_0_5; }
		
		//"uint48"
		public Keyword getTypeUint48Keyword_1_0_6() { return cTypeUint48Keyword_1_0_6; }
		
		//"uint56"
		public Keyword getTypeUint56Keyword_1_0_7() { return cTypeUint56Keyword_1_0_7; }
		
		//"uint64"
		public Keyword getTypeUint64Keyword_1_0_8() { return cTypeUint64Keyword_1_0_8; }
		
		//"uint72"
		public Keyword getTypeUint72Keyword_1_0_9() { return cTypeUint72Keyword_1_0_9; }
		
		//"uint80"
		public Keyword getTypeUint80Keyword_1_0_10() { return cTypeUint80Keyword_1_0_10; }
		
		//"uint88"
		public Keyword getTypeUint88Keyword_1_0_11() { return cTypeUint88Keyword_1_0_11; }
		
		//"uint96"
		public Keyword getTypeUint96Keyword_1_0_12() { return cTypeUint96Keyword_1_0_12; }
		
		//"uint104"
		public Keyword getTypeUint104Keyword_1_0_13() { return cTypeUint104Keyword_1_0_13; }
		
		//"uint112"
		public Keyword getTypeUint112Keyword_1_0_14() { return cTypeUint112Keyword_1_0_14; }
		
		//"uint120"
		public Keyword getTypeUint120Keyword_1_0_15() { return cTypeUint120Keyword_1_0_15; }
		
		//"uint128"
		public Keyword getTypeUint128Keyword_1_0_16() { return cTypeUint128Keyword_1_0_16; }
		
		//"uint136"
		public Keyword getTypeUint136Keyword_1_0_17() { return cTypeUint136Keyword_1_0_17; }
		
		//"uint144"
		public Keyword getTypeUint144Keyword_1_0_18() { return cTypeUint144Keyword_1_0_18; }
		
		//"uint152"
		public Keyword getTypeUint152Keyword_1_0_19() { return cTypeUint152Keyword_1_0_19; }
		
		//"uint160"
		public Keyword getTypeUint160Keyword_1_0_20() { return cTypeUint160Keyword_1_0_20; }
		
		//"uint168"
		public Keyword getTypeUint168Keyword_1_0_21() { return cTypeUint168Keyword_1_0_21; }
		
		//"uint178"
		public Keyword getTypeUint178Keyword_1_0_22() { return cTypeUint178Keyword_1_0_22; }
		
		//"uint184"
		public Keyword getTypeUint184Keyword_1_0_23() { return cTypeUint184Keyword_1_0_23; }
		
		//"uint192"
		public Keyword getTypeUint192Keyword_1_0_24() { return cTypeUint192Keyword_1_0_24; }
		
		//"uint200"
		public Keyword getTypeUint200Keyword_1_0_25() { return cTypeUint200Keyword_1_0_25; }
		
		//"uint208"
		public Keyword getTypeUint208Keyword_1_0_26() { return cTypeUint208Keyword_1_0_26; }
		
		//"uint216"
		public Keyword getTypeUint216Keyword_1_0_27() { return cTypeUint216Keyword_1_0_27; }
		
		//"uint224"
		public Keyword getTypeUint224Keyword_1_0_28() { return cTypeUint224Keyword_1_0_28; }
		
		//"uint232"
		public Keyword getTypeUint232Keyword_1_0_29() { return cTypeUint232Keyword_1_0_29; }
		
		//"uint240"
		public Keyword getTypeUint240Keyword_1_0_30() { return cTypeUint240Keyword_1_0_30; }
		
		//"uint248"
		public Keyword getTypeUint248Keyword_1_0_31() { return cTypeUint248Keyword_1_0_31; }
		
		//"uint256"
		public Keyword getTypeUint256Keyword_1_0_32() { return cTypeUint256Keyword_1_0_32; }
		
		//type=( // BYTES
		//"bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11"
		//| "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" |
		//"bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30"
		//| "bytes31" | "bytes32" | "bytes" | "byte")
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//( // BYTES
		//"bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" | "bytes11"
		//| "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" | "bytes20" |
		//"bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" | "bytes29" | "bytes30"
		//| "bytes31" | "bytes32" | "bytes" | "byte")
		public Alternatives getTypeAlternatives_2_0() { return cTypeAlternatives_2_0; }
		
		//// BYTES
		//"bytes1"
		public Keyword getTypeBytes1Keyword_2_0_0() { return cTypeBytes1Keyword_2_0_0; }
		
		//"bytes2"
		public Keyword getTypeBytes2Keyword_2_0_1() { return cTypeBytes2Keyword_2_0_1; }
		
		//"bytes3"
		public Keyword getTypeBytes3Keyword_2_0_2() { return cTypeBytes3Keyword_2_0_2; }
		
		//"bytes4"
		public Keyword getTypeBytes4Keyword_2_0_3() { return cTypeBytes4Keyword_2_0_3; }
		
		//"bytes5"
		public Keyword getTypeBytes5Keyword_2_0_4() { return cTypeBytes5Keyword_2_0_4; }
		
		//"bytes6"
		public Keyword getTypeBytes6Keyword_2_0_5() { return cTypeBytes6Keyword_2_0_5; }
		
		//"bytes7"
		public Keyword getTypeBytes7Keyword_2_0_6() { return cTypeBytes7Keyword_2_0_6; }
		
		//"bytes8"
		public Keyword getTypeBytes8Keyword_2_0_7() { return cTypeBytes8Keyword_2_0_7; }
		
		//"bytes9"
		public Keyword getTypeBytes9Keyword_2_0_8() { return cTypeBytes9Keyword_2_0_8; }
		
		//"bytes10"
		public Keyword getTypeBytes10Keyword_2_0_9() { return cTypeBytes10Keyword_2_0_9; }
		
		//"bytes11"
		public Keyword getTypeBytes11Keyword_2_0_10() { return cTypeBytes11Keyword_2_0_10; }
		
		//"bytes12"
		public Keyword getTypeBytes12Keyword_2_0_11() { return cTypeBytes12Keyword_2_0_11; }
		
		//"bytes13"
		public Keyword getTypeBytes13Keyword_2_0_12() { return cTypeBytes13Keyword_2_0_12; }
		
		//"bytes14"
		public Keyword getTypeBytes14Keyword_2_0_13() { return cTypeBytes14Keyword_2_0_13; }
		
		//"bytes15"
		public Keyword getTypeBytes15Keyword_2_0_14() { return cTypeBytes15Keyword_2_0_14; }
		
		//"bytes16"
		public Keyword getTypeBytes16Keyword_2_0_15() { return cTypeBytes16Keyword_2_0_15; }
		
		//"bytes17"
		public Keyword getTypeBytes17Keyword_2_0_16() { return cTypeBytes17Keyword_2_0_16; }
		
		//"bytes18"
		public Keyword getTypeBytes18Keyword_2_0_17() { return cTypeBytes18Keyword_2_0_17; }
		
		//"bytes19"
		public Keyword getTypeBytes19Keyword_2_0_18() { return cTypeBytes19Keyword_2_0_18; }
		
		//"bytes20"
		public Keyword getTypeBytes20Keyword_2_0_19() { return cTypeBytes20Keyword_2_0_19; }
		
		//"bytes21"
		public Keyword getTypeBytes21Keyword_2_0_20() { return cTypeBytes21Keyword_2_0_20; }
		
		//"bytes22"
		public Keyword getTypeBytes22Keyword_2_0_21() { return cTypeBytes22Keyword_2_0_21; }
		
		//"bytes23"
		public Keyword getTypeBytes23Keyword_2_0_22() { return cTypeBytes23Keyword_2_0_22; }
		
		//"bytes24"
		public Keyword getTypeBytes24Keyword_2_0_23() { return cTypeBytes24Keyword_2_0_23; }
		
		//"bytes25"
		public Keyword getTypeBytes25Keyword_2_0_24() { return cTypeBytes25Keyword_2_0_24; }
		
		//"bytes26"
		public Keyword getTypeBytes26Keyword_2_0_25() { return cTypeBytes26Keyword_2_0_25; }
		
		//"bytes27"
		public Keyword getTypeBytes27Keyword_2_0_26() { return cTypeBytes27Keyword_2_0_26; }
		
		//"bytes28"
		public Keyword getTypeBytes28Keyword_2_0_27() { return cTypeBytes28Keyword_2_0_27; }
		
		//"bytes29"
		public Keyword getTypeBytes29Keyword_2_0_28() { return cTypeBytes29Keyword_2_0_28; }
		
		//"bytes30"
		public Keyword getTypeBytes30Keyword_2_0_29() { return cTypeBytes30Keyword_2_0_29; }
		
		//"bytes31"
		public Keyword getTypeBytes31Keyword_2_0_30() { return cTypeBytes31Keyword_2_0_30; }
		
		//"bytes32"
		public Keyword getTypeBytes32Keyword_2_0_31() { return cTypeBytes32Keyword_2_0_31; }
		
		//"bytes"
		public Keyword getTypeBytesKeyword_2_0_32() { return cTypeBytesKeyword_2_0_32; }
		
		//"byte"
		public Keyword getTypeByteKeyword_2_0_33() { return cTypeByteKeyword_2_0_33; }
		
		//// Other
		//type=("address" | "real" | "ureal")
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//("address" | "real" | "ureal")
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }
		
		//"address"
		public Keyword getTypeAddressKeyword_3_0_0() { return cTypeAddressKeyword_3_0_0; }
		
		//"real"
		public Keyword getTypeRealKeyword_3_0_1() { return cTypeRealKeyword_3_0_1; }
		
		//"ureal"
		public Keyword getTypeUrealKeyword_3_0_2() { return cTypeUrealKeyword_3_0_2; }
	}
	public class SimpleTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SimpleTypeDeclaration");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeStringKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeBoolKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		
		//SimpleTypeDeclaration:
		//	type=("string" | "bool");
		@Override public ParserRule getRule() { return rule; }
		
		//type=("string" | "bool")
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//("string" | "bool")
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//"string"
		public Keyword getTypeStringKeyword_0_0() { return cTypeStringKeyword_0_0; }
		
		//"bool"
		public Keyword getTypeBoolKeyword_0_1() { return cTypeBoolKeyword_0_1; }
	}
	public class MapLocationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MapLocationLiteral");
		private final Keyword cStorageKeyword = (Keyword)rule.eContents().get(1);
		
		//MapLocationLiteral:
		//	"storage";
		@Override public ParserRule getRule() { return rule; }
		
		//"storage"
		public Keyword getStorageKeyword() { return cStorageKeyword; }
	}
	public class LocationSpecifierEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.LocationSpecifierEnum");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeMemoryKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeMapLocationLiteralParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeCalldataKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		
		//LocationSpecifierEnum:
		//	type=("memory" | MapLocationLiteral | "calldata");
		@Override public ParserRule getRule() { return rule; }
		
		//type=("memory" | MapLocationLiteral | "calldata")
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//("memory" | MapLocationLiteral | "calldata")
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//"memory"
		public Keyword getTypeMemoryKeyword_0_0() { return cTypeMemoryKeyword_0_0; }
		
		//MapLocationLiteral
		public RuleCall getTypeMapLocationLiteralParserRuleCall_0_1() { return cTypeMapLocationLiteralParserRuleCall_0_1; }
		
		//"calldata"
		public Keyword getTypeCalldataKeyword_0_2() { return cTypeCalldataKeyword_0_2; }
	}
	public class VisibilityEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VisibilityEnum");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypePublicKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeInternalKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypePrivateKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeExternalKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		
		//VisibilityEnum:
		//	type=("public" | "internal" | "private" | "external");
		@Override public ParserRule getRule() { return rule; }
		
		//type=("public" | "internal" | "private" | "external")
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//("public" | "internal" | "private" | "external")
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//"public"
		public Keyword getTypePublicKeyword_0_0() { return cTypePublicKeyword_0_0; }
		
		//"internal"
		public Keyword getTypeInternalKeyword_0_1() { return cTypeInternalKeyword_0_1; }
		
		//"private"
		public Keyword getTypePrivateKeyword_0_2() { return cTypePrivateKeyword_0_2; }
		
		//"external"
		public Keyword getTypeExternalKeyword_0_3() { return cTypeExternalKeyword_0_3; }
	}
	public class UnitsLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.UnitsLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueWeiKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueSzaboKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueFinneyKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueEtherKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		
		//UnitsLiteral:
		//	value=("wei" | "szabo" | "finney" | "ether");
		@Override public ParserRule getRule() { return rule; }
		
		//value=("wei" | "szabo" | "finney" | "ether")
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//("wei" | "szabo" | "finney" | "ether")
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//"wei"
		public Keyword getValueWeiKeyword_0_0() { return cValueWeiKeyword_0_0; }
		
		//"szabo"
		public Keyword getValueSzaboKeyword_0_1() { return cValueSzaboKeyword_0_1; }
		
		//"finney"
		public Keyword getValueFinneyKeyword_0_2() { return cValueFinneyKeyword_0_2; }
		
		//"ether"
		public Keyword getValueEtherKeyword_0_3() { return cValueEtherKeyword_0_3; }
	}
	public class TimeUnitsLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TimeUnitsLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueSecondsKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueMinutesKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValueHoursKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueDaysKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueWeeksKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		private final Keyword cValueYearsKeyword_0_5 = (Keyword)cValueAlternatives_0.eContents().get(5);
		
		//TimeUnitsLiteral:
		//	value=("seconds" | "minutes" | "hours" | "days" | "weeks" | "years");
		@Override public ParserRule getRule() { return rule; }
		
		//value=("seconds" | "minutes" | "hours" | "days" | "weeks" | "years")
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//("seconds" | "minutes" | "hours" | "days" | "weeks" | "years")
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//"seconds"
		public Keyword getValueSecondsKeyword_0_0() { return cValueSecondsKeyword_0_0; }
		
		//"minutes"
		public Keyword getValueMinutesKeyword_0_1() { return cValueMinutesKeyword_0_1; }
		
		//"hours"
		public Keyword getValueHoursKeyword_0_2() { return cValueHoursKeyword_0_2; }
		
		//"days"
		public Keyword getValueDaysKeyword_0_3() { return cValueDaysKeyword_0_3; }
		
		//"weeks"
		public Keyword getValueWeeksKeyword_0_4() { return cValueWeeksKeyword_0_4; }
		
		//"years"
		public Keyword getValueYearsKeyword_0_5() { return cValueYearsKeyword_0_5; }
	}
	
	public class AssignmentOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.AssignmentOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_OREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASSIGN_ORVerticalLineEqualsSignKeyword_1_0 = (Keyword)cASSIGN_OREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_XOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0 = (Keyword)cASSIGN_XOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_ANDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cASSIGN_ANDAmpersandEqualsSignKeyword_3_0 = (Keyword)cASSIGN_ANDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0 = (Keyword)cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0 = (Keyword)cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_ADDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cASSIGN_ADDPlusSignEqualsSignKeyword_7_0 = (Keyword)cASSIGN_ADDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SUBEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0 = (Keyword)cASSIGN_SUBEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_MULTEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cASSIGN_MULTAsteriskEqualsSignKeyword_9_0 = (Keyword)cASSIGN_MULTEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_DIVEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cASSIGN_DIVSolidusEqualsSignKeyword_10_0 = (Keyword)cASSIGN_DIVEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_MODEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cASSIGN_MODPercentSignEqualsSignKeyword_11_0 = (Keyword)cASSIGN_MODEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum AssignmentOpEnum:
		//	ASSIGN="=" | ASSIGN_OR="|=" | ASSIGN_XOR="^=" | ASSIGN_AND="&=" | ASSIGN_SHIFT_LEFT="<<=" | ASSIGN_SHIFT_RIGHT=">>="
		//	| ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" | ASSIGN_ADD="+=" | ASSIGN_SUB="-=" | ASSIGN_MULT="*=" | ASSIGN_DIV="/=" |
		//	ASSIGN_MOD="%=";
		public EnumRule getRule() { return rule; }
		
		//ASSIGN="=" | ASSIGN_OR="|=" | ASSIGN_XOR="^=" | ASSIGN_AND="&=" | ASSIGN_SHIFT_LEFT="<<=" | ASSIGN_SHIFT_RIGHT=">>=" |
		//ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" | ASSIGN_ADD="+=" | ASSIGN_SUB="-=" | ASSIGN_MULT="*=" | ASSIGN_DIV="/=" |
		//ASSIGN_MOD="%="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGN="="
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }
		
		//"="
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }
		
		//ASSIGN_OR="|="
		public EnumLiteralDeclaration getASSIGN_OREnumLiteralDeclaration_1() { return cASSIGN_OREnumLiteralDeclaration_1; }
		
		//"|="
		public Keyword getASSIGN_ORVerticalLineEqualsSignKeyword_1_0() { return cASSIGN_ORVerticalLineEqualsSignKeyword_1_0; }
		
		//ASSIGN_XOR="^="
		public EnumLiteralDeclaration getASSIGN_XOREnumLiteralDeclaration_2() { return cASSIGN_XOREnumLiteralDeclaration_2; }
		
		//"^="
		public Keyword getASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0() { return cASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0; }
		
		//ASSIGN_AND="&="
		public EnumLiteralDeclaration getASSIGN_ANDEnumLiteralDeclaration_3() { return cASSIGN_ANDEnumLiteralDeclaration_3; }
		
		//"&="
		public Keyword getASSIGN_ANDAmpersandEqualsSignKeyword_3_0() { return cASSIGN_ANDAmpersandEqualsSignKeyword_3_0; }
		
		//ASSIGN_SHIFT_LEFT="<<="
		public EnumLiteralDeclaration getASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4() { return cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4; }
		
		//"<<="
		public Keyword getASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0() { return cASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0; }
		
		//ASSIGN_SHIFT_RIGHT=">>="
		public EnumLiteralDeclaration getASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5() { return cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5; }
		
		//">>="
		public Keyword getASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0() { return cASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0; }
		
		//ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>="
		public EnumLiteralDeclaration getASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6() { return cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6; }
		
		//">>>="
		public Keyword getASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0() { return cASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0; }
		
		//ASSIGN_ADD="+="
		public EnumLiteralDeclaration getASSIGN_ADDEnumLiteralDeclaration_7() { return cASSIGN_ADDEnumLiteralDeclaration_7; }
		
		//"+="
		public Keyword getASSIGN_ADDPlusSignEqualsSignKeyword_7_0() { return cASSIGN_ADDPlusSignEqualsSignKeyword_7_0; }
		
		//ASSIGN_SUB="-="
		public EnumLiteralDeclaration getASSIGN_SUBEnumLiteralDeclaration_8() { return cASSIGN_SUBEnumLiteralDeclaration_8; }
		
		//"-="
		public Keyword getASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0() { return cASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0; }
		
		//ASSIGN_MULT="*="
		public EnumLiteralDeclaration getASSIGN_MULTEnumLiteralDeclaration_9() { return cASSIGN_MULTEnumLiteralDeclaration_9; }
		
		//"*="
		public Keyword getASSIGN_MULTAsteriskEqualsSignKeyword_9_0() { return cASSIGN_MULTAsteriskEqualsSignKeyword_9_0; }
		
		//ASSIGN_DIV="/="
		public EnumLiteralDeclaration getASSIGN_DIVEnumLiteralDeclaration_10() { return cASSIGN_DIVEnumLiteralDeclaration_10; }
		
		//"/="
		public Keyword getASSIGN_DIVSolidusEqualsSignKeyword_10_0() { return cASSIGN_DIVSolidusEqualsSignKeyword_10_0; }
		
		//ASSIGN_MOD="%="
		public EnumLiteralDeclaration getASSIGN_MODEnumLiteralDeclaration_11() { return cASSIGN_MODEnumLiteralDeclaration_11; }
		
		//"%="
		public Keyword getASSIGN_MODPercentSignEqualsSignKeyword_11_0() { return cASSIGN_MODPercentSignEqualsSignKeyword_11_0; }
	}
	public class EqualityOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EqualityOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOTEQEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOpEnum:
		//	EQ="==" | NOTEQ="!=";
		public EnumRule getRule() { return rule; }
		
		//EQ="==" | NOTEQ="!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NOTEQ="!="
		public EnumLiteralDeclaration getNOTEQEnumLiteralDeclaration_1() { return cNOTEQEnumLiteralDeclaration_1; }
		
		//"!="
		public Keyword getNOTEQExclamationMarkEqualsSignKeyword_1_0() { return cNOTEQExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class ComparisonOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ComparisonOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGTGreaterThanSignKeyword_1_0 = (Keyword)cGTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLTELessThanSignEqualsSignKeyword_2_0 = (Keyword)cLTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINInKeyword_4_0 = (Keyword)cINEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ComparisonOpEnum:
		//	LT="<" | GT=">" | LTE="<=" | GTE=">=" | IN="in";
		public EnumRule getRule() { return rule; }
		
		//LT="<" | GT=">" | LTE="<=" | GTE=">=" | IN="in"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_1() { return cGTEnumLiteralDeclaration_1; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_1_0() { return cGTGreaterThanSignKeyword_1_0; }
		
		//LTE="<="
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_2() { return cLTEEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLTELessThanSignEqualsSignKeyword_2_0() { return cLTELessThanSignEqualsSignKeyword_2_0; }
		
		//GTE=">="
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_3() { return cGTEEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_3_0() { return cGTEGreaterThanSignEqualsSignKeyword_3_0; }
		
		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_4() { return cINEnumLiteralDeclaration_4; }
		
		//"in"
		public Keyword getINInKeyword_4_0() { return cINInKeyword_4_0; }
	}
	public class ShiftOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ShiftOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFT_SHIFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLEFT_SHIFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHT_SHIFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRIGHT_SHIFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0 = (Keyword)cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ShiftOpEnum:
		//	LEFT_SHIFT="<<" | RIGHT_SHIFT=">>" | ARITHMETIC_RIGHT_SHIFT=">>>";
		public EnumRule getRule() { return rule; }
		
		//LEFT_SHIFT="<<" | RIGHT_SHIFT=">>" | ARITHMETIC_RIGHT_SHIFT=">>>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_SHIFT="<<"
		public EnumLiteralDeclaration getLEFT_SHIFTEnumLiteralDeclaration_0() { return cLEFT_SHIFTEnumLiteralDeclaration_0; }
		
		//"<<"
		public Keyword getLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0() { return cLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0; }
		
		//RIGHT_SHIFT=">>"
		public EnumLiteralDeclaration getRIGHT_SHIFTEnumLiteralDeclaration_1() { return cRIGHT_SHIFTEnumLiteralDeclaration_1; }
		
		//">>"
		public Keyword getRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0() { return cRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0; }
		
		//ARITHMETIC_RIGHT_SHIFT=">>>"
		public EnumLiteralDeclaration getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2() { return cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2; }
		
		//">>>"
		public Keyword getARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0() { return cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0; }
	}
	public class AdditionOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.AdditionOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditionOpEnum:
		//	ADD="+" | SUB="-";
		public EnumRule getRule() { return rule; }
		
		//ADD="+" | SUB="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getSUBHyphenMinusKeyword_1_0() { return cSUBHyphenMinusKeyword_1_0; }
	}
	public class MulDivModOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MulDivModOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTAsteriskKeyword_0_0 = (Keyword)cMULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODPercentSignKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MulDivModOpEnum:
		//	MULT="*" | DIV="/" | MOD="%";
		public EnumRule getRule() { return rule; }
		
		//MULT="*" | DIV="/" | MOD="%"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_0() { return cMULTEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMULTAsteriskKeyword_0_0() { return cMULTAsteriskKeyword_0_0; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		//"%"
		public Keyword getMODPercentSignKeyword_2_0() { return cMODPercentSignKeyword_2_0; }
	}
	public class IncDecOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IncDecOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCPlusSignPlusSignKeyword_0_0 = (Keyword)cINCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cDECEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IncDecOpEnum:
		//	INC="++" | DEC="--";
		public EnumRule getRule() { return rule; }
		
		//INC="++" | DEC="--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INC="++"
		public EnumLiteralDeclaration getINCEnumLiteralDeclaration_0() { return cINCEnumLiteralDeclaration_0; }
		
		//"++"
		public Keyword getINCPlusSignPlusSignKeyword_0_0() { return cINCPlusSignPlusSignKeyword_0_0; }
		
		//DEC="--"
		public EnumLiteralDeclaration getDECEnumLiteralDeclaration_1() { return cDECEnumLiteralDeclaration_1; }
		
		//"--"
		public Keyword getDECHyphenMinusHyphenMinusKeyword_1_0() { return cDECHyphenMinusHyphenMinusKeyword_1_0; }
	}
	public class BooleanLiteralEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BooleanLiteralEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanLiteralEnum:
		//	TRUE="true" | FALSE="false";
		public EnumRule getRule() { return rule; }
		
		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	public class SpecialExpressionTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SpecialExpressionTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUPEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUPERSuperKeyword_0_0 = (Keyword)cSUPEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTHISEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTHISThisKeyword_1_0 = (Keyword)cTHISEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SpecialExpressionTypeEnum:
		//	SUPER="super" | THIS="this";
		public EnumRule getRule() { return rule; }
		
		//SUPER="super" | THIS="this"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUPER="super"
		public EnumLiteralDeclaration getSUPEREnumLiteralDeclaration_0() { return cSUPEREnumLiteralDeclaration_0; }
		
		//"super"
		public Keyword getSUPERSuperKeyword_0_0() { return cSUPERSuperKeyword_0_0; }
		
		//THIS="this"
		public EnumLiteralDeclaration getTHISEnumLiteralDeclaration_1() { return cTHISEnumLiteralDeclaration_1; }
		
		//"this"
		public Keyword getTHISThisKeyword_1_0() { return cTHISThisKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final ContractElements pContract;
	private final DefinitionBodyElements pDefinitionBody;
	private final InheritanceSpecifierElements pInheritanceSpecifier;
	private final FunctionCallListArgumentsElements pFunctionCallListArguments;
	private final FunctionCallArgumentsElements pFunctionCallArguments;
	private final FunctionCallArgElements pFunctionCallArg;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final FunctionDefinitionOptionalElementElements pFunctionDefinitionOptionalElement;
	private final ConstElements pConst;
	private final VisibilitySpecifierElements pVisibilitySpecifier;
	private final StructDefinitionElements pStructDefinition;
	private final EnumDefinitionElements pEnumDefinition;
	private final EnumValueElements pEnumValue;
	private final VariableElements pVariable;
	private final VariableDeclarationElements pVariableDeclaration;
	private final StandardVariableDeclarationElements pStandardVariableDeclaration;
	private final VarVariableDeclarationElements pVarVariableDeclaration;
	private final VarVariableTupleVariableDeclarationElements pVarVariableTupleVariableDeclaration;
	private final VariableDeclarationOptionalElementElements pVariableDeclarationOptionalElement;
	private final IndexedSpeciferElements pIndexedSpecifer;
	private final ConstantSpecifierElements pConstantSpecifier;
	private final LocationSpecifierElements pLocationSpecifier;
	private final TypeElements pType;
	private final StandardTypeElements pStandardType;
	private final StandardTypeWithoutQualifiedIdentifierElements pStandardTypeWithoutQualifiedIdentifier;
	private final ElementaryTypeElements pElementaryType;
	private final MappingElements pMapping;
	private final ArrayDimensionsElements pArrayDimensions;
	private final VarTypeElements pVarType;
	private final TupleElements pTuple;
	private final TupleSeparatorElements pTupleSeparator;
	private final SimpleStatementElements pSimpleStatement;
	private final SimpleStatement2Elements pSimpleStatement2;
	private final ExpressionStatementElements pExpressionStatement;
	private final QualifiedIdentifierElements pQualifiedIdentifier;
	private final QualifierElements pQualifier;
	private final FieldElements pField;
	private final IndexElements pIndex;
	private final ArgumentsElements pArguments;
	private final ModifierElements pModifier;
	private final EventElements pEvent;
	private final ModifierInvocationElements pModifierInvocation;
	private final ParameterListElements pParameterList;
	private final ReturnsParameterListElements pReturnsParameterList;
	private final ReturnParameterDeclarationElements pReturnParameterDeclaration;
	private final StatementElements pStatement;
	private final DeleteStatementElements pDeleteStatement;
	private final IfStatementElements pIfStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final BodyElements pBody;
	private final ContinueStatementElements pContinueStatement;
	private final BreakStatementElements pBreakStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ThrowStatementElements pThrowStatement;
	private final PlaceHolderStatementElements pPlaceHolderStatement;
	private final ExpressionElements pExpression;
	private final SpecialExpressionElements pSpecialExpression;
	private final AssignmentElements pAssignment;
	private final BinaryExpressionElements pBinaryExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final BitOrElements pBitOr;
	private final BitXorElements pBitXor;
	private final BitAndElements pBitAnd;
	private final ShiftElements pShift;
	private final AddSubElements pAddSub;
	private final MulDivModElements pMulDivMod;
	private final ExponentElements pExponent;
	private final UnaryExpressionElements pUnaryExpression;
	private final NotExpressionElements pNotExpression;
	private final PreIncExpressionElements pPreIncExpression;
	private final PreDecExpressionElements pPreDecExpression;
	private final BinaryNotExpressionElements pBinaryNotExpression;
	private final SignExpressionElements pSignExpression;
	private final NewExpressionElements pNewExpression;
	private final PreExpressionElements pPreExpression;
	private final PostIncDecExpressionElements pPostIncDecExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralElements pLiteral;
	private final SpecialLiteralElements pSpecialLiteral;
	private final BooleanConstElements pBooleanConst;
	private final NumericLiteralElements pNumericLiteral;
	private final UnitTypesElements pUnitTypes;
	private final IntLiteralElements pIntLiteral;
	private final HexLiteralElements pHexLiteral;
	private final DecimalLiteralElements pDecimalLiteral;
	private final TerminalRule tHEX;
	private final TerminalRule tDECIMAL;
	private final StringLiteralElements pStringLiteral;
	private final TypeCastElements pTypeCast;
	private final ElementaryTypeNameEnumElements pElementaryTypeNameEnum;
	private final SimpleTypeDeclarationElements pSimpleTypeDeclaration;
	private final MapLocationLiteralElements pMapLocationLiteral;
	private final LocationSpecifierEnumElements pLocationSpecifierEnum;
	private final VisibilityEnumElements pVisibilityEnum;
	private final UnitsLiteralElements pUnitsLiteral;
	private final TimeUnitsLiteralElements pTimeUnitsLiteral;
	private final TerminalRule tBLOCK;
	private final TerminalRule tMSG;
	private final TerminalRule tTX;
	private final TerminalRule tNOW;
	private final AssignmentOpEnumElements eAssignmentOpEnum;
	private final EqualityOpEnumElements eEqualityOpEnum;
	private final ComparisonOpEnumElements eComparisonOpEnum;
	private final ShiftOpEnumElements eShiftOpEnum;
	private final AdditionOpEnumElements eAdditionOpEnum;
	private final MulDivModOpEnumElements eMulDivModOpEnum;
	private final IncDecOpEnumElements eIncDecOpEnum;
	private final BooleanLiteralEnumElements eBooleanLiteralEnum;
	private final SpecialExpressionTypeEnumElements eSpecialExpressionTypeEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OptGrammarGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pContract = new ContractElements();
		this.pDefinitionBody = new DefinitionBodyElements();
		this.pInheritanceSpecifier = new InheritanceSpecifierElements();
		this.pFunctionCallListArguments = new FunctionCallListArgumentsElements();
		this.pFunctionCallArguments = new FunctionCallArgumentsElements();
		this.pFunctionCallArg = new FunctionCallArgElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pFunctionDefinitionOptionalElement = new FunctionDefinitionOptionalElementElements();
		this.pConst = new ConstElements();
		this.pVisibilitySpecifier = new VisibilitySpecifierElements();
		this.pStructDefinition = new StructDefinitionElements();
		this.pEnumDefinition = new EnumDefinitionElements();
		this.pEnumValue = new EnumValueElements();
		this.pVariable = new VariableElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pStandardVariableDeclaration = new StandardVariableDeclarationElements();
		this.pVarVariableDeclaration = new VarVariableDeclarationElements();
		this.pVarVariableTupleVariableDeclaration = new VarVariableTupleVariableDeclarationElements();
		this.pVariableDeclarationOptionalElement = new VariableDeclarationOptionalElementElements();
		this.pIndexedSpecifer = new IndexedSpeciferElements();
		this.pConstantSpecifier = new ConstantSpecifierElements();
		this.pLocationSpecifier = new LocationSpecifierElements();
		this.pType = new TypeElements();
		this.pStandardType = new StandardTypeElements();
		this.pStandardTypeWithoutQualifiedIdentifier = new StandardTypeWithoutQualifiedIdentifierElements();
		this.pElementaryType = new ElementaryTypeElements();
		this.pMapping = new MappingElements();
		this.pArrayDimensions = new ArrayDimensionsElements();
		this.pVarType = new VarTypeElements();
		this.pTuple = new TupleElements();
		this.pTupleSeparator = new TupleSeparatorElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pSimpleStatement2 = new SimpleStatement2Elements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pQualifiedIdentifier = new QualifiedIdentifierElements();
		this.pQualifier = new QualifierElements();
		this.pField = new FieldElements();
		this.pIndex = new IndexElements();
		this.pArguments = new ArgumentsElements();
		this.pModifier = new ModifierElements();
		this.pEvent = new EventElements();
		this.pModifierInvocation = new ModifierInvocationElements();
		this.pParameterList = new ParameterListElements();
		this.pReturnsParameterList = new ReturnsParameterListElements();
		this.pReturnParameterDeclaration = new ReturnParameterDeclarationElements();
		this.pStatement = new StatementElements();
		this.pDeleteStatement = new DeleteStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pBody = new BodyElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pThrowStatement = new ThrowStatementElements();
		this.pPlaceHolderStatement = new PlaceHolderStatementElements();
		this.pExpression = new ExpressionElements();
		this.pSpecialExpression = new SpecialExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pBitOr = new BitOrElements();
		this.pBitXor = new BitXorElements();
		this.pBitAnd = new BitAndElements();
		this.pShift = new ShiftElements();
		this.pAddSub = new AddSubElements();
		this.pMulDivMod = new MulDivModElements();
		this.pExponent = new ExponentElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pPreIncExpression = new PreIncExpressionElements();
		this.pPreDecExpression = new PreDecExpressionElements();
		this.pBinaryNotExpression = new BinaryNotExpressionElements();
		this.pSignExpression = new SignExpressionElements();
		this.pNewExpression = new NewExpressionElements();
		this.pPreExpression = new PreExpressionElements();
		this.pPostIncDecExpression = new PostIncDecExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pSpecialLiteral = new SpecialLiteralElements();
		this.pBooleanConst = new BooleanConstElements();
		this.pNumericLiteral = new NumericLiteralElements();
		this.pUnitTypes = new UnitTypesElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pHexLiteral = new HexLiteralElements();
		this.pDecimalLiteral = new DecimalLiteralElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.HEX");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.DECIMAL");
		this.pStringLiteral = new StringLiteralElements();
		this.pTypeCast = new TypeCastElements();
		this.pElementaryTypeNameEnum = new ElementaryTypeNameEnumElements();
		this.pSimpleTypeDeclaration = new SimpleTypeDeclarationElements();
		this.pMapLocationLiteral = new MapLocationLiteralElements();
		this.pLocationSpecifierEnum = new LocationSpecifierEnumElements();
		this.pVisibilityEnum = new VisibilityEnumElements();
		this.pUnitsLiteral = new UnitsLiteralElements();
		this.pTimeUnitsLiteral = new TimeUnitsLiteralElements();
		this.tBLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BLOCK");
		this.tMSG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MSG");
		this.tTX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TX");
		this.tNOW = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NOW");
		this.eAssignmentOpEnum = new AssignmentOpEnumElements();
		this.eEqualityOpEnum = new EqualityOpEnumElements();
		this.eComparisonOpEnum = new ComparisonOpEnumElements();
		this.eShiftOpEnum = new ShiftOpEnumElements();
		this.eAdditionOpEnum = new AdditionOpEnumElements();
		this.eMulDivModOpEnum = new MulDivModOpEnumElements();
		this.eIncDecOpEnum = new IncDecOpEnumElements();
		this.eBooleanLiteralEnum = new BooleanLiteralEnumElements();
		this.eSpecialExpressionTypeEnum = new SpecialExpressionTypeEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.unicam.myGrammar.OptGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// ---------- TO DO ----------
	///*
	// * Controllare gli array
	// * Finire i validators
	// */ // ---------- TO DO ----------
	//Model:
	//	operations+=Contract*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	///*
	// * Solidity:
	// * (importDirective+=ImportDirective |
	// * contract+=Contract |
	// * library+=Library)
	// * 
	// * ImportDirective:
	// * "import" importURI=STRING ";" |
	// * "import" "*" "as" unitAlias=ID "from" importURI=STRING ";" |
	// * "import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";";
	// * 
	// * SymbolAlias:
	// * symbol=ID "as" alias=I
	// * 
	// * ContractOrLibrary:
	// * Contract |
	// * Library;
	// */ Contract:
	//	"contract" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
	//	inheritanceSpecifiers+=InheritanceSpecifier)*)? body=DefinitionBody;
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	///*
	// * Library:
	// * "library" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier
	// * ("," inheritanceSpecifiers+=InheritanceSpecifier)*)? body=DefinitionBody;
	// */ DefinitionBody:
	//	{DefinitionBody}
	//	"{" (functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition |
	//	variables+=VariableDeclaration ";" | modifiers+=Modifier | events+=Event)*
	//	"}";
	public DefinitionBodyElements getDefinitionBodyAccess() {
		return pDefinitionBody;
	}
	
	public ParserRule getDefinitionBodyRule() {
		return getDefinitionBodyAccess().getRule();
	}
	
	//InheritanceSpecifier:
	//	superType=[Contract] args=FunctionCallListArguments?;
	public InheritanceSpecifierElements getInheritanceSpecifierAccess() {
		return pInheritanceSpecifier;
	}
	
	public ParserRule getInheritanceSpecifierRule() {
		return getInheritanceSpecifierAccess().getRule();
	}
	
	//FunctionCallListArguments:
	//	"(" {FunctionCallListArguments} (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public FunctionCallListArgumentsElements getFunctionCallListArgumentsAccess() {
		return pFunctionCallListArguments;
	}
	
	public ParserRule getFunctionCallListArgumentsRule() {
		return getFunctionCallListArgumentsAccess().getRule();
	}
	
	//// call({arg1: 1, arg2: 2})
	//FunctionCallArguments:
	//	"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")" |
	//	FunctionCallListArguments;
	public FunctionCallArgumentsElements getFunctionCallArgumentsAccess() {
		return pFunctionCallArguments;
	}
	
	public ParserRule getFunctionCallArgumentsRule() {
		return getFunctionCallArgumentsAccess().getRule();
	}
	
	//FunctionCallArg:
	//	name=ID ":" expr=Expression;
	public FunctionCallArgElements getFunctionCallArgAccess() {
		return pFunctionCallArg;
	}
	
	public ParserRule getFunctionCallArgRule() {
		return getFunctionCallArgAccess().getRule();
	}
	
	//// Anonymous function allowed when "name" is not specified.
	//FunctionDefinition:
	//	"function" {FunctionDefinition} name=ID?
	//	parameters=ParameterList
	//	optionalElements+=FunctionDefinitionOptionalElement* ("returns" returnParameters=ReturnsParameterList)? (block=Body |
	//	";");
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//FunctionDefinitionOptionalElement:
	//	Const | ModifierInvocation | VisibilitySpecifier;
	public FunctionDefinitionOptionalElementElements getFunctionDefinitionOptionalElementAccess() {
		return pFunctionDefinitionOptionalElement;
	}
	
	public ParserRule getFunctionDefinitionOptionalElementRule() {
		return getFunctionDefinitionOptionalElementAccess().getRule();
	}
	
	//Const:
	//	"constant" {Const};
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//VisibilitySpecifier:
	//	visibility=VisibilityEnum;
	public VisibilitySpecifierElements getVisibilitySpecifierAccess() {
		return pVisibilitySpecifier;
	}
	
	public ParserRule getVisibilitySpecifierRule() {
		return getVisibilitySpecifierAccess().getRule();
	}
	
	//StructDefinition:
	//	"struct" name=ID "{" (members+=VariableDeclaration ";")* "}";
	public StructDefinitionElements getStructDefinitionAccess() {
		return pStructDefinition;
	}
	
	public ParserRule getStructDefinitionRule() {
		return getStructDefinitionAccess().getRule();
	}
	
	//EnumDefinition:
	//	"enum" name=ID "{" (members+=EnumValue ("," members+=EnumValue)*)? "}";
	public EnumDefinitionElements getEnumDefinitionAccess() {
		return pEnumDefinition;
	}
	
	public ParserRule getEnumDefinitionRule() {
		return getEnumDefinitionAccess().getRule();
	}
	
	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//// Variable Declarations
	////----------------------------------------------------------------
	//VariableDeclaration Statement:
	//	StandardVariableDeclaration | VarVariableDeclaration | VarVariableTupleVariableDeclaration;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//StandardVariableDeclaration:
	//	type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
	//	expression=Expression)?;
	public StandardVariableDeclarationElements getStandardVariableDeclarationAccess() {
		return pStandardVariableDeclaration;
	}
	
	public ParserRule getStandardVariableDeclarationRule() {
		return getStandardVariableDeclarationAccess().getRule();
	}
	
	//VarVariableDeclaration:
	//	varType=VarType variable=Variable ("=" expression=Expression)?;
	public VarVariableDeclarationElements getVarVariableDeclarationAccess() {
		return pVarVariableDeclaration;
	}
	
	public ParserRule getVarVariableDeclarationRule() {
		return getVarVariableDeclarationAccess().getRule();
	}
	
	//VarVariableTupleVariableDeclaration:
	//	varType=VarType tuple=Tuple ("=" expression=Expression)?;
	public VarVariableTupleVariableDeclarationElements getVarVariableTupleVariableDeclarationAccess() {
		return pVarVariableTupleVariableDeclaration;
	}
	
	public ParserRule getVarVariableTupleVariableDeclarationRule() {
		return getVarVariableTupleVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationOptionalElement:
	//	VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier;
	public VariableDeclarationOptionalElementElements getVariableDeclarationOptionalElementAccess() {
		return pVariableDeclarationOptionalElement;
	}
	
	public ParserRule getVariableDeclarationOptionalElementRule() {
		return getVariableDeclarationOptionalElementAccess().getRule();
	}
	
	//IndexedSpecifer:
	//	"indexed" {IndexedSpecifer};
	public IndexedSpeciferElements getIndexedSpeciferAccess() {
		return pIndexedSpecifer;
	}
	
	public ParserRule getIndexedSpeciferRule() {
		return getIndexedSpeciferAccess().getRule();
	}
	
	//ConstantSpecifier:
	//	"constant" {ConstantSpecifier};
	public ConstantSpecifierElements getConstantSpecifierAccess() {
		return pConstantSpecifier;
	}
	
	public ParserRule getConstantSpecifierRule() {
		return getConstantSpecifierAccess().getRule();
	}
	
	//LocationSpecifier:
	//	location=LocationSpecifierEnum;
	public LocationSpecifierElements getLocationSpecifierAccess() {
		return pLocationSpecifier;
	}
	
	public ParserRule getLocationSpecifierRule() {
		return getLocationSpecifierAccess().getRule();
	}
	
	//// Types
	////----------------------------------------------------------------
	//Type:
	//	StandardType | isVarType?=VarType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//StandardType:
	//	ElementaryType dimension=ArrayDimensions? | Mapping | QualifiedIdentifier;
	public StandardTypeElements getStandardTypeAccess() {
		return pStandardType;
	}
	
	public ParserRule getStandardTypeRule() {
		return getStandardTypeAccess().getRule();
	}
	
	//StandardTypeWithoutQualifiedIdentifier:
	//	ElementaryType dimension=ArrayDimensions? | Mapping;
	public StandardTypeWithoutQualifiedIdentifierElements getStandardTypeWithoutQualifiedIdentifierAccess() {
		return pStandardTypeWithoutQualifiedIdentifier;
	}
	
	public ParserRule getStandardTypeWithoutQualifiedIdentifierRule() {
		return getStandardTypeWithoutQualifiedIdentifierAccess().getRule();
	}
	
	//ElementaryType:
	//	name=ElementaryTypeNameEnum;
	public ElementaryTypeElements getElementaryTypeAccess() {
		return pElementaryType;
	}
	
	public ParserRule getElementaryTypeRule() {
		return getElementaryTypeAccess().getRule();
	}
	
	//Mapping:
	//	"mapping" "(" keyType=ElementaryTypeNameEnum "=>" valueType=Type ")";
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//ArrayDimensions:
	//	"[" {ArrayDimensions} value+=Expression? "]" ("[" value+=Expression? "]")*;
	public ArrayDimensionsElements getArrayDimensionsAccess() {
		return pArrayDimensions;
	}
	
	public ParserRule getArrayDimensionsRule() {
		return getArrayDimensionsAccess().getRule();
	}
	
	//VarType:
	//	"var";
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//// Tuples
	////----------------------------------------------------------------
	//Tuple:
	//	"(" {Tuple} (members+=Expression? (members+=TupleSeparator members+=Expression?)+)? ")";
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//TupleSeparator:
	//	"," {TupleSeparator};
	public TupleSeparatorElements getTupleSeparatorAccess() {
		return pTupleSeparator;
	}
	
	public ParserRule getTupleSeparatorRule() {
		return getTupleSeparatorAccess().getRule();
	}
	
	//// SimpleStatement
	////----------------------------------------------------------------
	////SimpleStatement:
	////    SimpleStatement2 ";"
	////;
	//SimpleStatement:
	//	(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
	//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
	//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
	//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement) semicolon?=";";
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//SimpleStatement2:
	//	StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
	//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
	//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
	//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement;
	public SimpleStatement2Elements getSimpleStatement2Access() {
		return pSimpleStatement2;
	}
	
	public ParserRule getSimpleStatement2Rule() {
		return getSimpleStatement2Access().getRule();
	}
	
	//ExpressionStatement:
	//	expression=Expression;
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//QualifiedIdentifier:
	//	identifier=ID qualifiers+=Qualifier*;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return pQualifiedIdentifier;
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}
	
	//Qualifier:
	//	Field | Index | Arguments;
	public QualifierElements getQualifierAccess() {
		return pQualifier;
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}
	
	//Field:
	//	"." field=ID;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Index:
	//	"[" {Index} value=Expression? "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Arguments:
	//	arguments=FunctionCallArguments;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Modifier:
	//	"modifier" name=ID parameters=ParameterList? block=Body;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//Event:
	//	"event" name=ID parameters=ParameterList? isAnonymous?="anonymous"? ";";
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//ModifierInvocation:
	//	name=[Modifier] args=FunctionCallListArguments?;
	public ModifierInvocationElements getModifierInvocationAccess() {
		return pModifierInvocation;
	}
	
	public ParserRule getModifierInvocationRule() {
		return getModifierInvocationAccess().getRule();
	}
	
	//ParameterList:
	//	"(" {ParameterList} (parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)? ")";
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ReturnsParameterList:
	//	"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
	//	")";
	public ReturnsParameterListElements getReturnsParameterListAccess() {
		return pReturnsParameterList;
	}
	
	public ParserRule getReturnsParameterListRule() {
		return getReturnsParameterListAccess().getRule();
	}
	
	//ReturnParameterDeclaration:
	//	typeRef=Type variable=Variable?;
	public ReturnParameterDeclarationElements getReturnParameterDeclarationAccess() {
		return pReturnParameterDeclaration;
	}
	
	public ParserRule getReturnParameterDeclarationRule() {
		return getReturnParameterDeclarationAccess().getRule();
	}
	
	//Statement:
	//	IfStatement | WhileStatement | ForStatement | Body | PlaceHolderStatement | (ContinueStatement | BreakStatement |
	//	ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//DeleteStatement:
	//	"delete" variable=QualifiedIdentifier ";";
	public DeleteStatementElements getDeleteStatementAccess() {
		return pDeleteStatement;
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}
	
	//IfStatement:
	//	"if" "(" condition=Expression ")" trueBody=Statement (=> "else" falseBody=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	"while" "(" condition=Expression ")" body=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ForStatement:
	//	"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=Expression? ";"
	//	loopExpression=ExpressionStatement? ")" body=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//Body:
	//	"{" {Block} (statements+=Statement statements+=Statement*)? "}";
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//ContinueStatement:
	//	"continue" {Continue} ";";
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}
	
	//BreakStatement:
	//	"break" {BreakStatement} ";";
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	"return" {ReturnStatement} expression=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ThrowStatement:
	//	"throw" {ThrowStatement} ";";
	public ThrowStatementElements getThrowStatementAccess() {
		return pThrowStatement;
	}
	
	public ParserRule getThrowStatementRule() {
		return getThrowStatementAccess().getRule();
	}
	
	//// Only allowed in a Modifier DAF
	//PlaceHolderStatement:
	//	"_" {PlaceHolderStatement};
	public PlaceHolderStatementElements getPlaceHolderStatementAccess() {
		return pPlaceHolderStatement;
	}
	
	public ParserRule getPlaceHolderStatementRule() {
		return getPlaceHolderStatementAccess().getRule();
	}
	
	//Expression:
	//	Assignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//SpecialExpression:
	//	type=SpecialExpressionTypeEnum fieldOrMethod=Field? qualifiers+=(Index | Arguments)*;
	public SpecialExpressionElements getSpecialExpressionAccess() {
		return pSpecialExpression;
	}
	
	public ParserRule getSpecialExpressionRule() {
		return getSpecialExpressionAccess().getRule();
	}
	
	//// Right associative
	//Assignment Expression:
	//	BinaryExpression ({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression |
	//	{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//BinaryExpression Expression:
	//	Or;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//// Precedence: 4, Left associative
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//// Precedence: 5, Left associative
	//And Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//// Precedence: 6, Left associative
	//Equality Expression:
	//	Comparison ({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//// Precedence: 7, Left associative
	//Comparison Expression:
	//	BitOr ({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//// Precedence: 8, Left associative
	//BitOr Expression:
	//	BitXor ({BitOr.left=current} "|" right=BitXor)*;
	public BitOrElements getBitOrAccess() {
		return pBitOr;
	}
	
	public ParserRule getBitOrRule() {
		return getBitOrAccess().getRule();
	}
	
	//// Precedence: 9, Left associative
	//BitXor Expression:
	//	BitAnd ({BitXor.left=current} "^" right=BitAnd)*;
	public BitXorElements getBitXorAccess() {
		return pBitXor;
	}
	
	public ParserRule getBitXorRule() {
		return getBitXorAccess().getRule();
	}
	
	//// Precedence: 10, Left associative
	//BitAnd Expression:
	//	Shift ({BitAnd.left=current} "&" right=Shift)*;
	public BitAndElements getBitAndAccess() {
		return pBitAnd;
	}
	
	public ParserRule getBitAndRule() {
		return getBitAndAccess().getRule();
	}
	
	//// Precedence: 11, Left associative
	//Shift Expression:
	//	AddSub ({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*;
	public ShiftElements getShiftAccess() {
		return pShift;
	}
	
	public ParserRule getShiftRule() {
		return getShiftAccess().getRule();
	}
	
	//// Precedence: 12, Left associative
	//AddSub Expression:
	//	MulDivMod => ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*;
	public AddSubElements getAddSubAccess() {
		return pAddSub;
	}
	
	public ParserRule getAddSubRule() {
		return getAddSubAccess().getRule();
	}
	
	//// Precedence: 13, Left associative
	//MulDivMod Expression:
	//	Exponent ({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*;
	public MulDivModElements getMulDivModAccess() {
		return pMulDivMod;
	}
	
	public ParserRule getMulDivModRule() {
		return getMulDivModAccess().getRule();
	}
	
	//// Precedence: 14, Left associative
	//Exponent Expression:
	//	UnaryExpression ({Exponent.left=current} "**" right=UnaryExpression)*;
	public ExponentElements getExponentAccess() {
		return pExponent;
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}
	
	//UnaryExpression Expression:
	//	NotExpression | BinaryNotExpression | SignExpression | NewExpression | PreExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//NotExpression:
	//	"!" expression=UnaryExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//PreIncExpression:
	//	expression=PostIncDecExpression;
	public PreIncExpressionElements getPreIncExpressionAccess() {
		return pPreIncExpression;
	}
	
	public ParserRule getPreIncExpressionRule() {
		return getPreIncExpressionAccess().getRule();
	}
	
	//PreDecExpression:
	//	expression=PostIncDecExpression;
	public PreDecExpressionElements getPreDecExpressionAccess() {
		return pPreDecExpression;
	}
	
	public ParserRule getPreDecExpressionRule() {
		return getPreDecExpressionAccess().getRule();
	}
	
	//BinaryNotExpression:
	//	"~" expression=UnaryExpression;
	public BinaryNotExpressionElements getBinaryNotExpressionAccess() {
		return pBinaryNotExpression;
	}
	
	public ParserRule getBinaryNotExpressionRule() {
		return getBinaryNotExpressionAccess().getRule();
	}
	
	//SignExpression:
	//	signOp=("+" | "-") expression=UnaryExpression;
	public SignExpressionElements getSignExpressionAccess() {
		return pSignExpression;
	}
	
	public ParserRule getSignExpressionRule() {
		return getSignExpressionAccess().getRule();
	}
	
	//NewExpression:
	//	"new" contract=[Contract] args=FunctionCallListArguments;
	public NewExpressionElements getNewExpressionAccess() {
		return pNewExpression;
	}
	
	public ParserRule getNewExpressionRule() {
		return getNewExpressionAccess().getRule();
	}
	
	//PreExpression Expression:
	//	PostIncDecExpression | "++" PostIncDecExpression {PreIncExpression.expression=current} | "--" PostIncDecExpression
	//	{PreDecExpression.expression=current};
	public PreExpressionElements getPreExpressionAccess() {
		return pPreExpression;
	}
	
	public ParserRule getPreExpressionRule() {
		return getPreExpressionAccess().getRule();
	}
	
	//PostIncDecExpression Expression:
	//	PrimaryExpression ({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*;
	public PostIncDecExpressionElements getPostIncDecExpressionAccess() {
		return pPostIncDecExpression;
	}
	
	public ParserRule getPostIncDecExpressionRule() {
		return getPostIncDecExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	SpecialExpression | QualifiedIdentifier | Literal | TypeCast |
	//	"(" Expression ({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)? ")" |
	//	"(" TupleSeparator ({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*)
	//	")" |
	//	"(" ")" {Tuple};
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Literal:
	//	SpecialLiteral | BooleanConst | NumericLiteral | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//SpecialLiteral:
	//	name=(BLOCK
	//	| MSG
	//	| TX
	//	| NOW);
	public SpecialLiteralElements getSpecialLiteralAccess() {
		return pSpecialLiteral;
	}
	
	public ParserRule getSpecialLiteralRule() {
		return getSpecialLiteralAccess().getRule();
	}
	
	//BooleanConst:
	//	value=BooleanLiteralEnum;
	public BooleanConstElements getBooleanConstAccess() {
		return pBooleanConst;
	}
	
	public ParserRule getBooleanConstRule() {
		return getBooleanConstAccess().getRule();
	}
	
	//NumericLiteral:
	//	(intValue=IntLiteral
	//	| hexValue=HexLiteral
	//	| decimalValue=DecimalLiteral) etherUnit=UnitTypes?;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}
	
	//UnitTypes:
	//	time=TimeUnitsLiteral
	//	| units=UnitsLiteral;
	public UnitTypesElements getUnitTypesAccess() {
		return pUnitTypes;
	}
	
	public ParserRule getUnitTypesRule() {
		return getUnitTypesAccess().getRule();
	}
	
	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//HexLiteral:
	//	value=HEX;
	public HexLiteralElements getHexLiteralAccess() {
		return pHexLiteral;
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}
	
	//DecimalLiteral:
	//	value=DECIMAL;
	public DecimalLiteralElements getDecimalLiteralAccess() {
		return pDecimalLiteral;
	}
	
	public ParserRule getDecimalLiteralRule() {
		return getDecimalLiteralAccess().getRule();
	}
	
	//terminal HEX:
	//	"0x" ("0".."9" | "A".."F" | "a".."f")+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal DECIMAL returns ecore::EDouble:
	//	INT ("." INT);
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//TypeCast:
	//	value=ElementaryTypeNameEnum "(" expression=Expression ")";
	public TypeCastElements getTypeCastAccess() {
		return pTypeCast;
	}
	
	public ParserRule getTypeCastRule() {
		return getTypeCastAccess().getRule();
	}
	
	//ElementaryTypeNameEnum:
	//	type=(
	//	//INT
	//	"int" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" |
	//	"int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" |
	//	"int178" | "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" |
	//	"int256") | type=(
	//	// UINT
	//	"uint" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" |
	//	"uint80" | "uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" |
	//	"uint160" | "uint168" | "uint178" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" |
	//	"uint232" | "uint240" | "uint248" | "uint256") | type=(
	//	// BYTES
	//	"bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" | "bytes10" |
	//	"bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19" |
	//	"bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" |
	//	"bytes29" | "bytes30" | "bytes31" | "bytes32" | "bytes" | "byte") | type=("address" | "real" | "ureal");
	public ElementaryTypeNameEnumElements getElementaryTypeNameEnumAccess() {
		return pElementaryTypeNameEnum;
	}
	
	public ParserRule getElementaryTypeNameEnumRule() {
		return getElementaryTypeNameEnumAccess().getRule();
	}
	
	//SimpleTypeDeclaration:
	//	type=("string" | "bool");
	public SimpleTypeDeclarationElements getSimpleTypeDeclarationAccess() {
		return pSimpleTypeDeclaration;
	}
	
	public ParserRule getSimpleTypeDeclarationRule() {
		return getSimpleTypeDeclarationAccess().getRule();
	}
	
	//MapLocationLiteral:
	//	"storage";
	public MapLocationLiteralElements getMapLocationLiteralAccess() {
		return pMapLocationLiteral;
	}
	
	public ParserRule getMapLocationLiteralRule() {
		return getMapLocationLiteralAccess().getRule();
	}
	
	//LocationSpecifierEnum:
	//	type=("memory" | MapLocationLiteral | "calldata");
	public LocationSpecifierEnumElements getLocationSpecifierEnumAccess() {
		return pLocationSpecifierEnum;
	}
	
	public ParserRule getLocationSpecifierEnumRule() {
		return getLocationSpecifierEnumAccess().getRule();
	}
	
	//VisibilityEnum:
	//	type=("public" | "internal" | "private" | "external");
	public VisibilityEnumElements getVisibilityEnumAccess() {
		return pVisibilityEnum;
	}
	
	public ParserRule getVisibilityEnumRule() {
		return getVisibilityEnumAccess().getRule();
	}
	
	//UnitsLiteral:
	//	value=("wei" | "szabo" | "finney" | "ether");
	public UnitsLiteralElements getUnitsLiteralAccess() {
		return pUnitsLiteral;
	}
	
	public ParserRule getUnitsLiteralRule() {
		return getUnitsLiteralAccess().getRule();
	}
	
	//TimeUnitsLiteral:
	//	value=("seconds" | "minutes" | "hours" | "days" | "weeks" | "years");
	public TimeUnitsLiteralElements getTimeUnitsLiteralAccess() {
		return pTimeUnitsLiteral;
	}
	
	public ParserRule getTimeUnitsLiteralRule() {
		return getTimeUnitsLiteralAccess().getRule();
	}
	
	//terminal BLOCK:
	//	"block." ("coinbase" | "difficulty" | "gaslimit" | "number" | "timestamp");
	public TerminalRule getBLOCKRule() {
		return tBLOCK;
	}
	
	//terminal MSG:
	//	"msg." ("data" | "gas" | "sender" | "sig" | "value");
	public TerminalRule getMSGRule() {
		return tMSG;
	}
	
	//terminal TX:
	//	"tx." ("gasprice" | "origin");
	public TerminalRule getTXRule() {
		return tTX;
	}
	
	//terminal NOW:
	//	"now";
	public TerminalRule getNOWRule() {
		return tNOW;
	}
	
	//enum AssignmentOpEnum:
	//	ASSIGN="=" | ASSIGN_OR="|=" | ASSIGN_XOR="^=" | ASSIGN_AND="&=" | ASSIGN_SHIFT_LEFT="<<=" | ASSIGN_SHIFT_RIGHT=">>="
	//	| ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" | ASSIGN_ADD="+=" | ASSIGN_SUB="-=" | ASSIGN_MULT="*=" | ASSIGN_DIV="/=" |
	//	ASSIGN_MOD="%=";
	public AssignmentOpEnumElements getAssignmentOpEnumAccess() {
		return eAssignmentOpEnum;
	}
	
	public EnumRule getAssignmentOpEnumRule() {
		return getAssignmentOpEnumAccess().getRule();
	}
	
	//enum EqualityOpEnum:
	//	EQ="==" | NOTEQ="!=";
	public EqualityOpEnumElements getEqualityOpEnumAccess() {
		return eEqualityOpEnum;
	}
	
	public EnumRule getEqualityOpEnumRule() {
		return getEqualityOpEnumAccess().getRule();
	}
	
	//enum ComparisonOpEnum:
	//	LT="<" | GT=">" | LTE="<=" | GTE=">=" | IN="in";
	public ComparisonOpEnumElements getComparisonOpEnumAccess() {
		return eComparisonOpEnum;
	}
	
	public EnumRule getComparisonOpEnumRule() {
		return getComparisonOpEnumAccess().getRule();
	}
	
	//enum ShiftOpEnum:
	//	LEFT_SHIFT="<<" | RIGHT_SHIFT=">>" | ARITHMETIC_RIGHT_SHIFT=">>>";
	public ShiftOpEnumElements getShiftOpEnumAccess() {
		return eShiftOpEnum;
	}
	
	public EnumRule getShiftOpEnumRule() {
		return getShiftOpEnumAccess().getRule();
	}
	
	//enum AdditionOpEnum:
	//	ADD="+" | SUB="-";
	public AdditionOpEnumElements getAdditionOpEnumAccess() {
		return eAdditionOpEnum;
	}
	
	public EnumRule getAdditionOpEnumRule() {
		return getAdditionOpEnumAccess().getRule();
	}
	
	//enum MulDivModOpEnum:
	//	MULT="*" | DIV="/" | MOD="%";
	public MulDivModOpEnumElements getMulDivModOpEnumAccess() {
		return eMulDivModOpEnum;
	}
	
	public EnumRule getMulDivModOpEnumRule() {
		return getMulDivModOpEnumAccess().getRule();
	}
	
	//enum IncDecOpEnum:
	//	INC="++" | DEC="--";
	public IncDecOpEnumElements getIncDecOpEnumAccess() {
		return eIncDecOpEnum;
	}
	
	public EnumRule getIncDecOpEnumRule() {
		return getIncDecOpEnumAccess().getRule();
	}
	
	//enum BooleanLiteralEnum:
	//	TRUE="true" | FALSE="false";
	public BooleanLiteralEnumElements getBooleanLiteralEnumAccess() {
		return eBooleanLiteralEnum;
	}
	
	public EnumRule getBooleanLiteralEnumRule() {
		return getBooleanLiteralEnumAccess().getRule();
	}
	
	//enum SpecialExpressionTypeEnum:
	//	SUPER="super" | THIS="this";
	public SpecialExpressionTypeEnumElements getSpecialExpressionTypeEnumAccess() {
		return eSpecialExpressionTypeEnum;
	}
	
	public EnumRule getSpecialExpressionTypeEnumRule() {
		return getSpecialExpressionTypeEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
