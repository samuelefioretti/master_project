/*
 * generated by Xtext 2.19.0
 */
package org.unicam.myGrammar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class OptGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Model");
		private final Assignment cOperationsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cOperationsContractParserRuleCall_0 = (RuleCall)cOperationsAssignment.eContents().get(0);
		
		//// ---------- TO DO ----------
		///*
		// * Controllare gli array
		// * Controllare le strutture
		// * Controllare le functionCall
		// */ // ---------- TO DO ----------
		//// ---------- Old grammar ----------
		///*
		// * Solidity:
		// * (
		// * importDirective+=ImportDirective |
		// * contract+=Contract
		// * )*
		// * ;
		// * 
		// * ImportDirective:
		// * "import" importURI=STRING ";" |
		// * "import" "*" "as" unitAlias=ID "from" importURI=STRING ";" |
		// * "import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";"
		// * ;
		// * 
		// * SymbolAlias:
		// * symbol=ID "as" alias=ID
		// * ;
		// * 
		// * Contract:
		// * "contract" name=ID (
		// * inheritanceSpecifiers+=InheritanceSpecifier ("," inheritanceSpecifiers+=InheritanceSpecifier)*
		// * )? body=DefinitionBody
		// * ;
		// * 
		// * InheritanceSpecifier:
		// * SuperType=Contract (args=FunctionCallListArguments)?
		// * ;
		// * 
		// * DefinitionBody:
		// * {DefinitionBody} "{" (
		// * functions+=FunctionDefinition |
		// * structs+=StructDefinition |
		// * enums+=EnumDefinition |
		// * variables+=VariableDeclaration ";" |
		// * modifiers+=Modifier |
		// * events+=Event
		// * )* "}"
		// * ;
		// */ // ---------- End Old grammar ----------
		//// ---------- New grammar ----------
		//Model:
		//	operations+=Contract*;
		@Override public ParserRule getRule() { return rule; }
		
		//operations+=Contract*
		public Assignment getOperationsAssignment() { return cOperationsAssignment; }
		
		//Contract
		public RuleCall getOperationsContractParserRuleCall_0() { return cOperationsContractParserRuleCall_0; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Assignment cBlocksAssignment_3_0_0 = (Assignment)cGroup_3_0.eContents().get(0);
		private final RuleCall cBlocksDeclarationParserRuleCall_3_0_0_0 = (RuleCall)cBlocksAssignment_3_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_0_1 = (Keyword)cGroup_3_0.eContents().get(1);
		private final Assignment cBlocksAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cBlocksFunctionDefinitionParserRuleCall_3_1_0 = (RuleCall)cBlocksAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Contract:
		//	"contract" name=ID "{" (blocks+=Declaration ";" | blocks+=FunctionDefinition)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"contract" name=ID "{" (blocks+=Declaration ";" | blocks+=FunctionDefinition)* "}"
		public Group getGroup() { return cGroup; }
		
		//"contract"
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(blocks+=Declaration ";" | blocks+=FunctionDefinition)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//blocks+=Declaration ";"
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//blocks+=Declaration
		public Assignment getBlocksAssignment_3_0_0() { return cBlocksAssignment_3_0_0; }
		
		//Declaration
		public RuleCall getBlocksDeclarationParserRuleCall_3_0_0_0() { return cBlocksDeclarationParserRuleCall_3_0_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_0_1() { return cSemicolonKeyword_3_0_1; }
		
		//blocks+=FunctionDefinition
		public Assignment getBlocksAssignment_3_1() { return cBlocksAssignment_3_1; }
		
		//FunctionDefinition
		public RuleCall getBlocksFunctionDefinitionParserRuleCall_3_1_0() { return cBlocksFunctionDefinitionParserRuleCall_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFunctionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStructDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Declaration:
		//	FunctionDeclaration | StructDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//FunctionDeclaration | StructDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_0() { return cFunctionDeclarationParserRuleCall_0; }
		
		//StructDeclaration
		public RuleCall getStructDeclarationParserRuleCall_1() { return cStructDeclarationParserRuleCall_1; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionParameterDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionDeclaration:
		//	EnumDefinition | FunctionParameterDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//EnumDefinition | FunctionParameterDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EnumDefinition
		public RuleCall getEnumDefinitionParserRuleCall_0() { return cEnumDefinitionParserRuleCall_0; }
		
		//FunctionParameterDeclaration
		public RuleCall getFunctionParameterDeclarationParserRuleCall_1() { return cFunctionParameterDeclarationParserRuleCall_1; }
	}
	public class StructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cStructKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cMembersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cMembersDeclarationParserRuleCall_4_0_0 = (RuleCall)cMembersAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//StructDeclaration:
		//	visibility=VisibilityEnum? "struct" name=ID "{" (members+=Declaration ";")* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityEnum? "struct" name=ID "{" (members+=Declaration ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityEnum?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_0_0() { return cVisibilityVisibilityEnumParserRuleCall_0_0; }
		
		//"struct"
		public Keyword getStructKeyword_1() { return cStructKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(members+=Declaration ";")*
		public Group getGroup_4() { return cGroup_4; }
		
		//members+=Declaration
		public Assignment getMembersAssignment_4_0() { return cMembersAssignment_4_0; }
		
		//Declaration
		public RuleCall getMembersDeclarationParserRuleCall_4_0_0() { return cMembersDeclarationParserRuleCall_4_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class EnumDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EnumDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVisibilityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_0_0 = (RuleCall)cVisibilityAssignment_0.eContents().get(0);
		private final Keyword cEnumKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMembersEnumValueParserRuleCall_4_0 = (RuleCall)cMembersAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMembersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMembersEnumValueParserRuleCall_5_1_0 = (RuleCall)cMembersAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumDefinition:
		//	visibility=VisibilityEnum? "enum" name=ID "{" members+=EnumValue ("," members+=EnumValue)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityEnum? "enum" name=ID "{" members+=EnumValue ("," members+=EnumValue)* "}"
		public Group getGroup() { return cGroup; }
		
		//visibility=VisibilityEnum?
		public Assignment getVisibilityAssignment_0() { return cVisibilityAssignment_0; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_0_0() { return cVisibilityVisibilityEnumParserRuleCall_0_0; }
		
		//"enum"
		public Keyword getEnumKeyword_1() { return cEnumKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//members+=EnumValue
		public Assignment getMembersAssignment_4() { return cMembersAssignment_4; }
		
		//EnumValue
		public RuleCall getMembersEnumValueParserRuleCall_4_0() { return cMembersEnumValueParserRuleCall_4_0; }
		
		//("," members+=EnumValue)*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//members+=EnumValue
		public Assignment getMembersAssignment_5_1() { return cMembersAssignment_5_1; }
		
		//EnumValue
		public RuleCall getMembersEnumValueParserRuleCall_5_1_0() { return cMembersEnumValueParserRuleCall_5_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class FunctionParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionParameterDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayDefinitionDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMappingDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPrimaryTypeDefinitionDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConcreteStructureDefinitionDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//FunctionParameterDeclaration:
		//	ArrayDefinitionDeclaration | MappingDeclaration | PrimaryTypeDefinitionDeclaration |
		//	ConcreteStructureDefinitionDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayDefinitionDeclaration | MappingDeclaration | PrimaryTypeDefinitionDeclaration |
		//ConcreteStructureDefinitionDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayDefinitionDeclaration
		public RuleCall getArrayDefinitionDeclarationParserRuleCall_0() { return cArrayDefinitionDeclarationParserRuleCall_0; }
		
		//MappingDeclaration
		public RuleCall getMappingDeclarationParserRuleCall_1() { return cMappingDeclarationParserRuleCall_1; }
		
		//PrimaryTypeDefinitionDeclaration
		public RuleCall getPrimaryTypeDefinitionDeclarationParserRuleCall_2() { return cPrimaryTypeDefinitionDeclarationParserRuleCall_2; }
		
		//ConcreteStructureDefinitionDeclaration
		public RuleCall getConcreteStructureDefinitionDeclarationParserRuleCall_3() { return cConcreteStructureDefinitionDeclarationParserRuleCall_3; }
	}
	public class ArrayDefinitionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayDefinitionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArrayDeclarationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cBlocksAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cBlocksFilledArrayParserRuleCall_1_1_0_0 = (RuleCall)cBlocksAssignment_1_1_0.eContents().get(0);
		private final Assignment cVarAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final CrossReference cVarDeclarationCrossReference_1_1_1_0 = (CrossReference)cVarAssignment_1_1_1.eContents().get(0);
		private final RuleCall cVarDeclarationIDTerminalRuleCall_1_1_1_0_1 = (RuleCall)cVarDeclarationCrossReference_1_1_1_0.eContents().get(1);
		private final Assignment cAccessAssignment_1_1_2 = (Assignment)cAlternatives_1_1.eContents().get(2);
		private final Alternatives cAccessAlternatives_1_1_2_0 = (Alternatives)cAccessAssignment_1_1_2.eContents().get(0);
		private final RuleCall cAccessMappingAccessParserRuleCall_1_1_2_0_0 = (RuleCall)cAccessAlternatives_1_1_2_0.eContents().get(0);
		private final RuleCall cAccessArrayAccessParserRuleCall_1_1_2_0_1 = (RuleCall)cAccessAlternatives_1_1_2_0.eContents().get(1);
		private final RuleCall cAccessFieldAccessParserRuleCall_1_1_2_0_2 = (RuleCall)cAccessAlternatives_1_1_2_0.eContents().get(2);
		
		//ArrayDefinitionDeclaration:
		//	ArrayDeclaration ('=' (blocks=FilledArray | var=[Declaration] | access=(MappingAccess | ArrayAccess |
		//	FieldAccess)))?;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayDeclaration ('=' (blocks=FilledArray | var=[Declaration] | access=(MappingAccess | ArrayAccess | FieldAccess)))?
		public Group getGroup() { return cGroup; }
		
		//ArrayDeclaration
		public RuleCall getArrayDeclarationParserRuleCall_0() { return cArrayDeclarationParserRuleCall_0; }
		
		//('=' (blocks=FilledArray | var=[Declaration] | access=(MappingAccess | ArrayAccess | FieldAccess)))?
		public Group getGroup_1() { return cGroup_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//(blocks=FilledArray | var=[Declaration] | access=(MappingAccess | ArrayAccess | FieldAccess))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//blocks=FilledArray
		public Assignment getBlocksAssignment_1_1_0() { return cBlocksAssignment_1_1_0; }
		
		//FilledArray
		public RuleCall getBlocksFilledArrayParserRuleCall_1_1_0_0() { return cBlocksFilledArrayParserRuleCall_1_1_0_0; }
		
		//var=[Declaration]
		public Assignment getVarAssignment_1_1_1() { return cVarAssignment_1_1_1; }
		
		//[Declaration]
		public CrossReference getVarDeclarationCrossReference_1_1_1_0() { return cVarDeclarationCrossReference_1_1_1_0; }
		
		//ID
		public RuleCall getVarDeclarationIDTerminalRuleCall_1_1_1_0_1() { return cVarDeclarationIDTerminalRuleCall_1_1_1_0_1; }
		
		//access=(MappingAccess | ArrayAccess | FieldAccess)
		public Assignment getAccessAssignment_1_1_2() { return cAccessAssignment_1_1_2; }
		
		//(MappingAccess | ArrayAccess | FieldAccess)
		public Alternatives getAccessAlternatives_1_1_2_0() { return cAccessAlternatives_1_1_2_0; }
		
		//MappingAccess
		public RuleCall getAccessMappingAccessParserRuleCall_1_1_2_0_0() { return cAccessMappingAccessParserRuleCall_1_1_2_0_0; }
		
		//ArrayAccess
		public RuleCall getAccessArrayAccessParserRuleCall_1_1_2_0_1() { return cAccessArrayAccessParserRuleCall_1_1_2_0_1; }
		
		//FieldAccess
		public RuleCall getAccessFieldAccessParserRuleCall_1_1_2_0_2() { return cAccessFieldAccessParserRuleCall_1_1_2_0_2; }
	}
	public class FilledArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FilledArray");
		private final Assignment cArraysAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArraysValueSetsParserRuleCall_0 = (RuleCall)cArraysAssignment.eContents().get(0);
		
		//FilledArray:
		//	arrays+=ValueSets+;
		@Override public ParserRule getRule() { return rule; }
		
		//arrays+=ValueSets+
		public Assignment getArraysAssignment() { return cArraysAssignment; }
		
		//ValueSets
		public RuleCall getArraysValueSetsParserRuleCall_0() { return cArraysValueSetsParserRuleCall_0; }
	}
	public class ValueSetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ValueSets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValueSetsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketRightSquareBracketKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cValuesAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cValuesLogicalOperationsParserRuleCall_1_1_1_0_0 = (RuleCall)cValuesAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cValuesAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cValuesLogicalOperationsParserRuleCall_1_1_1_1_1_0 = (RuleCall)cValuesAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ValueSets:
		//	{ValueSets} ("[]" | "[" (values+=LogicalOperations ("," values+=LogicalOperations)*)? "]");
		@Override public ParserRule getRule() { return rule; }
		
		//{ValueSets} ("[]" | "[" (values+=LogicalOperations ("," values+=LogicalOperations)*)? "]")
		public Group getGroup() { return cGroup; }
		
		//{ValueSets}
		public Action getValueSetsAction_0() { return cValueSetsAction_0; }
		
		//("[]" | "[" (values+=LogicalOperations ("," values+=LogicalOperations)*)? "]")
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"[]"
		public Keyword getLeftSquareBracketRightSquareBracketKeyword_1_0() { return cLeftSquareBracketRightSquareBracketKeyword_1_0; }
		
		//"[" (values+=LogicalOperations ("," values+=LogicalOperations)*)? "]"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_0() { return cLeftSquareBracketKeyword_1_1_0; }
		
		//(values+=LogicalOperations ("," values+=LogicalOperations)*)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//values+=LogicalOperations
		public Assignment getValuesAssignment_1_1_1_0() { return cValuesAssignment_1_1_1_0; }
		
		//LogicalOperations
		public RuleCall getValuesLogicalOperationsParserRuleCall_1_1_1_0_0() { return cValuesLogicalOperationsParserRuleCall_1_1_1_0_0; }
		
		//("," values+=LogicalOperations)*
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_1_1_0() { return cCommaKeyword_1_1_1_1_0; }
		
		//values+=LogicalOperations
		public Assignment getValuesAssignment_1_1_1_1_1() { return cValuesAssignment_1_1_1_1_1; }
		
		//LogicalOperations
		public RuleCall getValuesLogicalOperationsParserRuleCall_1_1_1_1_1_0() { return cValuesLogicalOperationsParserRuleCall_1_1_1_1_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_2() { return cRightSquareBracketKeyword_1_1_2; }
	}
	public class ArrayDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationLocationSpecifierEnumParserRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantConstantKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cTypeNamedTypeParserRuleCall_3_0_0 = (RuleCall)cTypeAssignment_3_0.eContents().get(0);
		private final Assignment cStrucTypeAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cStrucTypeStructDeclarationCrossReference_3_1_0 = (CrossReference)cStrucTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cStrucTypeStructDeclarationIDTerminalRuleCall_3_1_0_1 = (RuleCall)cStrucTypeStructDeclarationCrossReference_3_1_0.eContents().get(1);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSizesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSizesIntLiteralParserRuleCall_5_1_0 = (RuleCall)cSizesAssignment_5_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//ArrayDeclaration:
		//	location=LocationSpecifierEnum? constant?="constant"? visibility=VisibilityEnum? (type=NamedType |
		//	strucType=[StructDeclaration]) name=ID ("[" sizes+=IntLiteral? "]")+;
		@Override public ParserRule getRule() { return rule; }
		
		//location=LocationSpecifierEnum? constant?="constant"? visibility=VisibilityEnum? (type=NamedType |
		//strucType=[StructDeclaration]) name=ID ("[" sizes+=IntLiteral? "]")+
		public Group getGroup() { return cGroup; }
		
		//location=LocationSpecifierEnum?
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }
		
		//LocationSpecifierEnum
		public RuleCall getLocationLocationSpecifierEnumParserRuleCall_0_0() { return cLocationLocationSpecifierEnumParserRuleCall_0_0; }
		
		//constant?="constant"?
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//"constant"
		public Keyword getConstantConstantKeyword_1_0() { return cConstantConstantKeyword_1_0; }
		
		//visibility=VisibilityEnum?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_2_0() { return cVisibilityVisibilityEnumParserRuleCall_2_0; }
		
		//(type=NamedType | strucType=[StructDeclaration])
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//type=NamedType
		public Assignment getTypeAssignment_3_0() { return cTypeAssignment_3_0; }
		
		//NamedType
		public RuleCall getTypeNamedTypeParserRuleCall_3_0_0() { return cTypeNamedTypeParserRuleCall_3_0_0; }
		
		//strucType=[StructDeclaration]
		public Assignment getStrucTypeAssignment_3_1() { return cStrucTypeAssignment_3_1; }
		
		//[StructDeclaration]
		public CrossReference getStrucTypeStructDeclarationCrossReference_3_1_0() { return cStrucTypeStructDeclarationCrossReference_3_1_0; }
		
		//ID
		public RuleCall getStrucTypeStructDeclarationIDTerminalRuleCall_3_1_0_1() { return cStrucTypeStructDeclarationIDTerminalRuleCall_3_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//("[" sizes+=IntLiteral? "]")+
		public Group getGroup_5() { return cGroup_5; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_5_0() { return cLeftSquareBracketKeyword_5_0; }
		
		//sizes+=IntLiteral?
		public Assignment getSizesAssignment_5_1() { return cSizesAssignment_5_1; }
		
		//IntLiteral
		public RuleCall getSizesIntLiteralParserRuleCall_5_1_0() { return cSizesIntLiteralParserRuleCall_5_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_5_2() { return cRightSquareBracketKeyword_5_2; }
	}
	public class NamedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NamedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleTypeDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryTypeNameEnumParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NamedType:
		//	SimpleTypeDeclaration | ElementaryTypeNameEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleTypeDeclaration | ElementaryTypeNameEnum
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleTypeDeclaration
		public RuleCall getSimpleTypeDeclarationParserRuleCall_0() { return cSimpleTypeDeclarationParserRuleCall_0; }
		
		//ElementaryTypeNameEnum
		public RuleCall getElementaryTypeNameEnumParserRuleCall_1() { return cElementaryTypeNameEnumParserRuleCall_1; }
	}
	public class SimpleTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SimpleTypeDeclaration");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeStringKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeBoolKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		
		//SimpleTypeDeclaration:
		//	type=('string' | 'bool');
		@Override public ParserRule getRule() { return rule; }
		
		//type=('string' | 'bool')
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//('string' | 'bool')
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//'string'
		public Keyword getTypeStringKeyword_0_0() { return cTypeStringKeyword_0_0; }
		
		//'bool'
		public Keyword getTypeBoolKeyword_0_1() { return cTypeBoolKeyword_0_1; }
	}
	public class MappingAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MappingAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMapAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMapMappingDeclarationCrossReference_0_0 = (CrossReference)cMapAssignment_0.eContents().get(0);
		private final RuleCall cMapMappingDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cMapMappingDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cLessThanSignLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexLogicalOperationsParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MappingAccess:
		//	map=[MappingDeclaration] '<(' index=LogicalOperations ')>';
		@Override public ParserRule getRule() { return rule; }
		
		//map=[MappingDeclaration] '<(' index=LogicalOperations ')>'
		public Group getGroup() { return cGroup; }
		
		//map=[MappingDeclaration]
		public Assignment getMapAssignment_0() { return cMapAssignment_0; }
		
		//[MappingDeclaration]
		public CrossReference getMapMappingDeclarationCrossReference_0_0() { return cMapMappingDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getMapMappingDeclarationIDTerminalRuleCall_0_0_1() { return cMapMappingDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'<('
		public Keyword getLessThanSignLeftParenthesisKeyword_1() { return cLessThanSignLeftParenthesisKeyword_1; }
		
		//index=LogicalOperations
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }
		
		//LogicalOperations
		public RuleCall getIndexLogicalOperationsParserRuleCall_2_0() { return cIndexLogicalOperationsParserRuleCall_2_0; }
		
		//')>'
		public Keyword getRightParenthesisGreaterThanSignKeyword_3() { return cRightParenthesisGreaterThanSignKeyword_3; }
	}
	public class ArrayAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVariableArrayDefinitionDeclarationCrossReference_0_0 = (CrossReference)cVariableAssignment_0.eContents().get(0);
		private final RuleCall cVariableArrayDefinitionDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cVariableArrayDefinitionDeclarationCrossReference_0_0.eContents().get(1);
		private final Assignment cIndexesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexesArrayIndexParserRuleCall_1_0 = (RuleCall)cIndexesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFieldAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_2_1_0 = (RuleCall)cFieldAssignment_2_1.eContents().get(0);
		
		//ArrayAccess:
		//	variable=[ArrayDefinitionDeclaration] indexes+=ArrayIndex+ ('.' field=ID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[ArrayDefinitionDeclaration] indexes+=ArrayIndex+ ('.' field=ID)?
		public Group getGroup() { return cGroup; }
		
		//variable=[ArrayDefinitionDeclaration]
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }
		
		//[ArrayDefinitionDeclaration]
		public CrossReference getVariableArrayDefinitionDeclarationCrossReference_0_0() { return cVariableArrayDefinitionDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getVariableArrayDefinitionDeclarationIDTerminalRuleCall_0_0_1() { return cVariableArrayDefinitionDeclarationIDTerminalRuleCall_0_0_1; }
		
		//indexes+=ArrayIndex+
		public Assignment getIndexesAssignment_1() { return cIndexesAssignment_1; }
		
		//ArrayIndex
		public RuleCall getIndexesArrayIndexParserRuleCall_1_0() { return cIndexesArrayIndexParserRuleCall_1_0; }
		
		//('.' field=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'.'
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }
		
		//field=ID
		public Assignment getFieldAssignment_2_1() { return cFieldAssignment_2_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_2_1_0() { return cFieldIDTerminalRuleCall_2_1_0; }
	}
	public class ArrayIndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayIndex");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLogicalOperationsParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ArrayIndex:
		//	'[' value=LogicalOperations ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' value=LogicalOperations ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//value=LogicalOperations
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//LogicalOperations
		public RuleCall getValueLogicalOperationsParserRuleCall_1_0() { return cValueLogicalOperationsParserRuleCall_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class FieldAccessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FieldAccess");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefConcreteStructDeclarationCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefConcreteStructDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cRefConcreteStructDeclarationCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		
		//FieldAccess:
		//	ref=[ConcreteStructDeclaration] '.' field=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[ConcreteStructDeclaration] '.' field=ID
		public Group getGroup() { return cGroup; }
		
		//ref=[ConcreteStructDeclaration]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[ConcreteStructDeclaration]
		public CrossReference getRefConcreteStructDeclarationCrossReference_0_0() { return cRefConcreteStructDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getRefConcreteStructDeclarationIDTerminalRuleCall_0_0_1() { return cRefConcreteStructDeclarationIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//field=ID
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_2_0() { return cFieldIDTerminalRuleCall_2_0; }
	}
	public class MappingDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MappingDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationMapLocationLiteralParserRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cUnnamedMappingDeclarationAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnnamedMappingDeclarationUnnamedMappingDeclarationParserRuleCall_2_0 = (RuleCall)cUnnamedMappingDeclarationAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//MappingDeclaration:
		//	location=MapLocationLiteral? visibility=VisibilityEnum? unnamedMappingDeclaration=UnnamedMappingDeclaration name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//location=MapLocationLiteral? visibility=VisibilityEnum? unnamedMappingDeclaration=UnnamedMappingDeclaration name=ID
		public Group getGroup() { return cGroup; }
		
		//location=MapLocationLiteral?
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }
		
		//MapLocationLiteral
		public RuleCall getLocationMapLocationLiteralParserRuleCall_0_0() { return cLocationMapLocationLiteralParserRuleCall_0_0; }
		
		//visibility=VisibilityEnum?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_1_0() { return cVisibilityVisibilityEnumParserRuleCall_1_0; }
		
		//unnamedMappingDeclaration=UnnamedMappingDeclaration
		public Assignment getUnnamedMappingDeclarationAssignment_2() { return cUnnamedMappingDeclarationAssignment_2; }
		
		//UnnamedMappingDeclaration
		public RuleCall getUnnamedMappingDeclarationUnnamedMappingDeclarationParserRuleCall_2_0() { return cUnnamedMappingDeclarationUnnamedMappingDeclarationParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class UnnamedMappingDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.UnnamedMappingDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeNamedTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cSecondRefAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final CrossReference cSecondRefDeclarationCrossReference_4_0_0 = (CrossReference)cSecondRefAssignment_4_0.eContents().get(0);
		private final RuleCall cSecondRefDeclarationIDTerminalRuleCall_4_0_0_1 = (RuleCall)cSecondRefDeclarationCrossReference_4_0_0.eContents().get(1);
		private final Assignment cSecondAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final Alternatives cSecondAlternatives_4_1_0 = (Alternatives)cSecondAssignment_4_1.eContents().get(0);
		private final RuleCall cSecondNamedTypeParserRuleCall_4_1_0_0 = (RuleCall)cSecondAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cSecondUnnamedMappingDeclarationParserRuleCall_4_1_0_1 = (RuleCall)cSecondAlternatives_4_1_0.eContents().get(1);
		private final Assignment cArrayAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cArrayLeftSquareBracketRightSquareBracketKeyword_5_0 = (Keyword)cArrayAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//UnnamedMappingDeclaration:
		//	"mapping" "(" type=NamedType "=>" (secondRef=[Declaration] | second=(NamedType | UnnamedMappingDeclaration))
		//	array?="[]"? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"mapping" "(" type=NamedType "=>" (secondRef=[Declaration] | second=(NamedType | UnnamedMappingDeclaration))
		//array?="[]"? ")"
		public Group getGroup() { return cGroup; }
		
		//"mapping"
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//type=NamedType
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//NamedType
		public RuleCall getTypeNamedTypeParserRuleCall_2_0() { return cTypeNamedTypeParserRuleCall_2_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//(secondRef=[Declaration] | second=(NamedType | UnnamedMappingDeclaration))
		public Alternatives getAlternatives_4() { return cAlternatives_4; }
		
		//secondRef=[Declaration]
		public Assignment getSecondRefAssignment_4_0() { return cSecondRefAssignment_4_0; }
		
		//[Declaration]
		public CrossReference getSecondRefDeclarationCrossReference_4_0_0() { return cSecondRefDeclarationCrossReference_4_0_0; }
		
		//ID
		public RuleCall getSecondRefDeclarationIDTerminalRuleCall_4_0_0_1() { return cSecondRefDeclarationIDTerminalRuleCall_4_0_0_1; }
		
		//second=(NamedType | UnnamedMappingDeclaration)
		public Assignment getSecondAssignment_4_1() { return cSecondAssignment_4_1; }
		
		//(NamedType | UnnamedMappingDeclaration)
		public Alternatives getSecondAlternatives_4_1_0() { return cSecondAlternatives_4_1_0; }
		
		//NamedType
		public RuleCall getSecondNamedTypeParserRuleCall_4_1_0_0() { return cSecondNamedTypeParserRuleCall_4_1_0_0; }
		
		//UnnamedMappingDeclaration
		public RuleCall getSecondUnnamedMappingDeclarationParserRuleCall_4_1_0_1() { return cSecondUnnamedMappingDeclarationParserRuleCall_4_1_0_1; }
		
		//array?="[]"?
		public Assignment getArrayAssignment_5() { return cArrayAssignment_5; }
		
		//"[]"
		public Keyword getArrayLeftSquareBracketRightSquareBracketKeyword_5_0() { return cArrayLeftSquareBracketRightSquareBracketKeyword_5_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class PrimaryTypeDefinitionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PrimaryTypeDefinitionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cPrimaryTypeDeclarationParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final Assignment cRefAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final CrossReference cRefPrimaryTypeDeclarationCrossReference_0_1_0 = (CrossReference)cRefAssignment_0_1.eContents().get(0);
		private final RuleCall cRefPrimaryTypeDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cRefPrimaryTypeDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOperationAssegnationLiteralParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cValueAlternatives_1_1_0 = (Alternatives)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cValueLogicalOperationsParserRuleCall_1_1_0_0 = (RuleCall)cValueAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cValueSingleDefinitionParserRuleCall_1_1_0_1 = (RuleCall)cValueAlternatives_1_1_0.eContents().get(1);
		
		//PrimaryTypeDefinitionDeclaration:
		//	(PrimaryTypeDeclaration | ref=[PrimaryTypeDeclaration]) (operator=OperationAssegnationLiteral
		//	value=(LogicalOperations | SingleDefinition))?;
		@Override public ParserRule getRule() { return rule; }
		
		//(PrimaryTypeDeclaration | ref=[PrimaryTypeDeclaration]) (operator=OperationAssegnationLiteral value=(LogicalOperations |
		//SingleDefinition))?
		public Group getGroup() { return cGroup; }
		
		//(PrimaryTypeDeclaration | ref=[PrimaryTypeDeclaration])
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//PrimaryTypeDeclaration
		public RuleCall getPrimaryTypeDeclarationParserRuleCall_0_0() { return cPrimaryTypeDeclarationParserRuleCall_0_0; }
		
		//ref=[PrimaryTypeDeclaration]
		public Assignment getRefAssignment_0_1() { return cRefAssignment_0_1; }
		
		//[PrimaryTypeDeclaration]
		public CrossReference getRefPrimaryTypeDeclarationCrossReference_0_1_0() { return cRefPrimaryTypeDeclarationCrossReference_0_1_0; }
		
		//ID
		public RuleCall getRefPrimaryTypeDeclarationIDTerminalRuleCall_0_1_0_1() { return cRefPrimaryTypeDeclarationIDTerminalRuleCall_0_1_0_1; }
		
		//(operator=OperationAssegnationLiteral value=(LogicalOperations | SingleDefinition))?
		public Group getGroup_1() { return cGroup_1; }
		
		//operator=OperationAssegnationLiteral
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }
		
		//OperationAssegnationLiteral
		public RuleCall getOperatorOperationAssegnationLiteralParserRuleCall_1_0_0() { return cOperatorOperationAssegnationLiteralParserRuleCall_1_0_0; }
		
		//value=(LogicalOperations | SingleDefinition)
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//(LogicalOperations | SingleDefinition)
		public Alternatives getValueAlternatives_1_1_0() { return cValueAlternatives_1_1_0; }
		
		//LogicalOperations
		public RuleCall getValueLogicalOperationsParserRuleCall_1_1_0_0() { return cValueLogicalOperationsParserRuleCall_1_1_0_0; }
		
		//SingleDefinition
		public RuleCall getValueSingleDefinitionParserRuleCall_1_1_0_1() { return cValueSingleDefinitionParserRuleCall_1_1_0_1; }
	}
	public class PrimaryTypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PrimaryTypeDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cArrayableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonArrayableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//PrimaryTypeDeclaration:
		//	ArrayableDeclaration | NonArrayableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ArrayableDeclaration | NonArrayableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ArrayableDeclaration
		public RuleCall getArrayableDeclarationParserRuleCall_0() { return cArrayableDeclarationParserRuleCall_0; }
		
		//NonArrayableDeclaration
		public RuleCall getNonArrayableDeclarationParserRuleCall_1() { return cNonArrayableDeclarationParserRuleCall_1; }
	}
	public class OperationAssegnationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.OperationAssegnationLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueEqualsSignKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueAsteriskEqualsSignKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		private final Keyword cValuePlusSignEqualsSignKeyword_0_2 = (Keyword)cValueAlternatives_0.eContents().get(2);
		private final Keyword cValueHyphenMinusEqualsSignKeyword_0_3 = (Keyword)cValueAlternatives_0.eContents().get(3);
		private final Keyword cValueSolidusEqualsSignKeyword_0_4 = (Keyword)cValueAlternatives_0.eContents().get(4);
		
		//OperationAssegnationLiteral:
		//	value=("=" | "*=" | "+=" | "-=" | "/=");
		@Override public ParserRule getRule() { return rule; }
		
		//value=("=" | "*=" | "+=" | "-=" | "/=")
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//("=" | "*=" | "+=" | "-=" | "/=")
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//"="
		public Keyword getValueEqualsSignKeyword_0_0() { return cValueEqualsSignKeyword_0_0; }
		
		//"*="
		public Keyword getValueAsteriskEqualsSignKeyword_0_1() { return cValueAsteriskEqualsSignKeyword_0_1; }
		
		//"+="
		public Keyword getValuePlusSignEqualsSignKeyword_0_2() { return cValuePlusSignEqualsSignKeyword_0_2; }
		
		//"-="
		public Keyword getValueHyphenMinusEqualsSignKeyword_0_3() { return cValueHyphenMinusEqualsSignKeyword_0_3; }
		
		//"/="
		public Keyword getValueSolidusEqualsSignKeyword_0_4() { return cValueSolidusEqualsSignKeyword_0_4; }
	}
	public class SingleDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SingleDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cFirstAlternatives_0_0_0 = (Alternatives)cFirstAssignment_0_0.eContents().get(0);
		private final Keyword cFirstPlusSignPlusSignKeyword_0_0_0_0 = (Keyword)cFirstAlternatives_0_0_0.eContents().get(0);
		private final Keyword cFirstHyphenMinusHyphenMinusKeyword_0_0_0_1 = (Keyword)cFirstAlternatives_0_0_0.eContents().get(1);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cNamePrimaryTypeDeclarationCrossReference_0_1_0 = (CrossReference)cNameAssignment_0_1.eContents().get(0);
		private final RuleCall cNamePrimaryTypeDeclarationIDTerminalRuleCall_0_1_0_1 = (RuleCall)cNamePrimaryTypeDeclarationCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final CrossReference cNamePrimaryTypeDeclarationCrossReference_1_0_0 = (CrossReference)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cNamePrimaryTypeDeclarationIDTerminalRuleCall_1_0_0_1 = (RuleCall)cNamePrimaryTypeDeclarationCrossReference_1_0_0.eContents().get(1);
		private final Assignment cSecondAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSecondAlternatives_1_1_0 = (Alternatives)cSecondAssignment_1_1.eContents().get(0);
		private final Keyword cSecondPlusSignPlusSignKeyword_1_1_0_0 = (Keyword)cSecondAlternatives_1_1_0.eContents().get(0);
		private final Keyword cSecondHyphenMinusHyphenMinusKeyword_1_1_0_1 = (Keyword)cSecondAlternatives_1_1_0.eContents().get(1);
		
		//SingleDefinition:
		//	first=("++" | "--") name=[PrimaryTypeDeclaration] | name=[PrimaryTypeDeclaration] second=("++" | "--");
		@Override public ParserRule getRule() { return rule; }
		
		//first=("++" | "--") name=[PrimaryTypeDeclaration] | name=[PrimaryTypeDeclaration] second=("++" | "--")
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//first=("++" | "--") name=[PrimaryTypeDeclaration]
		public Group getGroup_0() { return cGroup_0; }
		
		//first=("++" | "--")
		public Assignment getFirstAssignment_0_0() { return cFirstAssignment_0_0; }
		
		//("++" | "--")
		public Alternatives getFirstAlternatives_0_0_0() { return cFirstAlternatives_0_0_0; }
		
		//"++"
		public Keyword getFirstPlusSignPlusSignKeyword_0_0_0_0() { return cFirstPlusSignPlusSignKeyword_0_0_0_0; }
		
		//"--"
		public Keyword getFirstHyphenMinusHyphenMinusKeyword_0_0_0_1() { return cFirstHyphenMinusHyphenMinusKeyword_0_0_0_1; }
		
		//name=[PrimaryTypeDeclaration]
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }
		
		//[PrimaryTypeDeclaration]
		public CrossReference getNamePrimaryTypeDeclarationCrossReference_0_1_0() { return cNamePrimaryTypeDeclarationCrossReference_0_1_0; }
		
		//ID
		public RuleCall getNamePrimaryTypeDeclarationIDTerminalRuleCall_0_1_0_1() { return cNamePrimaryTypeDeclarationIDTerminalRuleCall_0_1_0_1; }
		
		//name=[PrimaryTypeDeclaration] second=("++" | "--")
		public Group getGroup_1() { return cGroup_1; }
		
		//name=[PrimaryTypeDeclaration]
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//[PrimaryTypeDeclaration]
		public CrossReference getNamePrimaryTypeDeclarationCrossReference_1_0_0() { return cNamePrimaryTypeDeclarationCrossReference_1_0_0; }
		
		//ID
		public RuleCall getNamePrimaryTypeDeclarationIDTerminalRuleCall_1_0_0_1() { return cNamePrimaryTypeDeclarationIDTerminalRuleCall_1_0_0_1; }
		
		//second=("++" | "--")
		public Assignment getSecondAssignment_1_1() { return cSecondAssignment_1_1; }
		
		//("++" | "--")
		public Alternatives getSecondAlternatives_1_1_0() { return cSecondAlternatives_1_1_0; }
		
		//"++"
		public Keyword getSecondPlusSignPlusSignKeyword_1_1_0_0() { return cSecondPlusSignPlusSignKeyword_1_1_0_0; }
		
		//"--"
		public Keyword getSecondHyphenMinusHyphenMinusKeyword_1_1_0_1() { return cSecondHyphenMinusHyphenMinusKeyword_1_1_0_1; }
	}
	public class NonArrayableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NonArrayableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationLocationSpecifierEnumParserRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantConstantKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeSimpleTypeDeclarationParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//NonArrayableDeclaration:
		//	location=LocationSpecifierEnum? constant?='constant'? visibility=VisibilityEnum? type=SimpleTypeDeclaration name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//location=LocationSpecifierEnum? constant?='constant'? visibility=VisibilityEnum? type=SimpleTypeDeclaration name=ID
		public Group getGroup() { return cGroup; }
		
		//location=LocationSpecifierEnum?
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }
		
		//LocationSpecifierEnum
		public RuleCall getLocationLocationSpecifierEnumParserRuleCall_0_0() { return cLocationLocationSpecifierEnumParserRuleCall_0_0; }
		
		//constant?='constant'?
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//'constant'
		public Keyword getConstantConstantKeyword_1_0() { return cConstantConstantKeyword_1_0; }
		
		//visibility=VisibilityEnum?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_2_0() { return cVisibilityVisibilityEnumParserRuleCall_2_0; }
		
		//type=SimpleTypeDeclaration
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//SimpleTypeDeclaration
		public RuleCall getTypeSimpleTypeDeclarationParserRuleCall_3_0() { return cTypeSimpleTypeDeclarationParserRuleCall_3_0; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
	}
	public class ArrayableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConstantAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cConstantConstantKeyword_0_0 = (Keyword)cConstantAssignment_0.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeElementaryTypeNameEnumParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//ArrayableDeclaration:
		//	constant?='constant'? visibility=VisibilityEnum? type=ElementaryTypeNameEnum name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//constant?='constant'? visibility=VisibilityEnum? type=ElementaryTypeNameEnum name=ID
		public Group getGroup() { return cGroup; }
		
		//constant?='constant'?
		public Assignment getConstantAssignment_0() { return cConstantAssignment_0; }
		
		//'constant'
		public Keyword getConstantConstantKeyword_0_0() { return cConstantConstantKeyword_0_0; }
		
		//visibility=VisibilityEnum?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_1_0() { return cVisibilityVisibilityEnumParserRuleCall_1_0; }
		
		//type=ElementaryTypeNameEnum
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//ElementaryTypeNameEnum
		public RuleCall getTypeElementaryTypeNameEnumParserRuleCall_2_0() { return cTypeElementaryTypeNameEnumParserRuleCall_2_0; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class ConcreteStructureDefinitionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ConcreteStructureDefinitionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cConcreteStructDeclarationParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Assignment cRefAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cRefConcreteStructDeclarationCrossReference_1_1_0 = (CrossReference)cRefAssignment_1_1.eContents().get(0);
		private final RuleCall cRefConcreteStructDeclarationIDTerminalRuleCall_1_1_0_1 = (RuleCall)cRefConcreteStructDeclarationCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Group cGroup_2_1_0 = (Group)cAlternatives_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1_0_0 = (Keyword)cGroup_2_1_0.eContents().get(0);
		private final Assignment cCouplesAssignment_2_1_0_1 = (Assignment)cGroup_2_1_0.eContents().get(1);
		private final RuleCall cCouplesStructureFieldValueParserRuleCall_2_1_0_1_0 = (RuleCall)cCouplesAssignment_2_1_0_1.eContents().get(0);
		private final Group cGroup_2_1_0_2 = (Group)cGroup_2_1_0.eContents().get(2);
		private final Keyword cCommaKeyword_2_1_0_2_0 = (Keyword)cGroup_2_1_0_2.eContents().get(0);
		private final Assignment cCouplesAssignment_2_1_0_2_1 = (Assignment)cGroup_2_1_0_2.eContents().get(1);
		private final RuleCall cCouplesStructureFieldValueParserRuleCall_2_1_0_2_1_0 = (RuleCall)cCouplesAssignment_2_1_0_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_0_3 = (Keyword)cGroup_2_1_0.eContents().get(3);
		private final Assignment cExistenceRefAssignment_2_1_1 = (Assignment)cAlternatives_2_1.eContents().get(1);
		private final CrossReference cExistenceRefConcreteStructDeclarationCrossReference_2_1_1_0 = (CrossReference)cExistenceRefAssignment_2_1_1.eContents().get(0);
		private final RuleCall cExistenceRefConcreteStructDeclarationIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cExistenceRefConcreteStructDeclarationCrossReference_2_1_1_0.eContents().get(1);
		private final Assignment cArrayAccessRefAssignment_2_1_2 = (Assignment)cAlternatives_2_1.eContents().get(2);
		private final RuleCall cArrayAccessRefArrayAccessParserRuleCall_2_1_2_0 = (RuleCall)cArrayAccessRefAssignment_2_1_2.eContents().get(0);
		
		//ConcreteStructureDefinitionDeclaration:
		//	"struct" (ConcreteStructDeclaration | ref=[ConcreteStructDeclaration]) ("=" ("{" couples+=StructureFieldValue (","
		//	couples+=StructureFieldValue)* "}"
		//	| existenceRef=[ConcreteStructDeclaration] | arrayAccessRef=ArrayAccess))?;
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" (ConcreteStructDeclaration | ref=[ConcreteStructDeclaration]) ("=" ("{" couples+=StructureFieldValue (","
		//couples+=StructureFieldValue)* "}" | existenceRef=[ConcreteStructDeclaration] | arrayAccessRef=ArrayAccess))?
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//(ConcreteStructDeclaration | ref=[ConcreteStructDeclaration])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ConcreteStructDeclaration
		public RuleCall getConcreteStructDeclarationParserRuleCall_1_0() { return cConcreteStructDeclarationParserRuleCall_1_0; }
		
		//ref=[ConcreteStructDeclaration]
		public Assignment getRefAssignment_1_1() { return cRefAssignment_1_1; }
		
		//[ConcreteStructDeclaration]
		public CrossReference getRefConcreteStructDeclarationCrossReference_1_1_0() { return cRefConcreteStructDeclarationCrossReference_1_1_0; }
		
		//ID
		public RuleCall getRefConcreteStructDeclarationIDTerminalRuleCall_1_1_0_1() { return cRefConcreteStructDeclarationIDTerminalRuleCall_1_1_0_1; }
		
		//("=" ("{" couples+=StructureFieldValue ("," couples+=StructureFieldValue)* "}" |
		//existenceRef=[ConcreteStructDeclaration] | arrayAccessRef=ArrayAccess))?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//("{" couples+=StructureFieldValue ("," couples+=StructureFieldValue)* "}" | existenceRef=[ConcreteStructDeclaration] |
		//arrayAccessRef=ArrayAccess)
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }
		
		//"{" couples+=StructureFieldValue ("," couples+=StructureFieldValue)* "}"
		public Group getGroup_2_1_0() { return cGroup_2_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1_0_0() { return cLeftCurlyBracketKeyword_2_1_0_0; }
		
		//couples+=StructureFieldValue
		public Assignment getCouplesAssignment_2_1_0_1() { return cCouplesAssignment_2_1_0_1; }
		
		//StructureFieldValue
		public RuleCall getCouplesStructureFieldValueParserRuleCall_2_1_0_1_0() { return cCouplesStructureFieldValueParserRuleCall_2_1_0_1_0; }
		
		//("," couples+=StructureFieldValue)*
		public Group getGroup_2_1_0_2() { return cGroup_2_1_0_2; }
		
		//","
		public Keyword getCommaKeyword_2_1_0_2_0() { return cCommaKeyword_2_1_0_2_0; }
		
		//couples+=StructureFieldValue
		public Assignment getCouplesAssignment_2_1_0_2_1() { return cCouplesAssignment_2_1_0_2_1; }
		
		//StructureFieldValue
		public RuleCall getCouplesStructureFieldValueParserRuleCall_2_1_0_2_1_0() { return cCouplesStructureFieldValueParserRuleCall_2_1_0_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_0_3() { return cRightCurlyBracketKeyword_2_1_0_3; }
		
		//existenceRef=[ConcreteStructDeclaration]
		public Assignment getExistenceRefAssignment_2_1_1() { return cExistenceRefAssignment_2_1_1; }
		
		//[ConcreteStructDeclaration]
		public CrossReference getExistenceRefConcreteStructDeclarationCrossReference_2_1_1_0() { return cExistenceRefConcreteStructDeclarationCrossReference_2_1_1_0; }
		
		//ID
		public RuleCall getExistenceRefConcreteStructDeclarationIDTerminalRuleCall_2_1_1_0_1() { return cExistenceRefConcreteStructDeclarationIDTerminalRuleCall_2_1_1_0_1; }
		
		//arrayAccessRef=ArrayAccess
		public Assignment getArrayAccessRefAssignment_2_1_2() { return cArrayAccessRefAssignment_2_1_2; }
		
		//ArrayAccess
		public RuleCall getArrayAccessRefArrayAccessParserRuleCall_2_1_2_0() { return cArrayAccessRefArrayAccessParserRuleCall_2_1_2_0; }
	}
	public class ConcreteStructDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ConcreteStructDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationLocationSpecifierEnumParserRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Assignment cConstantAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cConstantConstantKeyword_1_0 = (Keyword)cConstantAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeStructDeclarationCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeStructDeclarationIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeStructDeclarationCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//ConcreteStructDeclaration:
		//	location=LocationSpecifierEnum? constant?="constant"? type=[StructDeclaration] name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//location=LocationSpecifierEnum? constant?="constant"? type=[StructDeclaration] name=ID
		public Group getGroup() { return cGroup; }
		
		//location=LocationSpecifierEnum?
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }
		
		//LocationSpecifierEnum
		public RuleCall getLocationLocationSpecifierEnumParserRuleCall_0_0() { return cLocationLocationSpecifierEnumParserRuleCall_0_0; }
		
		//constant?="constant"?
		public Assignment getConstantAssignment_1() { return cConstantAssignment_1; }
		
		//"constant"
		public Keyword getConstantConstantKeyword_1_0() { return cConstantConstantKeyword_1_0; }
		
		//type=[StructDeclaration]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[StructDeclaration]
		public CrossReference getTypeStructDeclarationCrossReference_2_0() { return cTypeStructDeclarationCrossReference_2_0; }
		
		//ID
		public RuleCall getTypeStructDeclarationIDTerminalRuleCall_2_0_1() { return cTypeStructDeclarationIDTerminalRuleCall_2_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
	}
	public class StructureFieldValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StructureFieldValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFieldAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFieldIDTerminalRuleCall_0_0 = (RuleCall)cFieldAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValuesAlternatives_2_0 = (Alternatives)cValuesAssignment_2.eContents().get(0);
		private final RuleCall cValuesLogicalOperationsParserRuleCall_2_0_0 = (RuleCall)cValuesAlternatives_2_0.eContents().get(0);
		private final RuleCall cValuesFilledArrayParserRuleCall_2_0_1 = (RuleCall)cValuesAlternatives_2_0.eContents().get(1);
		
		//StructureFieldValue:
		//	field=ID ":" values=(LogicalOperations | FilledArray);
		@Override public ParserRule getRule() { return rule; }
		
		//field=ID ":" values=(LogicalOperations | FilledArray)
		public Group getGroup() { return cGroup; }
		
		//field=ID
		public Assignment getFieldAssignment_0() { return cFieldAssignment_0; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_0_0() { return cFieldIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//values=(LogicalOperations | FilledArray)
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }
		
		//(LogicalOperations | FilledArray)
		public Alternatives getValuesAlternatives_2_0() { return cValuesAlternatives_2_0; }
		
		//LogicalOperations
		public RuleCall getValuesLogicalOperationsParserRuleCall_2_0_0() { return cValuesLogicalOperationsParserRuleCall_2_0_0; }
		
		//FilledArray
		public RuleCall getValuesFilledArrayParserRuleCall_2_0_1() { return cValuesFilledArrayParserRuleCall_2_0_1; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPayableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPayablePayableKeyword_0_0 = (Keyword)cPayableAssignment_0.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParametersAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParametersFunctionParameterDeclarationParserRuleCall_4_0_0 = (RuleCall)cParametersAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParametersFunctionParameterDeclarationParserRuleCall_4_1_1_0 = (RuleCall)cParametersAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cOptionalElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_6_0 = (RuleCall)cOptionalElementsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cReturnsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cReturnTypeAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cReturnTypeNamedTypeParserRuleCall_7_2_0 = (RuleCall)cReturnTypeAssignment_7_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBlocksAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBlocksInternalBlockParserRuleCall_9_0 = (RuleCall)cBlocksAssignment_9.eContents().get(0);
		private final Assignment cReturnValAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cReturnValReturnStatementParserRuleCall_10_0 = (RuleCall)cReturnValAssignment_10.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//// Anonymous function allowed when "name" is not specified.
		//FunctionDefinition:
		//	payable?="payable"? "function" name=ID "(" (parameters+=FunctionParameterDeclaration (","
		//	parameters+=FunctionParameterDeclaration)*)? ")"
		//	optionalElements+=FunctionDefinitionOptionalElement* ("returns" "(" returnType=NamedType ")")?
		//	"{"
		//	blocks+=InternalBlock*
		//	returnVal=ReturnStatement?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//payable?="payable"? "function" name=ID "(" (parameters+=FunctionParameterDeclaration (","
		//parameters+=FunctionParameterDeclaration)*)? ")" optionalElements+=FunctionDefinitionOptionalElement* ("returns" "("
		//returnType=NamedType ")")? "{" blocks+=InternalBlock* returnVal=ReturnStatement? "}"
		public Group getGroup() { return cGroup; }
		
		//payable?="payable"?
		public Assignment getPayableAssignment_0() { return cPayableAssignment_0; }
		
		//"payable"
		public Keyword getPayablePayableKeyword_0_0() { return cPayablePayableKeyword_0_0; }
		
		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//(parameters+=FunctionParameterDeclaration ("," parameters+=FunctionParameterDeclaration)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//parameters+=FunctionParameterDeclaration
		public Assignment getParametersAssignment_4_0() { return cParametersAssignment_4_0; }
		
		//FunctionParameterDeclaration
		public RuleCall getParametersFunctionParameterDeclarationParserRuleCall_4_0_0() { return cParametersFunctionParameterDeclarationParserRuleCall_4_0_0; }
		
		//("," parameters+=FunctionParameterDeclaration)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//parameters+=FunctionParameterDeclaration
		public Assignment getParametersAssignment_4_1_1() { return cParametersAssignment_4_1_1; }
		
		//FunctionParameterDeclaration
		public RuleCall getParametersFunctionParameterDeclarationParserRuleCall_4_1_1_0() { return cParametersFunctionParameterDeclarationParserRuleCall_4_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//optionalElements+=FunctionDefinitionOptionalElement*
		public Assignment getOptionalElementsAssignment_6() { return cOptionalElementsAssignment_6; }
		
		//FunctionDefinitionOptionalElement
		public RuleCall getOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_6_0() { return cOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_6_0; }
		
		//("returns" "(" returnType=NamedType ")")?
		public Group getGroup_7() { return cGroup_7; }
		
		//"returns"
		public Keyword getReturnsKeyword_7_0() { return cReturnsKeyword_7_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//returnType=NamedType
		public Assignment getReturnTypeAssignment_7_2() { return cReturnTypeAssignment_7_2; }
		
		//NamedType
		public RuleCall getReturnTypeNamedTypeParserRuleCall_7_2_0() { return cReturnTypeNamedTypeParserRuleCall_7_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//blocks+=InternalBlock*
		public Assignment getBlocksAssignment_9() { return cBlocksAssignment_9; }
		
		//InternalBlock
		public RuleCall getBlocksInternalBlockParserRuleCall_9_0() { return cBlocksInternalBlockParserRuleCall_9_0; }
		
		//returnVal=ReturnStatement?
		public Assignment getReturnValAssignment_10() { return cReturnValAssignment_10; }
		
		//ReturnStatement
		public RuleCall getReturnValReturnStatementParserRuleCall_10_0() { return cReturnValReturnStatementParserRuleCall_10_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class InternalBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.InternalBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cDefAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cDefAlternatives_0_0_0 = (Alternatives)cDefAssignment_0_0.eContents().get(0);
		private final RuleCall cDefArrayDefinitionParserRuleCall_0_0_0_0 = (RuleCall)cDefAlternatives_0_0_0.eContents().get(0);
		private final RuleCall cDefMappingDefinitionParserRuleCall_0_0_0_1 = (RuleCall)cDefAlternatives_0_0_0.eContents().get(1);
		private final RuleCall cDefSingleDefinitionParserRuleCall_0_0_0_2 = (RuleCall)cDefAlternatives_0_0_0.eContents().get(2);
		private final RuleCall cDefFieldDefinitionParserRuleCall_0_0_0_3 = (RuleCall)cDefAlternatives_0_0_0.eContents().get(3);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDecAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cDecFunctionDeclarationParserRuleCall_1_0_0 = (RuleCall)cDecAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLoopAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLoopLoopStructuresParserRuleCall_2_0 = (RuleCall)cLoopAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cCallAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cCallFunctionCallParserRuleCall_3_0_0 = (RuleCall)cCallAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//InternalBlock:
		//	def=(ArrayDefinition | MappingDefinition | SingleDefinition | FieldDefinition) ";"
		//	| dec=FunctionDeclaration ";"
		//	| loop=LoopStructures
		//	| call=FunctionCall ";";
		@Override public ParserRule getRule() { return rule; }
		
		//def=(ArrayDefinition | MappingDefinition | SingleDefinition | FieldDefinition) ";" | dec=FunctionDeclaration ";" |
		//loop=LoopStructures | call=FunctionCall ";"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//def=(ArrayDefinition | MappingDefinition | SingleDefinition | FieldDefinition) ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//def=(ArrayDefinition | MappingDefinition | SingleDefinition | FieldDefinition)
		public Assignment getDefAssignment_0_0() { return cDefAssignment_0_0; }
		
		//(ArrayDefinition | MappingDefinition | SingleDefinition | FieldDefinition)
		public Alternatives getDefAlternatives_0_0_0() { return cDefAlternatives_0_0_0; }
		
		//ArrayDefinition
		public RuleCall getDefArrayDefinitionParserRuleCall_0_0_0_0() { return cDefArrayDefinitionParserRuleCall_0_0_0_0; }
		
		//MappingDefinition
		public RuleCall getDefMappingDefinitionParserRuleCall_0_0_0_1() { return cDefMappingDefinitionParserRuleCall_0_0_0_1; }
		
		//SingleDefinition
		public RuleCall getDefSingleDefinitionParserRuleCall_0_0_0_2() { return cDefSingleDefinitionParserRuleCall_0_0_0_2; }
		
		//FieldDefinition
		public RuleCall getDefFieldDefinitionParserRuleCall_0_0_0_3() { return cDefFieldDefinitionParserRuleCall_0_0_0_3; }
		
		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//dec=FunctionDeclaration ";"
		public Group getGroup_1() { return cGroup_1; }
		
		//dec=FunctionDeclaration
		public Assignment getDecAssignment_1_0() { return cDecAssignment_1_0; }
		
		//FunctionDeclaration
		public RuleCall getDecFunctionDeclarationParserRuleCall_1_0_0() { return cDecFunctionDeclarationParserRuleCall_1_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//loop=LoopStructures
		public Assignment getLoopAssignment_2() { return cLoopAssignment_2; }
		
		//LoopStructures
		public RuleCall getLoopLoopStructuresParserRuleCall_2_0() { return cLoopLoopStructuresParserRuleCall_2_0; }
		
		//call=FunctionCall ";"
		public Group getGroup_3() { return cGroup_3; }
		
		//call=FunctionCall
		public Assignment getCallAssignment_3_0() { return cCallAssignment_3_0; }
		
		//FunctionCall
		public RuleCall getCallFunctionCallParserRuleCall_3_0_0() { return cCallFunctionCallParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class ArrayDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRefArrayDefinitionDeclarationCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefArrayDefinitionDeclarationIDTerminalRuleCall_0_0_1 = (RuleCall)cRefArrayDefinitionDeclarationCrossReference_0_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_0_1 = (Alternatives)cGroup_1_0.eContents().get(1);
		private final Assignment cBlocksAssignment_1_0_1_0 = (Assignment)cAlternatives_1_0_1.eContents().get(0);
		private final RuleCall cBlocksFilledArrayParserRuleCall_1_0_1_0_0 = (RuleCall)cBlocksAssignment_1_0_1_0.eContents().get(0);
		private final Assignment cArrayRefAssignment_1_0_1_1 = (Assignment)cAlternatives_1_0_1.eContents().get(1);
		private final CrossReference cArrayRefArrayDefinitionDeclarationCrossReference_1_0_1_1_0 = (CrossReference)cArrayRefAssignment_1_0_1_1.eContents().get(0);
		private final RuleCall cArrayRefArrayDefinitionDeclarationIDTerminalRuleCall_1_0_1_1_0_1 = (RuleCall)cArrayRefArrayDefinitionDeclarationCrossReference_1_0_1_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cIndexesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cIndexesArrayIndexParserRuleCall_1_1_0_0 = (RuleCall)cIndexesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cFieldAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_1_1_1_1_0 = (RuleCall)cFieldAssignment_1_1_1_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cOperatorOperationAssegnationLiteralParserRuleCall_1_1_2_0 = (RuleCall)cOperatorAssignment_1_1_2.eContents().get(0);
		private final Assignment cValueAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final Alternatives cValueAlternatives_1_1_3_0 = (Alternatives)cValueAssignment_1_1_3.eContents().get(0);
		private final RuleCall cValueLogicalOperationsParserRuleCall_1_1_3_0_0 = (RuleCall)cValueAlternatives_1_1_3_0.eContents().get(0);
		private final RuleCall cValueFilledArrayParserRuleCall_1_1_3_0_1 = (RuleCall)cValueAlternatives_1_1_3_0.eContents().get(1);
		
		//ArrayDefinition:
		//	ref=[ArrayDefinitionDeclaration] ('=' (blocks=FilledArray
		//	| arrayRef=[ArrayDefinitionDeclaration]) | indexes+=ArrayIndex+ ('.' field=ID)? operator=OperationAssegnationLiteral
		//	value=(LogicalOperations | FilledArray));
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[ArrayDefinitionDeclaration] ('=' (blocks=FilledArray | arrayRef=[ArrayDefinitionDeclaration]) |
		//indexes+=ArrayIndex+ ('.' field=ID)? operator=OperationAssegnationLiteral value=(LogicalOperations | FilledArray))
		public Group getGroup() { return cGroup; }
		
		//ref=[ArrayDefinitionDeclaration]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[ArrayDefinitionDeclaration]
		public CrossReference getRefArrayDefinitionDeclarationCrossReference_0_0() { return cRefArrayDefinitionDeclarationCrossReference_0_0; }
		
		//ID
		public RuleCall getRefArrayDefinitionDeclarationIDTerminalRuleCall_0_0_1() { return cRefArrayDefinitionDeclarationIDTerminalRuleCall_0_0_1; }
		
		//('=' (blocks=FilledArray | arrayRef=[ArrayDefinitionDeclaration]) | indexes+=ArrayIndex+ ('.' field=ID)?
		//operator=OperationAssegnationLiteral value=(LogicalOperations | FilledArray))
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'=' (blocks=FilledArray | arrayRef=[ArrayDefinitionDeclaration])
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_0_0() { return cEqualsSignKeyword_1_0_0; }
		
		//(blocks=FilledArray | arrayRef=[ArrayDefinitionDeclaration])
		public Alternatives getAlternatives_1_0_1() { return cAlternatives_1_0_1; }
		
		//blocks=FilledArray
		public Assignment getBlocksAssignment_1_0_1_0() { return cBlocksAssignment_1_0_1_0; }
		
		//FilledArray
		public RuleCall getBlocksFilledArrayParserRuleCall_1_0_1_0_0() { return cBlocksFilledArrayParserRuleCall_1_0_1_0_0; }
		
		//arrayRef=[ArrayDefinitionDeclaration]
		public Assignment getArrayRefAssignment_1_0_1_1() { return cArrayRefAssignment_1_0_1_1; }
		
		//[ArrayDefinitionDeclaration]
		public CrossReference getArrayRefArrayDefinitionDeclarationCrossReference_1_0_1_1_0() { return cArrayRefArrayDefinitionDeclarationCrossReference_1_0_1_1_0; }
		
		//ID
		public RuleCall getArrayRefArrayDefinitionDeclarationIDTerminalRuleCall_1_0_1_1_0_1() { return cArrayRefArrayDefinitionDeclarationIDTerminalRuleCall_1_0_1_1_0_1; }
		
		//indexes+=ArrayIndex+ ('.' field=ID)? operator=OperationAssegnationLiteral value=(LogicalOperations | FilledArray)
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//indexes+=ArrayIndex+
		public Assignment getIndexesAssignment_1_1_0() { return cIndexesAssignment_1_1_0; }
		
		//ArrayIndex
		public RuleCall getIndexesArrayIndexParserRuleCall_1_1_0_0() { return cIndexesArrayIndexParserRuleCall_1_1_0_0; }
		
		//('.' field=ID)?
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_1_1_0() { return cFullStopKeyword_1_1_1_0; }
		
		//field=ID
		public Assignment getFieldAssignment_1_1_1_1() { return cFieldAssignment_1_1_1_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_1_1_1_0() { return cFieldIDTerminalRuleCall_1_1_1_1_0; }
		
		//operator=OperationAssegnationLiteral
		public Assignment getOperatorAssignment_1_1_2() { return cOperatorAssignment_1_1_2; }
		
		//OperationAssegnationLiteral
		public RuleCall getOperatorOperationAssegnationLiteralParserRuleCall_1_1_2_0() { return cOperatorOperationAssegnationLiteralParserRuleCall_1_1_2_0; }
		
		//value=(LogicalOperations | FilledArray)
		public Assignment getValueAssignment_1_1_3() { return cValueAssignment_1_1_3; }
		
		//(LogicalOperations | FilledArray)
		public Alternatives getValueAlternatives_1_1_3_0() { return cValueAlternatives_1_1_3_0; }
		
		//LogicalOperations
		public RuleCall getValueLogicalOperationsParserRuleCall_1_1_3_0_0() { return cValueLogicalOperationsParserRuleCall_1_1_3_0_0; }
		
		//FilledArray
		public RuleCall getValueFilledArrayParserRuleCall_1_1_3_0_1() { return cValueFilledArrayParserRuleCall_1_1_3_0_1; }
	}
	public class FieldDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FieldDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFieldAccessParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cValueAlternatives_2_0 = (Alternatives)cValueAssignment_2.eContents().get(0);
		private final RuleCall cValueLogicalOperationsParserRuleCall_2_0_0 = (RuleCall)cValueAlternatives_2_0.eContents().get(0);
		private final RuleCall cValueSingleDefinitionParserRuleCall_2_0_1 = (RuleCall)cValueAlternatives_2_0.eContents().get(1);
		
		//FieldDefinition:
		//	FieldAccess '=' value=(LogicalOperations | SingleDefinition);
		@Override public ParserRule getRule() { return rule; }
		
		//FieldAccess '=' value=(LogicalOperations | SingleDefinition)
		public Group getGroup() { return cGroup; }
		
		//FieldAccess
		public RuleCall getFieldAccessParserRuleCall_0() { return cFieldAccessParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=(LogicalOperations | SingleDefinition)
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//(LogicalOperations | SingleDefinition)
		public Alternatives getValueAlternatives_2_0() { return cValueAlternatives_2_0; }
		
		//LogicalOperations
		public RuleCall getValueLogicalOperationsParserRuleCall_2_0_0() { return cValueLogicalOperationsParserRuleCall_2_0_0; }
		
		//SingleDefinition
		public RuleCall getValueSingleDefinitionParserRuleCall_2_0_1() { return cValueSingleDefinitionParserRuleCall_2_0_1; }
	}
	public class MappingDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MappingDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMappingAccessParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSecAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cSecAlternatives_2_0 = (Alternatives)cSecAssignment_2.eContents().get(0);
		private final RuleCall cSecLogicalOperationsParserRuleCall_2_0_0 = (RuleCall)cSecAlternatives_2_0.eContents().get(0);
		private final RuleCall cSecFilledArrayParserRuleCall_2_0_1 = (RuleCall)cSecAlternatives_2_0.eContents().get(1);
		
		//MappingDefinition:
		//	MappingAccess '=' sec=(LogicalOperations | FilledArray);
		@Override public ParserRule getRule() { return rule; }
		
		//MappingAccess '=' sec=(LogicalOperations | FilledArray)
		public Group getGroup() { return cGroup; }
		
		//MappingAccess
		public RuleCall getMappingAccessParserRuleCall_0() { return cMappingAccessParserRuleCall_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//sec=(LogicalOperations | FilledArray)
		public Assignment getSecAssignment_2() { return cSecAssignment_2; }
		
		//(LogicalOperations | FilledArray)
		public Alternatives getSecAlternatives_2_0() { return cSecAlternatives_2_0; }
		
		//LogicalOperations
		public RuleCall getSecLogicalOperationsParserRuleCall_2_0_0() { return cSecLogicalOperationsParserRuleCall_2_0_0; }
		
		//FilledArray
		public RuleCall getSecFilledArrayParserRuleCall_2_0_1() { return cSecFilledArrayParserRuleCall_2_0_1; }
	}
	public class FunctionCallListArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionCallListArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFunctionCallListArgumentsAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsLogicalOperationsParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsLogicalOperationsParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// ---------- End New grammar ----------
		//FunctionCallListArguments:
		//	"(" {FunctionCallListArguments} (arguments+=LogicalOperations ("," arguments+=LogicalOperations)*)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {FunctionCallListArguments} (arguments+=LogicalOperations ("," arguments+=LogicalOperations)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{FunctionCallListArguments}
		public Action getFunctionCallListArgumentsAction_1() { return cFunctionCallListArgumentsAction_1; }
		
		//(arguments+=LogicalOperations ("," arguments+=LogicalOperations)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=LogicalOperations
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//LogicalOperations
		public RuleCall getArgumentsLogicalOperationsParserRuleCall_2_0_0() { return cArgumentsLogicalOperationsParserRuleCall_2_0_0; }
		
		//("," arguments+=LogicalOperations)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=LogicalOperations
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//LogicalOperations
		public RuleCall getArgumentsLogicalOperationsParserRuleCall_2_1_1_0() { return cArgumentsLogicalOperationsParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionCallArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionCallArguments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Action cFunctionCallArgumentsAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cArgsAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cArgsFunctionCallArgParserRuleCall_0_3_0_0 = (RuleCall)cArgsAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cArgsFunctionCallArgParserRuleCall_0_3_1_1_0 = (RuleCall)cArgsAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cFunctionCallListArgumentsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// call({arg1: 1, arg2: 2})
		//FunctionCallArguments:
		//	"("
		//	"{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)?
		//	"}"
		//	")" | FunctionCallListArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")" |
		//FunctionCallListArguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//{FunctionCallArguments}
		public Action getFunctionCallArgumentsAction_0_2() { return cFunctionCallArgumentsAction_0_2; }
		
		//(args+=FunctionCallArg ("," args+=FunctionCallArg)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//args+=FunctionCallArg
		public Assignment getArgsAssignment_0_3_0() { return cArgsAssignment_0_3_0; }
		
		//FunctionCallArg
		public RuleCall getArgsFunctionCallArgParserRuleCall_0_3_0_0() { return cArgsFunctionCallArgParserRuleCall_0_3_0_0; }
		
		//("," args+=FunctionCallArg)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//","
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }
		
		//args+=FunctionCallArg
		public Assignment getArgsAssignment_0_3_1_1() { return cArgsAssignment_0_3_1_1; }
		
		//FunctionCallArg
		public RuleCall getArgsFunctionCallArgParserRuleCall_0_3_1_1_0() { return cArgsFunctionCallArgParserRuleCall_0_3_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//FunctionCallListArguments
		public RuleCall getFunctionCallListArgumentsParserRuleCall_1() { return cFunctionCallListArgumentsParserRuleCall_1; }
	}
	public class FunctionCallArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionCallArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprLogicalOperationsParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//FunctionCallArg:
		//	name=ID ":" expr=LogicalOperations;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" expr=LogicalOperations
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expr=LogicalOperations
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//LogicalOperations
		public RuleCall getExprLogicalOperationsParserRuleCall_2_0() { return cExprLogicalOperationsParserRuleCall_2_0; }
	}
	public class FunctionDefinitionOptionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionDefinitionOptionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVisibilitySpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionDefinitionOptionalElement:
		//	Const | VisibilitySpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Const | VisibilitySpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Const
		public RuleCall getConstParserRuleCall_0() { return cConstParserRuleCall_0; }
		
		////ModifierInvocation |
		//VisibilitySpecifier
		public RuleCall getVisibilitySpecifierParserRuleCall_1() { return cVisibilitySpecifierParserRuleCall_1; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstAction_1 = (Action)cGroup.eContents().get(1);
		
		//Const:
		//	"constant" {Const};
		@Override public ParserRule getRule() { return rule; }
		
		//"constant" {Const}
		public Group getGroup() { return cGroup; }
		
		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//{Const}
		public Action getConstAction_1() { return cConstAction_1; }
	}
	public class VisibilitySpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VisibilitySpecifier");
		private final Assignment cVisibilityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumParserRuleCall_0 = (RuleCall)cVisibilityAssignment.eContents().get(0);
		
		//VisibilitySpecifier:
		//	visibility=VisibilityEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityEnum
		public Assignment getVisibilityAssignment() { return cVisibilityAssignment; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumParserRuleCall_0() { return cVisibilityVisibilityEnumParserRuleCall_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableDeclarationOptionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VariableDeclarationOptionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisibilitySpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexedSpeciferParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocationSpecifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///*
		//// Variable Declarations
		//VariableDeclaration returns Statement:
		//	StandardVariableDeclaration |
		//	VarVariableDeclaration |
		//	VarVariableTupleVariableDeclaration
		//;
		//
		//StandardVariableDeclaration:
		//	type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable (
		//		"=" expression=LogicalOperations
		//	)?
		//;
		//
		//VarVariableDeclaration:
		//	varType=VarType variable=Variable (
		//		"=" expression=LogicalOperations
		//	)?
		//;
		//
		//VarVariableTupleVariableDeclaration:
		//	varType=VarType tuple=Tuple (
		//		"=" expression=LogicalOperations
		//	)?
		//;
		//*/ VariableDeclarationOptionalElement:
		//	VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VisibilitySpecifier
		public RuleCall getVisibilitySpecifierParserRuleCall_0() { return cVisibilitySpecifierParserRuleCall_0; }
		
		//IndexedSpecifer
		public RuleCall getIndexedSpeciferParserRuleCall_1() { return cIndexedSpeciferParserRuleCall_1; }
		
		//ConstantSpecifier
		public RuleCall getConstantSpecifierParserRuleCall_2() { return cConstantSpecifierParserRuleCall_2; }
		
		//LocationSpecifier
		public RuleCall getLocationSpecifierParserRuleCall_3() { return cLocationSpecifierParserRuleCall_3; }
	}
	public class IndexedSpeciferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IndexedSpecifer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIndexedSpeciferAction_1 = (Action)cGroup.eContents().get(1);
		
		//IndexedSpecifer:
		//	"indexed" {IndexedSpecifer};
		@Override public ParserRule getRule() { return rule; }
		
		//"indexed" {IndexedSpecifer}
		public Group getGroup() { return cGroup; }
		
		//"indexed"
		public Keyword getIndexedKeyword_0() { return cIndexedKeyword_0; }
		
		//{IndexedSpecifer}
		public Action getIndexedSpeciferAction_1() { return cIndexedSpeciferAction_1; }
	}
	public class ConstantSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ConstantSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstantSpecifierAction_1 = (Action)cGroup.eContents().get(1);
		
		//ConstantSpecifier:
		//	"constant" {ConstantSpecifier};
		@Override public ParserRule getRule() { return rule; }
		
		//"constant" {ConstantSpecifier}
		public Group getGroup() { return cGroup; }
		
		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//{ConstantSpecifier}
		public Action getConstantSpecifierAction_1() { return cConstantSpecifierAction_1; }
	}
	public class LocationSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.LocationSpecifier");
		private final Assignment cLocationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLocationLocationSpecifierEnumParserRuleCall_0 = (RuleCall)cLocationAssignment.eContents().get(0);
		
		//LocationSpecifier:
		//	location=LocationSpecifierEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//location=LocationSpecifierEnum
		public Assignment getLocationAssignment() { return cLocationAssignment; }
		
		//LocationSpecifierEnum
		public RuleCall getLocationLocationSpecifierEnumParserRuleCall_0() { return cLocationLocationSpecifierEnumParserRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cIsVarTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIsVarTypeVarTypeParserRuleCall_1_0 = (RuleCall)cIsVarTypeAssignment_1.eContents().get(0);
		
		//// Types
		//Type:
		//	StandardType | isVarType?=VarType;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardType | isVarType?=VarType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardType
		public RuleCall getStandardTypeParserRuleCall_0() { return cStandardTypeParserRuleCall_0; }
		
		//isVarType?=VarType
		public Assignment getIsVarTypeAssignment_1() { return cIsVarTypeAssignment_1; }
		
		//VarType
		public RuleCall getIsVarTypeVarTypeParserRuleCall_1_0() { return cIsVarTypeVarTypeParserRuleCall_1_0; }
	}
	public class StandardTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StandardType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDimensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionsParserRuleCall_0_1_0 = (RuleCall)cDimensionAssignment_0_1.eContents().get(0);
		private final RuleCall cMappingDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StandardType:
		//	ElementaryType dimension=ArrayDimensions? | MappingDeclaration | QualifiedIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementaryType dimension=ArrayDimensions? | MappingDeclaration | QualifiedIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementaryType dimension=ArrayDimensions?
		public Group getGroup_0() { return cGroup_0; }
		
		//ElementaryType
		public RuleCall getElementaryTypeParserRuleCall_0_0() { return cElementaryTypeParserRuleCall_0_0; }
		
		//dimension=ArrayDimensions?
		public Assignment getDimensionAssignment_0_1() { return cDimensionAssignment_0_1; }
		
		//ArrayDimensions
		public RuleCall getDimensionArrayDimensionsParserRuleCall_0_1_0() { return cDimensionArrayDimensionsParserRuleCall_0_1_0; }
		
		//MappingDeclaration
		public RuleCall getMappingDeclarationParserRuleCall_1() { return cMappingDeclarationParserRuleCall_1; }
		
		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_2() { return cQualifiedIdentifierParserRuleCall_2; }
	}
	public class StandardTypeWithoutQualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StandardTypeWithoutQualifiedIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDimensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionsParserRuleCall_0_1_0 = (RuleCall)cDimensionAssignment_0_1.eContents().get(0);
		private final RuleCall cMappingDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StandardTypeWithoutQualifiedIdentifier:
		//	ElementaryType dimension=ArrayDimensions? | MappingDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementaryType dimension=ArrayDimensions? | MappingDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementaryType dimension=ArrayDimensions?
		public Group getGroup_0() { return cGroup_0; }
		
		//ElementaryType
		public RuleCall getElementaryTypeParserRuleCall_0_0() { return cElementaryTypeParserRuleCall_0_0; }
		
		//dimension=ArrayDimensions?
		public Assignment getDimensionAssignment_0_1() { return cDimensionAssignment_0_1; }
		
		//ArrayDimensions
		public RuleCall getDimensionArrayDimensionsParserRuleCall_0_1_0() { return cDimensionArrayDimensionsParserRuleCall_0_1_0; }
		
		//MappingDeclaration
		public RuleCall getMappingDeclarationParserRuleCall_1() { return cMappingDeclarationParserRuleCall_1; }
	}
	public class ElementaryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ElementaryType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameElementaryTypeNameEnumParserRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ElementaryType:
		//	name=ElementaryTypeNameEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ElementaryTypeNameEnum
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ElementaryTypeNameEnum
		public RuleCall getNameElementaryTypeNameEnumParserRuleCall_0() { return cNameElementaryTypeNameEnumParserRuleCall_0; }
	}
	public class ArrayDimensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArrayDimensions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cArrayDimensionsAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLogicalOperationsParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueLogicalOperationsParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ArrayDimensions:
		//	"[" {ArrayDimensions} value+=LogicalOperations? "]" ("[" value+=LogicalOperations? "]")*;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" {ArrayDimensions} value+=LogicalOperations? "]" ("[" value+=LogicalOperations? "]")*
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{ArrayDimensions}
		public Action getArrayDimensionsAction_1() { return cArrayDimensionsAction_1; }
		
		//value+=LogicalOperations?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LogicalOperations
		public RuleCall getValueLogicalOperationsParserRuleCall_2_0() { return cValueLogicalOperationsParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//("[" value+=LogicalOperations? "]")*
		public Group getGroup_4() { return cGroup_4; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//value+=LogicalOperations?
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//LogicalOperations
		public RuleCall getValueLogicalOperationsParserRuleCall_4_1_0() { return cValueLogicalOperationsParserRuleCall_4_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VarType");
		private final Keyword cVarKeyword = (Keyword)rule.eContents().get(1);
		
		//VarType:
		//	"var";
		@Override public ParserRule getRule() { return rule; }
		
		//"var"
		public Keyword getVarKeyword() { return cVarKeyword; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMembersLogicalOperationsParserRuleCall_2_0_0 = (RuleCall)cMembersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cMembersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cMembersTupleSeparatorParserRuleCall_2_1_0_0 = (RuleCall)cMembersAssignment_2_1_0.eContents().get(0);
		private final Assignment cMembersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMembersLogicalOperationsParserRuleCall_2_1_1_0 = (RuleCall)cMembersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Tuples
		//Tuple:
		//	"(" {Tuple} (members+=LogicalOperations? (members+=TupleSeparator members+=LogicalOperations?)+)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {Tuple} (members+=LogicalOperations? (members+=TupleSeparator members+=LogicalOperations?)+)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{Tuple}
		public Action getTupleAction_1() { return cTupleAction_1; }
		
		//(members+=LogicalOperations? (members+=TupleSeparator members+=LogicalOperations?)+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//members+=LogicalOperations?
		public Assignment getMembersAssignment_2_0() { return cMembersAssignment_2_0; }
		
		//LogicalOperations
		public RuleCall getMembersLogicalOperationsParserRuleCall_2_0_0() { return cMembersLogicalOperationsParserRuleCall_2_0_0; }
		
		//(members+=TupleSeparator members+=LogicalOperations?)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//members+=TupleSeparator
		public Assignment getMembersAssignment_2_1_0() { return cMembersAssignment_2_1_0; }
		
		//TupleSeparator
		public RuleCall getMembersTupleSeparatorParserRuleCall_2_1_0_0() { return cMembersTupleSeparatorParserRuleCall_2_1_0_0; }
		
		//members+=LogicalOperations?
		public Assignment getMembersAssignment_2_1_1() { return cMembersAssignment_2_1_1; }
		
		//LogicalOperations
		public RuleCall getMembersLogicalOperationsParserRuleCall_2_1_1_0() { return cMembersLogicalOperationsParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TupleSeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TupleSeparator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleSeparatorAction_1 = (Action)cGroup.eContents().get(1);
		
		//TupleSeparator:
		//	"," {TupleSeparator};
		@Override public ParserRule getRule() { return rule; }
		
		//"," {TupleSeparator}
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//{TupleSeparator}
		public Action getTupleSeparatorAction_1() { return cTupleSeparatorAction_1; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SimpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Action cStandardVariableDeclarationTypeAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Assignment cPtionalElementsAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cPtionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0 = (RuleCall)cPtionalElementsAssignment_0_0_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_0_1_2 = (Assignment)cGroup_0_0_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_0_0_1_2_0 = (RuleCall)cVariableAssignment_0_0_1_2.eContents().get(0);
		private final Group cGroup_0_0_1_3 = (Group)cGroup_0_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_0_1_3_0 = (Keyword)cGroup_0_0_1_3.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1_3_1 = (Assignment)cGroup_0_0_1_3.eContents().get(1);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_0_0_1_3_1_0 = (RuleCall)cExpressionAssignment_0_0_1_3_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cVarTypeParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_1_0 = (Group)cAlternatives_0_1_1.eContents().get(0);
		private final Action cVarVariableTypeDeclarationAction_0_1_1_0_0 = (Action)cGroup_0_1_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_1_0_1 = (Assignment)cGroup_0_1_1_0.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_0_1_1_0_1_0 = (RuleCall)cVariableAssignment_0_1_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_1_0_2 = (Group)cGroup_0_1_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_0_1_1_0_2_0 = (Keyword)cGroup_0_1_1_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1_0_2_1 = (Assignment)cGroup_0_1_1_0_2.eContents().get(1);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_0_1_1_0_2_1_0 = (RuleCall)cExpressionAssignment_0_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cAlternatives_0_1_1.eContents().get(1);
		private final Action cVarVariableTupleVariableDeclarationAction_0_1_1_1_0 = (Action)cGroup_0_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_0_1_1_1_1_0 = (RuleCall)cTupleAssignment_0_1_1_1_1.eContents().get(0);
		private final Group cGroup_0_1_1_1_2 = (Group)cGroup_0_1_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_0_1_1_1_2_0 = (Keyword)cGroup_0_1_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1_1_2_1 = (Assignment)cGroup_0_1_1_1_2.eContents().get(1);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_0_1_1_1_2_1_0 = (RuleCall)cExpressionAssignment_0_1_1_1_2_1.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cSemicolonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSemicolonSemicolonKeyword_1_0 = (Keyword)cSemicolonAssignment_1.eContents().get(0);
		
		///*
		// * SimpleStatement
		// * --------------------
		// * SimpleStatement:
		// * SimpleStatement2 ";"
		// * ;
		// */ SimpleStatement:
		//	(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//	ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?) | VarType
		//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//	{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)) | ExpressionStatement)
		//	semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)) | ExpressionStatement)
		//semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)) | ExpressionStatement)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//StandardTypeWithoutQualifiedIdentifier
		public RuleCall getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0() { return cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0; }
		
		//({StandardVariableDeclaration.type=current} ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//expression=LogicalOperations)?)
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//{StandardVariableDeclaration.type=current}
		public Action getStandardVariableDeclarationTypeAction_0_0_1_0() { return cStandardVariableDeclarationTypeAction_0_0_1_0; }
		
		//ptionalElements+=VariableDeclarationOptionalElement*
		public Assignment getPtionalElementsAssignment_0_0_1_1() { return cPtionalElementsAssignment_0_0_1_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getPtionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0() { return cPtionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_0_1_2() { return cVariableAssignment_0_0_1_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_1_2_0() { return cVariableVariableParserRuleCall_0_0_1_2_0; }
		
		//("=" expression=LogicalOperations)?
		public Group getGroup_0_0_1_3() { return cGroup_0_0_1_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1_3_0() { return cEqualsSignKeyword_0_0_1_3_0; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment_0_0_1_3_1() { return cExpressionAssignment_0_0_1_3_1; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_0_0_1_3_1_0() { return cExpressionLogicalOperationsParserRuleCall_0_0_1_3_1_0; }
		
		//VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations))
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//VarType
		public RuleCall getVarTypeParserRuleCall_0_1_0() { return cVarTypeParserRuleCall_0_1_0; }
		
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations))
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//{VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations)
		public Group getGroup_0_1_1_0() { return cGroup_0_1_1_0; }
		
		//{VarVariableTypeDeclaration}
		public Action getVarVariableTypeDeclarationAction_0_1_1_0_0() { return cVarVariableTypeDeclarationAction_0_1_1_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_1_1_0_1() { return cVariableAssignment_0_1_1_0_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_1_0_1_0() { return cVariableVariableParserRuleCall_0_1_1_0_1_0; }
		
		//("=" expression=LogicalOperations)
		public Group getGroup_0_1_1_0_2() { return cGroup_0_1_1_0_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1_0_2_0() { return cEqualsSignKeyword_0_1_1_0_2_0; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment_0_1_1_0_2_1() { return cExpressionAssignment_0_1_1_0_2_1; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_0_1_1_0_2_1_0() { return cExpressionLogicalOperationsParserRuleCall_0_1_1_0_2_1_0; }
		
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }
		
		//{VarVariableTupleVariableDeclaration}
		public Action getVarVariableTupleVariableDeclarationAction_0_1_1_1_0() { return cVarVariableTupleVariableDeclarationAction_0_1_1_1_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_0_1_1_1_1() { return cTupleAssignment_0_1_1_1_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_0_1_1_1_1_0() { return cTupleTupleParserRuleCall_0_1_1_1_1_0; }
		
		//("=" expression=LogicalOperations)
		public Group getGroup_0_1_1_1_2() { return cGroup_0_1_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1_1_2_0() { return cEqualsSignKeyword_0_1_1_1_2_0; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment_0_1_1_1_2_1() { return cExpressionAssignment_0_1_1_1_2_1; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_0_1_1_1_2_1_0() { return cExpressionLogicalOperationsParserRuleCall_0_1_1_1_2_1_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0_2() { return cExpressionStatementParserRuleCall_0_2; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_1() { return cSemicolonAssignment_1; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_1_0() { return cSemicolonSemicolonKeyword_1_0; }
	}
	public class SimpleStatement2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SimpleStatement2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cStandardVariableDeclarationTypeAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0 = (RuleCall)cOptionalElementsAssignment_0_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_0_1_2_0 = (RuleCall)cVariableAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_0_1_3_1_0 = (RuleCall)cExpressionAssignment_0_1_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cVarVariableTypeDeclarationAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_1_0_1_0 = (RuleCall)cVariableAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_1_1_0_2_1_0 = (RuleCall)cExpressionAssignment_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cVarVariableTupleVariableDeclarationAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_1_1_1_1_0 = (RuleCall)cTupleAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_1_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_1_2_1.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleStatement2:
		//	StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?) |
		//	VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//	{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)) | ExpressionStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)) | ExpressionStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//StandardTypeWithoutQualifiedIdentifier
		public RuleCall getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0() { return cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0; }
		
		//({StandardVariableDeclaration.type=current} optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//expression=LogicalOperations)?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{StandardVariableDeclaration.type=current}
		public Action getStandardVariableDeclarationTypeAction_0_1_0() { return cStandardVariableDeclarationTypeAction_0_1_0; }
		
		//optionalElements+=VariableDeclarationOptionalElement*
		public Assignment getOptionalElementsAssignment_0_1_1() { return cOptionalElementsAssignment_0_1_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0() { return cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_1_2() { return cVariableAssignment_0_1_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_2_0() { return cVariableVariableParserRuleCall_0_1_2_0; }
		
		//("=" expression=LogicalOperations)?
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_3_0() { return cEqualsSignKeyword_0_1_3_0; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment_0_1_3_1() { return cExpressionAssignment_0_1_3_1; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_0_1_3_1_0() { return cExpressionLogicalOperationsParserRuleCall_0_1_3_1_0; }
		
		//VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations))
		public Group getGroup_1() { return cGroup_1; }
		
		//VarType
		public RuleCall getVarTypeParserRuleCall_1_0() { return cVarTypeParserRuleCall_1_0; }
		
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//{VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{VarVariableTypeDeclaration}
		public Action getVarVariableTypeDeclarationAction_1_1_0_0() { return cVarVariableTypeDeclarationAction_1_1_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_1_0_1() { return cVariableAssignment_1_1_0_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_0_1_0() { return cVariableVariableParserRuleCall_1_1_0_1_0; }
		
		//("=" expression=LogicalOperations)
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0_2_0() { return cEqualsSignKeyword_1_1_0_2_0; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment_1_1_0_2_1() { return cExpressionAssignment_1_1_0_2_1; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_1_1_0_2_1_0() { return cExpressionLogicalOperationsParserRuleCall_1_1_0_2_1_0; }
		
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//{VarVariableTupleVariableDeclaration}
		public Action getVarVariableTupleVariableDeclarationAction_1_1_1_0() { return cVarVariableTupleVariableDeclarationAction_1_1_1_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_1_1_1_1() { return cTupleAssignment_1_1_1_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_1_1_1_0() { return cTupleTupleParserRuleCall_1_1_1_1_0; }
		
		//("=" expression=LogicalOperations)
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_1_2_0() { return cEqualsSignKeyword_1_1_1_2_0; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment_1_1_1_2_1() { return cExpressionAssignment_1_1_1_2_1; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_1_1_1_2_1_0() { return cExpressionLogicalOperationsParserRuleCall_1_1_1_2_1_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_2() { return cExpressionStatementParserRuleCall_2; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ExpressionStatement");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ExpressionStatement:
		//	expression=LogicalOperations;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_0() { return cExpressionLogicalOperationsParserRuleCall_0; }
	}
	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.QualifiedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		
		//QualifiedIdentifier:
		//	identifier=ID qualifiers+=Qualifier*;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID qualifiers+=Qualifier*
		public Group getGroup() { return cGroup; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }
		
		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }
		
		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_0() { return cQualifiersQualifierParserRuleCall_1_0; }
	}
	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Qualifier:
		//	Field | Index | Arguments;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Index | Arguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Index
		public RuleCall getIndexParserRuleCall_1() { return cIndexParserRuleCall_1; }
		
		//Arguments
		public RuleCall getArgumentsParserRuleCall_2() { return cArgumentsParserRuleCall_2; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		
		//Field:
		//	"." field=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"." field=ID
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//field=ID
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_0() { return cFieldIDTerminalRuleCall_1_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIndexAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueLogicalOperationsParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Index:
		//	"[" {Index} value=LogicalOperations? "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" {Index} value=LogicalOperations? "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{Index}
		public Action getIndexAction_1() { return cIndexAction_1; }
		
		//value=LogicalOperations?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//LogicalOperations
		public RuleCall getValueLogicalOperationsParserRuleCall_2_0() { return cValueLogicalOperationsParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Arguments");
		private final Assignment cArgumentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArgumentsFunctionCallArgumentsParserRuleCall_0 = (RuleCall)cArgumentsAssignment.eContents().get(0);
		
		//Arguments:
		//	arguments=FunctionCallArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//arguments=FunctionCallArguments
		public Assignment getArgumentsAssignment() { return cArgumentsAssignment; }
		
		//FunctionCallArguments
		public RuleCall getArgumentsFunctionCallArgumentsParserRuleCall_0() { return cArgumentsFunctionCallArgumentsParserRuleCall_0; }
	}
	public class ReturnsParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ReturnsParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReturnsParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersReturnParameterDeclarationParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersReturnParameterDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		///*
		// * Modifier:
		// "modifier" name=ID parameters=ParameterList? block=Body
		//;
		//
		//Event:
		//	"event" name=ID parameters=ParameterList? ";"
		//;
		//*
		//
		//ModifierInvocation:
		//	name=[Modifier] args=FunctionCallListArguments?
		//;*/ /*
		//ParameterList:
		//	"("
		//		{ParameterList} (parameters+=VariableDeclaration (
		//			"," parameters+=VariableDeclaration)*
		//		)?
		//	")"
		//;
		//*/ ReturnsParameterList:
		//	"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{ReturnsParameterList}
		public Action getReturnsParameterListAction_1() { return cReturnsParameterListAction_1; }
		
		//(parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=ReturnParameterDeclaration
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//ReturnParameterDeclaration
		public RuleCall getParametersReturnParameterDeclarationParserRuleCall_2_0_0() { return cParametersReturnParameterDeclarationParserRuleCall_2_0_0; }
		
		//("," parameters+=ReturnParameterDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=ReturnParameterDeclaration
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//ReturnParameterDeclaration
		public RuleCall getParametersReturnParameterDeclarationParserRuleCall_2_1_1_0() { return cParametersReturnParameterDeclarationParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReturnParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ReturnParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRefTypeParserRuleCall_0_0 = (RuleCall)cTypeRefAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//ReturnParameterDeclaration:
		//	typeRef=Type variable=Variable?;
		@Override public ParserRule getRule() { return rule; }
		
		//typeRef=Type variable=Variable?
		public Group getGroup() { return cGroup; }
		
		//typeRef=Type
		public Assignment getTypeRefAssignment_0() { return cTypeRefAssignment_0; }
		
		//Type
		public RuleCall getTypeRefTypeParserRuleCall_0_0() { return cTypeRefTypeParserRuleCall_0_0; }
		
		//variable=Variable?
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
	}
	public class LoopStructuresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.LoopStructures");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LoopStructures:
		//	IfStatement | WhileStatement | ForStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//IfStatement | WhileStatement | ForStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_1() { return cWhileStatementParserRuleCall_1; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_2() { return cForStatementParserRuleCall_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLoopStructuresParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPlaceHolderStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cAlternatives.eContents().get(3);
		private final RuleCall cContinueStatementParserRuleCall_3_0 = (RuleCall)cAlternatives_3.eContents().get(0);
		private final RuleCall cBreakStatementParserRuleCall_3_1 = (RuleCall)cAlternatives_3.eContents().get(1);
		private final RuleCall cReturnStatementParserRuleCall_3_2 = (RuleCall)cAlternatives_3.eContents().get(2);
		private final RuleCall cThrowStatementParserRuleCall_3_3 = (RuleCall)cAlternatives_3.eContents().get(3);
		private final RuleCall cDeleteStatementParserRuleCall_3_4 = (RuleCall)cAlternatives_3.eContents().get(4);
		private final RuleCall cSimpleStatementParserRuleCall_3_5 = (RuleCall)cAlternatives_3.eContents().get(5);
		
		//Statement:
		//	LoopStructures | Body | PlaceHolderStatement | (ContinueStatement | BreakStatement | ReturnStatement | ThrowStatement
		//	| DeleteStatement | SimpleStatement);
		@Override public ParserRule getRule() { return rule; }
		
		//LoopStructures | Body | PlaceHolderStatement | (ContinueStatement | BreakStatement | ReturnStatement | ThrowStatement |
		//DeleteStatement | SimpleStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LoopStructures
		public RuleCall getLoopStructuresParserRuleCall_0() { return cLoopStructuresParserRuleCall_0; }
		
		//Body
		public RuleCall getBodyParserRuleCall_1() { return cBodyParserRuleCall_1; }
		
		//PlaceHolderStatement
		public RuleCall getPlaceHolderStatementParserRuleCall_2() { return cPlaceHolderStatementParserRuleCall_2; }
		
		//(ContinueStatement | BreakStatement | ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement)
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_3_0() { return cContinueStatementParserRuleCall_3_0; }
		
		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_3_1() { return cBreakStatementParserRuleCall_3_1; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_3_2() { return cReturnStatementParserRuleCall_3_2; }
		
		//ThrowStatement
		public RuleCall getThrowStatementParserRuleCall_3_3() { return cThrowStatementParserRuleCall_3_3; }
		
		//DeleteStatement
		public RuleCall getDeleteStatementParserRuleCall_3_4() { return cDeleteStatementParserRuleCall_3_4; }
		
		//SimpleStatement
		public RuleCall getSimpleStatementParserRuleCall_3_5() { return cSimpleStatementParserRuleCall_3_5; }
	}
	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.DeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableQualifiedIdentifierParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteStatement:
		//	"delete" variable=QualifiedIdentifier ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"delete" variable=QualifiedIdentifier ";"
		public Group getGroup() { return cGroup; }
		
		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//variable=QualifiedIdentifier
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//QualifiedIdentifier
		public RuleCall getVariableQualifiedIdentifierParserRuleCall_1_0() { return cVariableQualifiedIdentifierParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionLogicalOperationsParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTrueBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrueBodyStatementParserRuleCall_4_0 = (RuleCall)cTrueBodyAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFalseBodyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFalseBodyStatementParserRuleCall_5_1_0 = (RuleCall)cFalseBodyAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	"if" "(" condition=LogicalOperations ")"
		//	trueBody=Statement (=> "else" falseBody=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" condition=LogicalOperations ")" trueBody=Statement (=> "else" falseBody=Statement)?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=LogicalOperations
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//LogicalOperations
		public RuleCall getConditionLogicalOperationsParserRuleCall_2_0() { return cConditionLogicalOperationsParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//trueBody=Statement
		public Assignment getTrueBodyAssignment_4() { return cTrueBodyAssignment_4; }
		
		//Statement
		public RuleCall getTrueBodyStatementParserRuleCall_4_0() { return cTrueBodyStatementParserRuleCall_4_0; }
		
		//(=> "else" falseBody=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//falseBody=Statement
		public Assignment getFalseBodyAssignment_5_1() { return cFalseBodyAssignment_5_1; }
		
		//Statement
		public RuleCall getFalseBodyStatementParserRuleCall_5_1_0() { return cFalseBodyStatementParserRuleCall_5_1_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionLogicalOperationsParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	"while" "(" condition=LogicalOperations ")"
		//	body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" "(" condition=LogicalOperations ")" body=Statement
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=LogicalOperations
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//LogicalOperations
		public RuleCall getConditionLogicalOperationsParserRuleCall_2_0() { return cConditionLogicalOperationsParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitExpressionSimpleStatement2ParserRuleCall_2_0 = (RuleCall)cInitExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionLogicalOperationsParserRuleCall_4_0 = (RuleCall)cConditionExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopExpressionExpressionStatementParserRuleCall_6_0 = (RuleCall)cLoopExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStatementParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=LogicalOperations? ";"
		//	loopExpression=ExpressionStatement? ")"
		//	body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=LogicalOperations? ";"
		//loopExpression=ExpressionStatement? ")" body=Statement
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initExpression=SimpleStatement2?
		public Assignment getInitExpressionAssignment_2() { return cInitExpressionAssignment_2; }
		
		//SimpleStatement2
		public RuleCall getInitExpressionSimpleStatement2ParserRuleCall_2_0() { return cInitExpressionSimpleStatement2ParserRuleCall_2_0; }
		
		//=> ";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//conditionExpression=LogicalOperations?
		public Assignment getConditionExpressionAssignment_4() { return cConditionExpressionAssignment_4; }
		
		//LogicalOperations
		public RuleCall getConditionExpressionLogicalOperationsParserRuleCall_4_0() { return cConditionExpressionLogicalOperationsParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//loopExpression=ExpressionStatement?
		public Assignment getLoopExpressionAssignment_6() { return cLoopExpressionAssignment_6; }
		
		//ExpressionStatement
		public RuleCall getLoopExpressionExpressionStatementParserRuleCall_6_0() { return cLoopExpressionExpressionStatementParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=Statement
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_8_0() { return cBodyStatementParserRuleCall_8_0; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBodyAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Body:
		//	"{" {Body} (statements+=Statement statements+=Statement*)? "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" {Body} (statements+=Statement statements+=Statement*)? "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{Body}
		public Action getBodyAction_1() { return cBodyAction_1; }
		
		//(statements+=Statement statements+=Statement*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_1_0() { return cStatementsStatementParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cContinueAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStatement:
		//	"continue" {Continue} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" {Continue} ";"
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//{Continue}
		public Action getContinueAction_1() { return cContinueAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBreakStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	"break" {BreakStatement} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"break" {BreakStatement} ";"
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//{BreakStatement}
		public Action getBreakStatementAction_1() { return cBreakStatementAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReturnStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//	"return" {ReturnStatement} expression=LogicalOperations? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"return" {ReturnStatement} expression=LogicalOperations? ";"
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_1() { return cReturnStatementAction_1; }
		
		//expression=LogicalOperations?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_2_0() { return cExpressionLogicalOperationsParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ThrowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ThrowStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cThrowStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ThrowStatement:
		//	"throw" {ThrowStatement} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"throw" {ThrowStatement} ";"
		public Group getGroup() { return cGroup; }
		
		//"throw"
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }
		
		//{ThrowStatement}
		public Action getThrowStatementAction_1() { return cThrowStatementAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PlaceHolderStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PlaceHolderStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPlaceHolderStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Only allowed in a Modifier DAF
		//PlaceHolderStatement:
		//	"_" {PlaceHolderStatement} ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"_" {PlaceHolderStatement} ";"?
		public Group getGroup() { return cGroup; }
		
		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }
		
		//{PlaceHolderStatement}
		public Action getPlaceHolderStatementAction_1() { return cPlaceHolderStatementAction_1; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class LogicalOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.LogicalOperations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirstLiteralParserRuleCall_0_0_0 = (RuleCall)cFirstAssignment_0_0.eContents().get(0);
		private final Assignment cOperationsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cOperationsConditionOperationParserRuleCall_0_1_0 = (RuleCall)cOperationsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNegateAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNegateNOTKeyword_1_0_0 = (Keyword)cNegateAssignment_1_0.eContents().get(0);
		private final Assignment cFirstAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFirstLiteralParserRuleCall_1_1_0 = (RuleCall)cFirstAssignment_1_1.eContents().get(0);
		private final Assignment cOperationsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperationsConditionOperationParserRuleCall_1_2_0 = (RuleCall)cOperationsAssignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cTernaryAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cTernaryTERNARYKeyword_2_0_0 = (Keyword)cTernaryAssignment_2_0.eContents().get(0);
		private final Assignment cFirstAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFirstLiteralParserRuleCall_2_1_0 = (RuleCall)cFirstAssignment_2_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cTrueAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTrueLiteralParserRuleCall_2_3_0 = (RuleCall)cTrueAssignment_2_3.eContents().get(0);
		private final Keyword cColonKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cFalseAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cFalseLiteralParserRuleCall_2_5_0 = (RuleCall)cFalseAssignment_2_5.eContents().get(0);
		
		//LogicalOperations:
		//	first=Literal operations+=ConditionOperation* | negate?="NOT" first=Literal operations+=ConditionOperation* |
		//	ternary?="TERNARY" first=Literal "?" true=Literal ":" false=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//first=Literal operations+=ConditionOperation* | negate?="NOT" first=Literal operations+=ConditionOperation* |
		//ternary?="TERNARY" first=Literal "?" true=Literal ":" false=Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//first=Literal operations+=ConditionOperation*
		public Group getGroup_0() { return cGroup_0; }
		
		//first=Literal
		public Assignment getFirstAssignment_0_0() { return cFirstAssignment_0_0; }
		
		//Literal
		public RuleCall getFirstLiteralParserRuleCall_0_0_0() { return cFirstLiteralParserRuleCall_0_0_0; }
		
		//operations+=ConditionOperation*
		public Assignment getOperationsAssignment_0_1() { return cOperationsAssignment_0_1; }
		
		//ConditionOperation
		public RuleCall getOperationsConditionOperationParserRuleCall_0_1_0() { return cOperationsConditionOperationParserRuleCall_0_1_0; }
		
		//negate?="NOT" first=Literal operations+=ConditionOperation*
		public Group getGroup_1() { return cGroup_1; }
		
		//negate?="NOT"
		public Assignment getNegateAssignment_1_0() { return cNegateAssignment_1_0; }
		
		//"NOT"
		public Keyword getNegateNOTKeyword_1_0_0() { return cNegateNOTKeyword_1_0_0; }
		
		//first=Literal
		public Assignment getFirstAssignment_1_1() { return cFirstAssignment_1_1; }
		
		//Literal
		public RuleCall getFirstLiteralParserRuleCall_1_1_0() { return cFirstLiteralParserRuleCall_1_1_0; }
		
		//operations+=ConditionOperation*
		public Assignment getOperationsAssignment_1_2() { return cOperationsAssignment_1_2; }
		
		//ConditionOperation
		public RuleCall getOperationsConditionOperationParserRuleCall_1_2_0() { return cOperationsConditionOperationParserRuleCall_1_2_0; }
		
		//ternary?="TERNARY" first=Literal "?" true=Literal ":" false=Literal
		public Group getGroup_2() { return cGroup_2; }
		
		//ternary?="TERNARY"
		public Assignment getTernaryAssignment_2_0() { return cTernaryAssignment_2_0; }
		
		//"TERNARY"
		public Keyword getTernaryTERNARYKeyword_2_0_0() { return cTernaryTERNARYKeyword_2_0_0; }
		
		//first=Literal
		public Assignment getFirstAssignment_2_1() { return cFirstAssignment_2_1; }
		
		//Literal
		public RuleCall getFirstLiteralParserRuleCall_2_1_0() { return cFirstLiteralParserRuleCall_2_1_0; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_2_2() { return cQuestionMarkKeyword_2_2; }
		
		//true=Literal
		public Assignment getTrueAssignment_2_3() { return cTrueAssignment_2_3; }
		
		//Literal
		public RuleCall getTrueLiteralParserRuleCall_2_3_0() { return cTrueLiteralParserRuleCall_2_3_0; }
		
		//":"
		public Keyword getColonKeyword_2_4() { return cColonKeyword_2_4; }
		
		//false=Literal
		public Assignment getFalseAssignment_2_5() { return cFalseAssignment_2_5; }
		
		//Literal
		public RuleCall getFalseLiteralParserRuleCall_2_5_0() { return cFalseLiteralParserRuleCall_2_5_0; }
	}
	public class ConditionOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ConditionOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationLogicalOperationLiteralEnumRuleCall_0_0 = (RuleCall)cOperationAssignment_0.eContents().get(0);
		private final Assignment cNegateSecondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cNegateSecondNOTKeyword_1_0 = (Keyword)cNegateSecondAssignment_1.eContents().get(0);
		private final Assignment cSecondsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondsLiteralParserRuleCall_2_0 = (RuleCall)cSecondsAssignment_2.eContents().get(0);
		
		//ConditionOperation:
		//	operation=LogicalOperationLiteral negateSecond="NOT"? seconds=Literal;
		@Override public ParserRule getRule() { return rule; }
		
		//operation=LogicalOperationLiteral negateSecond="NOT"? seconds=Literal
		public Group getGroup() { return cGroup; }
		
		//operation=LogicalOperationLiteral
		public Assignment getOperationAssignment_0() { return cOperationAssignment_0; }
		
		//LogicalOperationLiteral
		public RuleCall getOperationLogicalOperationLiteralEnumRuleCall_0_0() { return cOperationLogicalOperationLiteralEnumRuleCall_0_0; }
		
		//negateSecond="NOT"?
		public Assignment getNegateSecondAssignment_1() { return cNegateSecondAssignment_1; }
		
		//"NOT"
		public Keyword getNegateSecondNOTKeyword_1_0() { return cNegateSecondNOTKeyword_1_0; }
		
		//seconds=Literal
		public Assignment getSecondsAssignment_2() { return cSecondsAssignment_2; }
		
		//Literal
		public RuleCall getSecondsLiteralParserRuleCall_2_0() { return cSecondsLiteralParserRuleCall_2_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialVariablesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cGasleftFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBlockhashFunctionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMathematicalFunctionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cHashFunctionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cEcrecoverFunctionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Literal:
		//	SpecialVariables | BooleanConst | NumericLiteral | StringLiteral | GasleftFunction | BlockhashFunction |
		//	MathematicalFunction | HashFunction | EcrecoverFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//SpecialVariables | BooleanConst | NumericLiteral | StringLiteral | GasleftFunction | BlockhashFunction |
		//MathematicalFunction | HashFunction | EcrecoverFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpecialVariables
		public RuleCall getSpecialVariablesParserRuleCall_0() { return cSpecialVariablesParserRuleCall_0; }
		
		//BooleanConst
		public RuleCall getBooleanConstParserRuleCall_1() { return cBooleanConstParserRuleCall_1; }
		
		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_2() { return cNumericLiteralParserRuleCall_2; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }
		
		//GasleftFunction
		public RuleCall getGasleftFunctionParserRuleCall_4() { return cGasleftFunctionParserRuleCall_4; }
		
		//BlockhashFunction
		public RuleCall getBlockhashFunctionParserRuleCall_5() { return cBlockhashFunctionParserRuleCall_5; }
		
		//MathematicalFunction
		public RuleCall getMathematicalFunctionParserRuleCall_6() { return cMathematicalFunctionParserRuleCall_6; }
		
		//HashFunction
		public RuleCall getHashFunctionParserRuleCall_7() { return cHashFunctionParserRuleCall_7; }
		
		//EcrecoverFunction
		public RuleCall getEcrecoverFunctionParserRuleCall_8() { return cEcrecoverFunctionParserRuleCall_8; }
	}
	public class GasleftFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.GasleftFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameGasleftKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GasleftFunction:
		//	name="gasleft" "(" ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name="gasleft" "(" ")"
		public Group getGroup() { return cGroup; }
		
		//name="gasleft"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"gasleft"
		public Keyword getNameGasleftKeyword_0_0() { return cNameGasleftKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class BlockhashFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BlockhashFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBlockhashKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterIntParameterParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BlockhashFunction:
		//	"blockhash" "(" parameter=IntParameter ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"blockhash" "(" parameter=IntParameter ")"
		public Group getGroup() { return cGroup; }
		
		//"blockhash"
		public Keyword getBlockhashKeyword_0() { return cBlockhashKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameter=IntParameter
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//IntParameter
		public RuleCall getParameterIntParameterParserRuleCall_2_0() { return cParameterIntParameterParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class MathematicalFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MathematicalFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cFunctionAlternatives_0_0 = (Alternatives)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cFunctionAddmodKeyword_0_0_0 = (Keyword)cFunctionAlternatives_0_0.eContents().get(0);
		private final Keyword cFunctionMulmodKeyword_0_0_1 = (Keyword)cFunctionAlternatives_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersIntParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersIntParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParametersIntParameterParserRuleCall_6_0 = (RuleCall)cParametersAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MathematicalFunction:
		//	function=("addmod" | "mulmod") "("
		//	parameters+=IntParameter ","
		//	parameters+=IntParameter ","
		//	parameters+=IntParameter
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//function=("addmod" | "mulmod") "(" parameters+=IntParameter "," parameters+=IntParameter "," parameters+=IntParameter
		//")"
		public Group getGroup() { return cGroup; }
		
		//function=("addmod" | "mulmod")
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//("addmod" | "mulmod")
		public Alternatives getFunctionAlternatives_0_0() { return cFunctionAlternatives_0_0; }
		
		//"addmod"
		public Keyword getFunctionAddmodKeyword_0_0_0() { return cFunctionAddmodKeyword_0_0_0; }
		
		//"mulmod"
		public Keyword getFunctionMulmodKeyword_0_0_1() { return cFunctionMulmodKeyword_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters+=IntParameter
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_2_0() { return cParametersIntParameterParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//parameters+=IntParameter
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_4_0() { return cParametersIntParameterParserRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//parameters+=IntParameter
		public Assignment getParametersAssignment_6() { return cParametersAssignment_6; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_6_0() { return cParametersIntParameterParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class EcrecoverFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EcrecoverFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFunctionEcrecoverKeyword_0_0 = (Keyword)cFunctionAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersIntParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersIntParameterParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cParametersAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cParametersIntParameterParserRuleCall_6_0 = (RuleCall)cParametersAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cParametersAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParametersIntParameterParserRuleCall_8_0 = (RuleCall)cParametersAssignment_8.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//EcrecoverFunction:
		//	function="ecrecover" "("
		//	parameters+=IntParameter ","
		//	parameters+=IntParameter ","
		//	parameters+=IntParameter ","
		//	parameters+=IntParameter
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//function="ecrecover" "(" parameters+=IntParameter "," parameters+=IntParameter "," parameters+=IntParameter ","
		//parameters+=IntParameter ")"
		public Group getGroup() { return cGroup; }
		
		//function="ecrecover"
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }
		
		//"ecrecover"
		public Keyword getFunctionEcrecoverKeyword_0_0() { return cFunctionEcrecoverKeyword_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters+=IntParameter
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_2_0() { return cParametersIntParameterParserRuleCall_2_0; }
		
		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
		
		//parameters+=IntParameter
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_4_0() { return cParametersIntParameterParserRuleCall_4_0; }
		
		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//parameters+=IntParameter
		public Assignment getParametersAssignment_6() { return cParametersAssignment_6; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_6_0() { return cParametersIntParameterParserRuleCall_6_0; }
		
		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }
		
		//parameters+=IntParameter
		public Assignment getParametersAssignment_8() { return cParametersAssignment_8; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_8_0() { return cParametersIntParameterParserRuleCall_8_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class HashFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.HashFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cNameAlternatives_0_0 = (Alternatives)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameKeccak256Keyword_0_0_0 = (Keyword)cNameAlternatives_0_0.eContents().get(0);
		private final Keyword cNameSha256Keyword_0_0_1 = (Keyword)cNameAlternatives_0_0.eContents().get(1);
		private final Keyword cNameRipemd160Keyword_0_0_2 = (Keyword)cNameAlternatives_0_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersIntParameterParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HashFunction:
		//	name=("keccak256" | "sha256" | "ripemd160") "(" parameters=IntParameter ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=("keccak256" | "sha256" | "ripemd160") "(" parameters=IntParameter ")"
		public Group getGroup() { return cGroup; }
		
		//name=("keccak256" | "sha256" | "ripemd160")
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//("keccak256" | "sha256" | "ripemd160")
		public Alternatives getNameAlternatives_0_0() { return cNameAlternatives_0_0; }
		
		//"keccak256"
		public Keyword getNameKeccak256Keyword_0_0_0() { return cNameKeccak256Keyword_0_0_0; }
		
		//"sha256"
		public Keyword getNameSha256Keyword_0_0_1() { return cNameSha256Keyword_0_0_1; }
		
		//"ripemd160"
		public Keyword getNameRipemd160Keyword_0_0_2() { return cNameRipemd160Keyword_0_0_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//parameters=IntParameter
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//IntParameter
		public RuleCall getParametersIntParameterParserRuleCall_2_0() { return cParametersIntParameterParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class IntParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IntParameter");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParamArithmeticOperationsParserRuleCall_0_0 = (RuleCall)cParamAssignment_0.eContents().get(0);
		private final Assignment cFunAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunFunctionCallParserRuleCall_1_0 = (RuleCall)cFunAssignment_1.eContents().get(0);
		
		//IntParameter:
		//	param=ArithmeticOperations | fun=FunctionCall;
		@Override public ParserRule getRule() { return rule; }
		
		//param=ArithmeticOperations | fun=FunctionCall
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//param=ArithmeticOperations
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }
		
		//ArithmeticOperations
		public RuleCall getParamArithmeticOperationsParserRuleCall_0_0() { return cParamArithmeticOperationsParserRuleCall_0_0; }
		
		//fun=FunctionCall
		public Assignment getFunAssignment_1() { return cFunAssignment_1; }
		
		//FunctionCall
		public RuleCall getFunFunctionCallParserRuleCall_1_0() { return cFunFunctionCallParserRuleCall_1_0; }
	}
	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameFunctionDefinitionCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameFunctionDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cNameFunctionDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersLogicalOperationsParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersLogicalOperationsParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//	name=[FunctionDefinition] "(" (parameters+=LogicalOperations ("," parameters+=LogicalOperations)*)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//name=[FunctionDefinition] "(" (parameters+=LogicalOperations ("," parameters+=LogicalOperations)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//name=[FunctionDefinition]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[FunctionDefinition]
		public CrossReference getNameFunctionDefinitionCrossReference_0_0() { return cNameFunctionDefinitionCrossReference_0_0; }
		
		//ID
		public RuleCall getNameFunctionDefinitionIDTerminalRuleCall_0_0_1() { return cNameFunctionDefinitionIDTerminalRuleCall_0_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(parameters+=LogicalOperations ("," parameters+=LogicalOperations)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=LogicalOperations
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//LogicalOperations
		public RuleCall getParametersLogicalOperationsParserRuleCall_2_0_0() { return cParametersLogicalOperationsParserRuleCall_2_0_0; }
		
		//("," parameters+=LogicalOperations)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=LogicalOperations
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//LogicalOperations
		public RuleCall getParametersLogicalOperationsParserRuleCall_2_1_1_0() { return cParametersLogicalOperationsParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ArithmeticOperationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ArithmeticOperations");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstPrimaryArithmeticParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Assignment cSecondsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSecondsSecondOperatorsParserRuleCall_1_0 = (RuleCall)cSecondsAssignment_1.eContents().get(0);
		
		//ArithmeticOperations:
		//	first=PrimaryArithmetic seconds+=SecondOperators*;
		@Override public ParserRule getRule() { return rule; }
		
		//first=PrimaryArithmetic seconds+=SecondOperators*
		public Group getGroup() { return cGroup; }
		
		//first=PrimaryArithmetic
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//PrimaryArithmetic
		public RuleCall getFirstPrimaryArithmeticParserRuleCall_0_0() { return cFirstPrimaryArithmeticParserRuleCall_0_0; }
		
		//seconds+=SecondOperators*
		public Assignment getSecondsAssignment_1() { return cSecondsAssignment_1; }
		
		//SecondOperators
		public RuleCall getSecondsSecondOperatorsParserRuleCall_1_0() { return cSecondsSecondOperatorsParserRuleCall_1_0; }
	}
	public class PrimaryArithmeticElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.PrimaryArithmetic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumericLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalOperationsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PrimaryArithmetic:
		//	NumericLiteral |
		//	"(" LogicalOperations ")";
		@Override public ParserRule getRule() { return rule; }
		
		//NumericLiteral | "(" LogicalOperations ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumericLiteral
		public RuleCall getNumericLiteralParserRuleCall_0() { return cNumericLiteralParserRuleCall_0; }
		
		//"(" LogicalOperations ")"
		public Group getGroup_1() { return cGroup_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//LogicalOperations
		public RuleCall getLogicalOperationsParserRuleCall_1_1() { return cLogicalOperationsParserRuleCall_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class SecondOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SecondOperators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Keyword cOperatorSolidusKeyword_0_0_2 = (Keyword)cOperatorAlternatives_0_0.eContents().get(2);
		private final Keyword cOperatorAsteriskKeyword_0_0_3 = (Keyword)cOperatorAlternatives_0_0.eContents().get(3);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuePrimaryArithmeticParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//SecondOperators:
		//	operator=("+" | "-" | "/" | "*") value=PrimaryArithmetic;
		@Override public ParserRule getRule() { return rule; }
		
		//operator=("+" | "-" | "/" | "*") value=PrimaryArithmetic
		public Group getGroup() { return cGroup; }
		
		//operator=("+" | "-" | "/" | "*")
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//("+" | "-" | "/" | "*")
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_0_0_0() { return cOperatorPlusSignKeyword_0_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_0_0_1() { return cOperatorHyphenMinusKeyword_0_0_1; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_0_0_2() { return cOperatorSolidusKeyword_0_0_2; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_0_0_3() { return cOperatorAsteriskKeyword_0_0_3; }
		
		//value=PrimaryArithmetic
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//PrimaryArithmetic
		public RuleCall getValuePrimaryArithmeticParserRuleCall_1_0() { return cValuePrimaryArithmeticParserRuleCall_1_0; }
	}
	public class BooleanConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BooleanConst");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanLiteralEnumEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanConst:
		//	value=BooleanLiteralEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BooleanLiteralEnum
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanLiteralEnum
		public RuleCall getValueBooleanLiteralEnumEnumRuleCall_0() { return cValueBooleanLiteralEnumEnumRuleCall_0; }
	}
	public class NumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NumericLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cIntValueAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cIntValueNumberDimensionlessParserRuleCall_0_0_0 = (RuleCall)cIntValueAssignment_0_0.eContents().get(0);
		private final Assignment cHexValueAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cHexValueHexLiteralParserRuleCall_0_1_0 = (RuleCall)cHexValueAssignment_0_1.eContents().get(0);
		private final Assignment cDecimalValueAssignment_0_2 = (Assignment)cAlternatives_0.eContents().get(2);
		private final RuleCall cDecimalValueDecimalLiteralParserRuleCall_0_2_0 = (RuleCall)cDecimalValueAssignment_0_2.eContents().get(0);
		private final Assignment cNowAssignment_0_3 = (Assignment)cAlternatives_0.eContents().get(3);
		private final RuleCall cNowNowParserRuleCall_0_3_0 = (RuleCall)cNowAssignment_0_3.eContents().get(0);
		private final Assignment cEtherUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEtherUnitUnitTypesParserRuleCall_1_0 = (RuleCall)cEtherUnitAssignment_1.eContents().get(0);
		
		//NumericLiteral:
		//	(intValue=NumberDimensionless | hexValue=HexLiteral | decimalValue=DecimalLiteral | now=Now) etherUnit=UnitTypes?;
		@Override public ParserRule getRule() { return rule; }
		
		//(intValue=NumberDimensionless | hexValue=HexLiteral | decimalValue=DecimalLiteral | now=Now) etherUnit=UnitTypes?
		public Group getGroup() { return cGroup; }
		
		//(intValue=NumberDimensionless | hexValue=HexLiteral | decimalValue=DecimalLiteral | now=Now)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//intValue=NumberDimensionless
		public Assignment getIntValueAssignment_0_0() { return cIntValueAssignment_0_0; }
		
		//NumberDimensionless
		public RuleCall getIntValueNumberDimensionlessParserRuleCall_0_0_0() { return cIntValueNumberDimensionlessParserRuleCall_0_0_0; }
		
		//hexValue=HexLiteral
		public Assignment getHexValueAssignment_0_1() { return cHexValueAssignment_0_1; }
		
		//HexLiteral
		public RuleCall getHexValueHexLiteralParserRuleCall_0_1_0() { return cHexValueHexLiteralParserRuleCall_0_1_0; }
		
		//decimalValue=DecimalLiteral
		public Assignment getDecimalValueAssignment_0_2() { return cDecimalValueAssignment_0_2; }
		
		//DecimalLiteral
		public RuleCall getDecimalValueDecimalLiteralParserRuleCall_0_2_0() { return cDecimalValueDecimalLiteralParserRuleCall_0_2_0; }
		
		//now=Now
		public Assignment getNowAssignment_0_3() { return cNowAssignment_0_3; }
		
		//Now
		public RuleCall getNowNowParserRuleCall_0_3_0() { return cNowNowParserRuleCall_0_3_0; }
		
		//etherUnit=UnitTypes?
		public Assignment getEtherUnitAssignment_1() { return cEtherUnitAssignment_1; }
		
		//UnitTypes
		public RuleCall getEtherUnitUnitTypesParserRuleCall_1_0() { return cEtherUnitUnitTypesParserRuleCall_1_0; }
	}
	public class NowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Now");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Now:
		//	{Now} "now";
		@Override public ParserRule getRule() { return rule; }
		
		//{Now} "now"
		public Group getGroup() { return cGroup; }
		
		//{Now}
		public Action getNowAction_0() { return cNowAction_0; }
		
		//"now"
		public Keyword getNowKeyword_1() { return cNowKeyword_1; }
	}
	public class UnitTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.UnitTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTimeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTimeTimeParserRuleCall_0_0 = (RuleCall)cTimeAssignment_0.eContents().get(0);
		private final Assignment cUnitsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cUnitsEtherParserRuleCall_1_0 = (RuleCall)cUnitsAssignment_1.eContents().get(0);
		
		//UnitTypes:
		//	time=Time | units=Ether;
		@Override public ParserRule getRule() { return rule; }
		
		//time=Time | units=Ether
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//time=Time
		public Assignment getTimeAssignment_0() { return cTimeAssignment_0; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_0_0() { return cTimeTimeParserRuleCall_0_0; }
		
		//units=Ether
		public Assignment getUnitsAssignment_1() { return cUnitsAssignment_1; }
		
		//Ether
		public RuleCall getUnitsEtherParserRuleCall_1_0() { return cUnitsEtherParserRuleCall_1_0; }
	}
	public class NumberDimensionlessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.NumberDimensionless");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberDimensionless:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class EtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Ether");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cEtherAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEtherEtherSubDenominationEnumEnumRuleCall_1_0 = (RuleCall)cEtherAssignment_1.eContents().get(0);
		
		//Ether:
		//	value=INT ether=EtherSubDenominationEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT ether=EtherSubDenominationEnum
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//ether=EtherSubDenominationEnum
		public Assignment getEtherAssignment_1() { return cEtherAssignment_1; }
		
		//EtherSubDenominationEnum
		public RuleCall getEtherEtherSubDenominationEnumEnumRuleCall_1_0() { return cEtherEtherSubDenominationEnumEnumRuleCall_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeTimeSubdenominationEnumEnumRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		
		//Time:
		//	value=INT time=TimeSubdenominationEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT time=TimeSubdenominationEnum
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//time=TimeSubdenominationEnum
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//TimeSubdenominationEnum
		public RuleCall getTimeTimeSubdenominationEnumEnumRuleCall_1_0() { return cTimeTimeSubdenominationEnumEnumRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class HexLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.HexLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueHEXTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HexLiteral:
		//	value=HEX;
		@Override public ParserRule getRule() { return rule; }
		
		//value=HEX
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//HEX
		public RuleCall getValueHEXTerminalRuleCall_0() { return cValueHEXTerminalRuleCall_0; }
	}
	public class DecimalLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.DecimalLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDECIMALTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DecimalLiteral:
		//	value=DECIMAL;
		@Override public ParserRule getRule() { return rule; }
		
		//value=DECIMAL
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//DECIMAL
		public RuleCall getValueDECIMALTerminalRuleCall_0() { return cValueDECIMALTerminalRuleCall_0; }
	}
	public class TypeCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TypeCast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueElementaryTypeNameEnumParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionLogicalOperationsParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeCast:
		//	value=ElementaryTypeNameEnum "("
		//	expression=LogicalOperations
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//value=ElementaryTypeNameEnum "(" expression=LogicalOperations ")"
		public Group getGroup() { return cGroup; }
		
		//value=ElementaryTypeNameEnum
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ElementaryTypeNameEnum
		public RuleCall getValueElementaryTypeNameEnumParserRuleCall_0_0() { return cValueElementaryTypeNameEnumParserRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=LogicalOperations
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//LogicalOperations
		public RuleCall getExpressionLogicalOperationsParserRuleCall_2_0() { return cExpressionLogicalOperationsParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class SpecialVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SpecialVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecialVariablesTypeEnumParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Assignment cQualifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQualifiersQualifierParserRuleCall_3_0 = (RuleCall)cQualifiersAssignment_3.eContents().get(0);
		
		//SpecialVariables:
		//	type=SpecialVariablesTypeEnum "." field=ID qualifiers+=Qualifier*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=SpecialVariablesTypeEnum "." field=ID qualifiers+=Qualifier*
		public Group getGroup() { return cGroup; }
		
		//type=SpecialVariablesTypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//SpecialVariablesTypeEnum
		public RuleCall getTypeSpecialVariablesTypeEnumParserRuleCall_0_0() { return cTypeSpecialVariablesTypeEnumParserRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//field=ID
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_2_0() { return cFieldIDTerminalRuleCall_2_0; }
		
		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_3() { return cQualifiersAssignment_3; }
		
		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_3_0() { return cQualifiersQualifierParserRuleCall_3_0; }
	}
	public class ElementaryTypeNameEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ElementaryTypeNameEnum");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeIntKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeInt16Keyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeInt24Keyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeInt32Keyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		private final Keyword cTypeInt40Keyword_0_4 = (Keyword)cTypeAlternatives_0.eContents().get(4);
		private final Keyword cTypeInt48Keyword_0_5 = (Keyword)cTypeAlternatives_0.eContents().get(5);
		private final Keyword cTypeInt56Keyword_0_6 = (Keyword)cTypeAlternatives_0.eContents().get(6);
		private final Keyword cTypeInt64Keyword_0_7 = (Keyword)cTypeAlternatives_0.eContents().get(7);
		private final Keyword cTypeInt72Keyword_0_8 = (Keyword)cTypeAlternatives_0.eContents().get(8);
		private final Keyword cTypeInt80Keyword_0_9 = (Keyword)cTypeAlternatives_0.eContents().get(9);
		private final Keyword cTypeInt88Keyword_0_10 = (Keyword)cTypeAlternatives_0.eContents().get(10);
		private final Keyword cTypeInt96Keyword_0_11 = (Keyword)cTypeAlternatives_0.eContents().get(11);
		private final Keyword cTypeInt104Keyword_0_12 = (Keyword)cTypeAlternatives_0.eContents().get(12);
		private final Keyword cTypeInt112Keyword_0_13 = (Keyword)cTypeAlternatives_0.eContents().get(13);
		private final Keyword cTypeInt120Keyword_0_14 = (Keyword)cTypeAlternatives_0.eContents().get(14);
		private final Keyword cTypeInt128Keyword_0_15 = (Keyword)cTypeAlternatives_0.eContents().get(15);
		private final Keyword cTypeInt136Keyword_0_16 = (Keyword)cTypeAlternatives_0.eContents().get(16);
		private final Keyword cTypeInt144Keyword_0_17 = (Keyword)cTypeAlternatives_0.eContents().get(17);
		private final Keyword cTypeInt152Keyword_0_18 = (Keyword)cTypeAlternatives_0.eContents().get(18);
		private final Keyword cTypeInt160Keyword_0_19 = (Keyword)cTypeAlternatives_0.eContents().get(19);
		private final Keyword cTypeInt168Keyword_0_20 = (Keyword)cTypeAlternatives_0.eContents().get(20);
		private final Keyword cTypeInt178Keyword_0_21 = (Keyword)cTypeAlternatives_0.eContents().get(21);
		private final Keyword cTypeInt184Keyword_0_22 = (Keyword)cTypeAlternatives_0.eContents().get(22);
		private final Keyword cTypeInt192Keyword_0_23 = (Keyword)cTypeAlternatives_0.eContents().get(23);
		private final Keyword cTypeInt200Keyword_0_24 = (Keyword)cTypeAlternatives_0.eContents().get(24);
		private final Keyword cTypeInt208Keyword_0_25 = (Keyword)cTypeAlternatives_0.eContents().get(25);
		private final Keyword cTypeInt216Keyword_0_26 = (Keyword)cTypeAlternatives_0.eContents().get(26);
		private final Keyword cTypeInt224Keyword_0_27 = (Keyword)cTypeAlternatives_0.eContents().get(27);
		private final Keyword cTypeInt232Keyword_0_28 = (Keyword)cTypeAlternatives_0.eContents().get(28);
		private final Keyword cTypeInt240Keyword_0_29 = (Keyword)cTypeAlternatives_0.eContents().get(29);
		private final Keyword cTypeInt248Keyword_0_30 = (Keyword)cTypeAlternatives_0.eContents().get(30);
		private final Keyword cTypeInt256Keyword_0_31 = (Keyword)cTypeAlternatives_0.eContents().get(31);
		private final Keyword cTypeUintKeyword_0_32 = (Keyword)cTypeAlternatives_0.eContents().get(32);
		private final Keyword cTypeUint8Keyword_0_33 = (Keyword)cTypeAlternatives_0.eContents().get(33);
		private final Keyword cTypeUint16Keyword_0_34 = (Keyword)cTypeAlternatives_0.eContents().get(34);
		private final Keyword cTypeUint24Keyword_0_35 = (Keyword)cTypeAlternatives_0.eContents().get(35);
		private final Keyword cTypeUint32Keyword_0_36 = (Keyword)cTypeAlternatives_0.eContents().get(36);
		private final Keyword cTypeUint40Keyword_0_37 = (Keyword)cTypeAlternatives_0.eContents().get(37);
		private final Keyword cTypeUint48Keyword_0_38 = (Keyword)cTypeAlternatives_0.eContents().get(38);
		private final Keyword cTypeUint56Keyword_0_39 = (Keyword)cTypeAlternatives_0.eContents().get(39);
		private final Keyword cTypeUint64Keyword_0_40 = (Keyword)cTypeAlternatives_0.eContents().get(40);
		private final Keyword cTypeUint72Keyword_0_41 = (Keyword)cTypeAlternatives_0.eContents().get(41);
		private final Keyword cTypeUint80Keyword_0_42 = (Keyword)cTypeAlternatives_0.eContents().get(42);
		private final Keyword cTypeUint88Keyword_0_43 = (Keyword)cTypeAlternatives_0.eContents().get(43);
		private final Keyword cTypeUint96Keyword_0_44 = (Keyword)cTypeAlternatives_0.eContents().get(44);
		private final Keyword cTypeUint104Keyword_0_45 = (Keyword)cTypeAlternatives_0.eContents().get(45);
		private final Keyword cTypeUint112Keyword_0_46 = (Keyword)cTypeAlternatives_0.eContents().get(46);
		private final Keyword cTypeUint120Keyword_0_47 = (Keyword)cTypeAlternatives_0.eContents().get(47);
		private final Keyword cTypeUint128Keyword_0_48 = (Keyword)cTypeAlternatives_0.eContents().get(48);
		private final Keyword cTypeUint136Keyword_0_49 = (Keyword)cTypeAlternatives_0.eContents().get(49);
		private final Keyword cTypeUint144Keyword_0_50 = (Keyword)cTypeAlternatives_0.eContents().get(50);
		private final Keyword cTypeUint152Keyword_0_51 = (Keyword)cTypeAlternatives_0.eContents().get(51);
		private final Keyword cTypeUint160Keyword_0_52 = (Keyword)cTypeAlternatives_0.eContents().get(52);
		private final Keyword cTypeUint168Keyword_0_53 = (Keyword)cTypeAlternatives_0.eContents().get(53);
		private final Keyword cTypeUint178Keyword_0_54 = (Keyword)cTypeAlternatives_0.eContents().get(54);
		private final Keyword cTypeUint184Keyword_0_55 = (Keyword)cTypeAlternatives_0.eContents().get(55);
		private final Keyword cTypeUint192Keyword_0_56 = (Keyword)cTypeAlternatives_0.eContents().get(56);
		private final Keyword cTypeUint200Keyword_0_57 = (Keyword)cTypeAlternatives_0.eContents().get(57);
		private final Keyword cTypeUint208Keyword_0_58 = (Keyword)cTypeAlternatives_0.eContents().get(58);
		private final Keyword cTypeUint216Keyword_0_59 = (Keyword)cTypeAlternatives_0.eContents().get(59);
		private final Keyword cTypeUint224Keyword_0_60 = (Keyword)cTypeAlternatives_0.eContents().get(60);
		private final Keyword cTypeUint232Keyword_0_61 = (Keyword)cTypeAlternatives_0.eContents().get(61);
		private final Keyword cTypeUint240Keyword_0_62 = (Keyword)cTypeAlternatives_0.eContents().get(62);
		private final Keyword cTypeUint248Keyword_0_63 = (Keyword)cTypeAlternatives_0.eContents().get(63);
		private final Keyword cTypeUint256Keyword_0_64 = (Keyword)cTypeAlternatives_0.eContents().get(64);
		private final Keyword cTypeByteKeyword_0_65 = (Keyword)cTypeAlternatives_0.eContents().get(65);
		private final Keyword cTypeBytesKeyword_0_66 = (Keyword)cTypeAlternatives_0.eContents().get(66);
		private final Keyword cTypeBytes1Keyword_0_67 = (Keyword)cTypeAlternatives_0.eContents().get(67);
		private final Keyword cTypeBytes2Keyword_0_68 = (Keyword)cTypeAlternatives_0.eContents().get(68);
		private final Keyword cTypeBytes3Keyword_0_69 = (Keyword)cTypeAlternatives_0.eContents().get(69);
		private final Keyword cTypeBytes4Keyword_0_70 = (Keyword)cTypeAlternatives_0.eContents().get(70);
		private final Keyword cTypeBytes5Keyword_0_71 = (Keyword)cTypeAlternatives_0.eContents().get(71);
		private final Keyword cTypeBytes6Keyword_0_72 = (Keyword)cTypeAlternatives_0.eContents().get(72);
		private final Keyword cTypeBytes7Keyword_0_73 = (Keyword)cTypeAlternatives_0.eContents().get(73);
		private final Keyword cTypeBytes8Keyword_0_74 = (Keyword)cTypeAlternatives_0.eContents().get(74);
		private final Keyword cTypeBytes9Keyword_0_75 = (Keyword)cTypeAlternatives_0.eContents().get(75);
		private final Keyword cTypeBytes10Keyword_0_76 = (Keyword)cTypeAlternatives_0.eContents().get(76);
		private final Keyword cTypeBytes11Keyword_0_77 = (Keyword)cTypeAlternatives_0.eContents().get(77);
		private final Keyword cTypeBytes12Keyword_0_78 = (Keyword)cTypeAlternatives_0.eContents().get(78);
		private final Keyword cTypeBytes13Keyword_0_79 = (Keyword)cTypeAlternatives_0.eContents().get(79);
		private final Keyword cTypeBytes14Keyword_0_80 = (Keyword)cTypeAlternatives_0.eContents().get(80);
		private final Keyword cTypeBytes15Keyword_0_81 = (Keyword)cTypeAlternatives_0.eContents().get(81);
		private final Keyword cTypeBytes16Keyword_0_82 = (Keyword)cTypeAlternatives_0.eContents().get(82);
		private final Keyword cTypeBytes17Keyword_0_83 = (Keyword)cTypeAlternatives_0.eContents().get(83);
		private final Keyword cTypeBytes18Keyword_0_84 = (Keyword)cTypeAlternatives_0.eContents().get(84);
		private final Keyword cTypeBytes19Keyword_0_85 = (Keyword)cTypeAlternatives_0.eContents().get(85);
		private final Keyword cTypeBytes20Keyword_0_86 = (Keyword)cTypeAlternatives_0.eContents().get(86);
		private final Keyword cTypeBytes21Keyword_0_87 = (Keyword)cTypeAlternatives_0.eContents().get(87);
		private final Keyword cTypeBytes22Keyword_0_88 = (Keyword)cTypeAlternatives_0.eContents().get(88);
		private final Keyword cTypeBytes23Keyword_0_89 = (Keyword)cTypeAlternatives_0.eContents().get(89);
		private final Keyword cTypeBytes24Keyword_0_90 = (Keyword)cTypeAlternatives_0.eContents().get(90);
		private final Keyword cTypeBytes25Keyword_0_91 = (Keyword)cTypeAlternatives_0.eContents().get(91);
		private final Keyword cTypeBytes26Keyword_0_92 = (Keyword)cTypeAlternatives_0.eContents().get(92);
		private final Keyword cTypeBytes27Keyword_0_93 = (Keyword)cTypeAlternatives_0.eContents().get(93);
		private final Keyword cTypeBytes28Keyword_0_94 = (Keyword)cTypeAlternatives_0.eContents().get(94);
		private final Keyword cTypeBytes29Keyword_0_95 = (Keyword)cTypeAlternatives_0.eContents().get(95);
		private final Keyword cTypeBytes30Keyword_0_96 = (Keyword)cTypeAlternatives_0.eContents().get(96);
		private final Keyword cTypeBytes31Keyword_0_97 = (Keyword)cTypeAlternatives_0.eContents().get(97);
		private final Keyword cTypeBytes32Keyword_0_98 = (Keyword)cTypeAlternatives_0.eContents().get(98);
		private final Keyword cTypeStringKeyword_0_99 = (Keyword)cTypeAlternatives_0.eContents().get(99);
		private final Keyword cTypeAddressKeyword_0_100 = (Keyword)cTypeAlternatives_0.eContents().get(100);
		private final Keyword cTypeBoolKeyword_0_101 = (Keyword)cTypeAlternatives_0.eContents().get(101);
		private final Keyword cTypeRealKeyword_0_102 = (Keyword)cTypeAlternatives_0.eContents().get(102);
		private final Keyword cTypeUrealKeyword_0_103 = (Keyword)cTypeAlternatives_0.eContents().get(103);
		
		//ElementaryTypeNameEnum:
		//	type=("int" |
		//	"int16" |
		//	"int24" |
		//	"int32" |
		//	"int40" |
		//	"int48" |
		//	"int56" |
		//	"int64" |
		//	"int72" |
		//	"int80" |
		//	"int88" |
		//	"int96" |
		//	"int104" |
		//	"int112" |
		//	"int120" |
		//	"int128" |
		//	"int136" |
		//	"int144" |
		//	"int152" |
		//	"int160" |
		//	"int168" |
		//	"int178" |
		//	"int184" |
		//	"int192" |
		//	"int200" |
		//	"int208" |
		//	"int216" |
		//	"int224" |
		//	"int232" |
		//	"int240" |
		//	"int248" |
		//	"int256" |
		//	// UINT
		//	"uint" |
		//	"uint8" |
		//	"uint16" |
		//	"uint24" |
		//	"uint32" |
		//	"uint40" |
		//	"uint48" |
		//	"uint56" |
		//	"uint64" |
		//	"uint72" |
		//	"uint80" |
		//	"uint88" |
		//	"uint96" |
		//	"uint104" |
		//	"uint112" |
		//	"uint120" |
		//	"uint128" |
		//	"uint136" |
		//	"uint144" |
		//	"uint152" |
		//	"uint160" |
		//	"uint168" |
		//	"uint178" |
		//	"uint184" |
		//	"uint192" |
		//	"uint200" |
		//	"uint208" |
		//	"uint216" |
		//	"uint224" |
		//	"uint232" |
		//	"uint240" |
		//	"uint248" |
		//	"uint256" |
		//	// BYTE
		//	"byte" |
		//	"bytes" |
		//	"bytes1" |
		//	"bytes2" |
		//	"bytes3" |
		//	"bytes4" |
		//	"bytes5" |
		//	"bytes6" |
		//	"bytes7" |
		//	"bytes8" |
		//	"bytes9" |
		//	"bytes10" |
		//	"bytes11" |
		//	"bytes12" |
		//	"bytes13" |
		//	"bytes14" |
		//	"bytes15" |
		//	"bytes16" |
		//	"bytes17" |
		//	"bytes18" |
		//	"bytes19" |
		//	"bytes20" |
		//	"bytes21" |
		//	"bytes22" |
		//	"bytes23" |
		//	"bytes24" |
		//	"bytes25" |
		//	"bytes26" |
		//	"bytes27" |
		//	"bytes28" |
		//	"bytes29" |
		//	"bytes30" |
		//	"bytes31" |
		//	"bytes32" |
		//	// Other
		//	"string" |
		//	"address" |
		//	"bool" |
		//	"real" |
		//	"ureal");
		@Override public ParserRule getRule() { return rule; }
		
		//type=("int" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" |
		//"int96" | "int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int178"
		//| "int184" | "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | // UINT
		//"uint" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" |
		//"uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" |
		//"uint168" | "uint178" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240"
		//| "uint248" | "uint256" | // BYTE
		//"byte" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" |
		//"bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19"
		//| "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" |
		//"bytes29" | "bytes30" | "bytes31" | "bytes32" | // Other
		//"string" | "address" | "bool" | "real" | "ureal")
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//("int" | "int16" | "int24" | "int32" | "int40" | "int48" | "int56" | "int64" | "int72" | "int80" | "int88" | "int96" |
		//"int104" | "int112" | "int120" | "int128" | "int136" | "int144" | "int152" | "int160" | "int168" | "int178" | "int184"
		//| "int192" | "int200" | "int208" | "int216" | "int224" | "int232" | "int240" | "int248" | "int256" | // UINT
		//"uint" | "uint8" | "uint16" | "uint24" | "uint32" | "uint40" | "uint48" | "uint56" | "uint64" | "uint72" | "uint80" |
		//"uint88" | "uint96" | "uint104" | "uint112" | "uint120" | "uint128" | "uint136" | "uint144" | "uint152" | "uint160" |
		//"uint168" | "uint178" | "uint184" | "uint192" | "uint200" | "uint208" | "uint216" | "uint224" | "uint232" | "uint240"
		//| "uint248" | "uint256" | // BYTE
		//"byte" | "bytes" | "bytes1" | "bytes2" | "bytes3" | "bytes4" | "bytes5" | "bytes6" | "bytes7" | "bytes8" | "bytes9" |
		//"bytes10" | "bytes11" | "bytes12" | "bytes13" | "bytes14" | "bytes15" | "bytes16" | "bytes17" | "bytes18" | "bytes19"
		//| "bytes20" | "bytes21" | "bytes22" | "bytes23" | "bytes24" | "bytes25" | "bytes26" | "bytes27" | "bytes28" |
		//"bytes29" | "bytes30" | "bytes31" | "bytes32" | // Other
		//"string" | "address" | "bool" | "real" | "ureal")
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//"int"
		public Keyword getTypeIntKeyword_0_0() { return cTypeIntKeyword_0_0; }
		
		//"int16"
		public Keyword getTypeInt16Keyword_0_1() { return cTypeInt16Keyword_0_1; }
		
		//"int24"
		public Keyword getTypeInt24Keyword_0_2() { return cTypeInt24Keyword_0_2; }
		
		//"int32"
		public Keyword getTypeInt32Keyword_0_3() { return cTypeInt32Keyword_0_3; }
		
		//"int40"
		public Keyword getTypeInt40Keyword_0_4() { return cTypeInt40Keyword_0_4; }
		
		//"int48"
		public Keyword getTypeInt48Keyword_0_5() { return cTypeInt48Keyword_0_5; }
		
		//"int56"
		public Keyword getTypeInt56Keyword_0_6() { return cTypeInt56Keyword_0_6; }
		
		//"int64"
		public Keyword getTypeInt64Keyword_0_7() { return cTypeInt64Keyword_0_7; }
		
		//"int72"
		public Keyword getTypeInt72Keyword_0_8() { return cTypeInt72Keyword_0_8; }
		
		//"int80"
		public Keyword getTypeInt80Keyword_0_9() { return cTypeInt80Keyword_0_9; }
		
		//"int88"
		public Keyword getTypeInt88Keyword_0_10() { return cTypeInt88Keyword_0_10; }
		
		//"int96"
		public Keyword getTypeInt96Keyword_0_11() { return cTypeInt96Keyword_0_11; }
		
		//"int104"
		public Keyword getTypeInt104Keyword_0_12() { return cTypeInt104Keyword_0_12; }
		
		//"int112"
		public Keyword getTypeInt112Keyword_0_13() { return cTypeInt112Keyword_0_13; }
		
		//"int120"
		public Keyword getTypeInt120Keyword_0_14() { return cTypeInt120Keyword_0_14; }
		
		//"int128"
		public Keyword getTypeInt128Keyword_0_15() { return cTypeInt128Keyword_0_15; }
		
		//"int136"
		public Keyword getTypeInt136Keyword_0_16() { return cTypeInt136Keyword_0_16; }
		
		//"int144"
		public Keyword getTypeInt144Keyword_0_17() { return cTypeInt144Keyword_0_17; }
		
		//"int152"
		public Keyword getTypeInt152Keyword_0_18() { return cTypeInt152Keyword_0_18; }
		
		//"int160"
		public Keyword getTypeInt160Keyword_0_19() { return cTypeInt160Keyword_0_19; }
		
		//"int168"
		public Keyword getTypeInt168Keyword_0_20() { return cTypeInt168Keyword_0_20; }
		
		//"int178"
		public Keyword getTypeInt178Keyword_0_21() { return cTypeInt178Keyword_0_21; }
		
		//"int184"
		public Keyword getTypeInt184Keyword_0_22() { return cTypeInt184Keyword_0_22; }
		
		//"int192"
		public Keyword getTypeInt192Keyword_0_23() { return cTypeInt192Keyword_0_23; }
		
		//"int200"
		public Keyword getTypeInt200Keyword_0_24() { return cTypeInt200Keyword_0_24; }
		
		//"int208"
		public Keyword getTypeInt208Keyword_0_25() { return cTypeInt208Keyword_0_25; }
		
		//"int216"
		public Keyword getTypeInt216Keyword_0_26() { return cTypeInt216Keyword_0_26; }
		
		//"int224"
		public Keyword getTypeInt224Keyword_0_27() { return cTypeInt224Keyword_0_27; }
		
		//"int232"
		public Keyword getTypeInt232Keyword_0_28() { return cTypeInt232Keyword_0_28; }
		
		//"int240"
		public Keyword getTypeInt240Keyword_0_29() { return cTypeInt240Keyword_0_29; }
		
		//"int248"
		public Keyword getTypeInt248Keyword_0_30() { return cTypeInt248Keyword_0_30; }
		
		//"int256"
		public Keyword getTypeInt256Keyword_0_31() { return cTypeInt256Keyword_0_31; }
		
		//// UINT
		//"uint"
		public Keyword getTypeUintKeyword_0_32() { return cTypeUintKeyword_0_32; }
		
		//"uint8"
		public Keyword getTypeUint8Keyword_0_33() { return cTypeUint8Keyword_0_33; }
		
		//"uint16"
		public Keyword getTypeUint16Keyword_0_34() { return cTypeUint16Keyword_0_34; }
		
		//"uint24"
		public Keyword getTypeUint24Keyword_0_35() { return cTypeUint24Keyword_0_35; }
		
		//"uint32"
		public Keyword getTypeUint32Keyword_0_36() { return cTypeUint32Keyword_0_36; }
		
		//"uint40"
		public Keyword getTypeUint40Keyword_0_37() { return cTypeUint40Keyword_0_37; }
		
		//"uint48"
		public Keyword getTypeUint48Keyword_0_38() { return cTypeUint48Keyword_0_38; }
		
		//"uint56"
		public Keyword getTypeUint56Keyword_0_39() { return cTypeUint56Keyword_0_39; }
		
		//"uint64"
		public Keyword getTypeUint64Keyword_0_40() { return cTypeUint64Keyword_0_40; }
		
		//"uint72"
		public Keyword getTypeUint72Keyword_0_41() { return cTypeUint72Keyword_0_41; }
		
		//"uint80"
		public Keyword getTypeUint80Keyword_0_42() { return cTypeUint80Keyword_0_42; }
		
		//"uint88"
		public Keyword getTypeUint88Keyword_0_43() { return cTypeUint88Keyword_0_43; }
		
		//"uint96"
		public Keyword getTypeUint96Keyword_0_44() { return cTypeUint96Keyword_0_44; }
		
		//"uint104"
		public Keyword getTypeUint104Keyword_0_45() { return cTypeUint104Keyword_0_45; }
		
		//"uint112"
		public Keyword getTypeUint112Keyword_0_46() { return cTypeUint112Keyword_0_46; }
		
		//"uint120"
		public Keyword getTypeUint120Keyword_0_47() { return cTypeUint120Keyword_0_47; }
		
		//"uint128"
		public Keyword getTypeUint128Keyword_0_48() { return cTypeUint128Keyword_0_48; }
		
		//"uint136"
		public Keyword getTypeUint136Keyword_0_49() { return cTypeUint136Keyword_0_49; }
		
		//"uint144"
		public Keyword getTypeUint144Keyword_0_50() { return cTypeUint144Keyword_0_50; }
		
		//"uint152"
		public Keyword getTypeUint152Keyword_0_51() { return cTypeUint152Keyword_0_51; }
		
		//"uint160"
		public Keyword getTypeUint160Keyword_0_52() { return cTypeUint160Keyword_0_52; }
		
		//"uint168"
		public Keyword getTypeUint168Keyword_0_53() { return cTypeUint168Keyword_0_53; }
		
		//"uint178"
		public Keyword getTypeUint178Keyword_0_54() { return cTypeUint178Keyword_0_54; }
		
		//"uint184"
		public Keyword getTypeUint184Keyword_0_55() { return cTypeUint184Keyword_0_55; }
		
		//"uint192"
		public Keyword getTypeUint192Keyword_0_56() { return cTypeUint192Keyword_0_56; }
		
		//"uint200"
		public Keyword getTypeUint200Keyword_0_57() { return cTypeUint200Keyword_0_57; }
		
		//"uint208"
		public Keyword getTypeUint208Keyword_0_58() { return cTypeUint208Keyword_0_58; }
		
		//"uint216"
		public Keyword getTypeUint216Keyword_0_59() { return cTypeUint216Keyword_0_59; }
		
		//"uint224"
		public Keyword getTypeUint224Keyword_0_60() { return cTypeUint224Keyword_0_60; }
		
		//"uint232"
		public Keyword getTypeUint232Keyword_0_61() { return cTypeUint232Keyword_0_61; }
		
		//"uint240"
		public Keyword getTypeUint240Keyword_0_62() { return cTypeUint240Keyword_0_62; }
		
		//"uint248"
		public Keyword getTypeUint248Keyword_0_63() { return cTypeUint248Keyword_0_63; }
		
		//"uint256"
		public Keyword getTypeUint256Keyword_0_64() { return cTypeUint256Keyword_0_64; }
		
		//// BYTE
		//"byte"
		public Keyword getTypeByteKeyword_0_65() { return cTypeByteKeyword_0_65; }
		
		//"bytes"
		public Keyword getTypeBytesKeyword_0_66() { return cTypeBytesKeyword_0_66; }
		
		//"bytes1"
		public Keyword getTypeBytes1Keyword_0_67() { return cTypeBytes1Keyword_0_67; }
		
		//"bytes2"
		public Keyword getTypeBytes2Keyword_0_68() { return cTypeBytes2Keyword_0_68; }
		
		//"bytes3"
		public Keyword getTypeBytes3Keyword_0_69() { return cTypeBytes3Keyword_0_69; }
		
		//"bytes4"
		public Keyword getTypeBytes4Keyword_0_70() { return cTypeBytes4Keyword_0_70; }
		
		//"bytes5"
		public Keyword getTypeBytes5Keyword_0_71() { return cTypeBytes5Keyword_0_71; }
		
		//"bytes6"
		public Keyword getTypeBytes6Keyword_0_72() { return cTypeBytes6Keyword_0_72; }
		
		//"bytes7"
		public Keyword getTypeBytes7Keyword_0_73() { return cTypeBytes7Keyword_0_73; }
		
		//"bytes8"
		public Keyword getTypeBytes8Keyword_0_74() { return cTypeBytes8Keyword_0_74; }
		
		//"bytes9"
		public Keyword getTypeBytes9Keyword_0_75() { return cTypeBytes9Keyword_0_75; }
		
		//"bytes10"
		public Keyword getTypeBytes10Keyword_0_76() { return cTypeBytes10Keyword_0_76; }
		
		//"bytes11"
		public Keyword getTypeBytes11Keyword_0_77() { return cTypeBytes11Keyword_0_77; }
		
		//"bytes12"
		public Keyword getTypeBytes12Keyword_0_78() { return cTypeBytes12Keyword_0_78; }
		
		//"bytes13"
		public Keyword getTypeBytes13Keyword_0_79() { return cTypeBytes13Keyword_0_79; }
		
		//"bytes14"
		public Keyword getTypeBytes14Keyword_0_80() { return cTypeBytes14Keyword_0_80; }
		
		//"bytes15"
		public Keyword getTypeBytes15Keyword_0_81() { return cTypeBytes15Keyword_0_81; }
		
		//"bytes16"
		public Keyword getTypeBytes16Keyword_0_82() { return cTypeBytes16Keyword_0_82; }
		
		//"bytes17"
		public Keyword getTypeBytes17Keyword_0_83() { return cTypeBytes17Keyword_0_83; }
		
		//"bytes18"
		public Keyword getTypeBytes18Keyword_0_84() { return cTypeBytes18Keyword_0_84; }
		
		//"bytes19"
		public Keyword getTypeBytes19Keyword_0_85() { return cTypeBytes19Keyword_0_85; }
		
		//"bytes20"
		public Keyword getTypeBytes20Keyword_0_86() { return cTypeBytes20Keyword_0_86; }
		
		//"bytes21"
		public Keyword getTypeBytes21Keyword_0_87() { return cTypeBytes21Keyword_0_87; }
		
		//"bytes22"
		public Keyword getTypeBytes22Keyword_0_88() { return cTypeBytes22Keyword_0_88; }
		
		//"bytes23"
		public Keyword getTypeBytes23Keyword_0_89() { return cTypeBytes23Keyword_0_89; }
		
		//"bytes24"
		public Keyword getTypeBytes24Keyword_0_90() { return cTypeBytes24Keyword_0_90; }
		
		//"bytes25"
		public Keyword getTypeBytes25Keyword_0_91() { return cTypeBytes25Keyword_0_91; }
		
		//"bytes26"
		public Keyword getTypeBytes26Keyword_0_92() { return cTypeBytes26Keyword_0_92; }
		
		//"bytes27"
		public Keyword getTypeBytes27Keyword_0_93() { return cTypeBytes27Keyword_0_93; }
		
		//"bytes28"
		public Keyword getTypeBytes28Keyword_0_94() { return cTypeBytes28Keyword_0_94; }
		
		//"bytes29"
		public Keyword getTypeBytes29Keyword_0_95() { return cTypeBytes29Keyword_0_95; }
		
		//"bytes30"
		public Keyword getTypeBytes30Keyword_0_96() { return cTypeBytes30Keyword_0_96; }
		
		//"bytes31"
		public Keyword getTypeBytes31Keyword_0_97() { return cTypeBytes31Keyword_0_97; }
		
		//"bytes32"
		public Keyword getTypeBytes32Keyword_0_98() { return cTypeBytes32Keyword_0_98; }
		
		//// Other
		//"string"
		public Keyword getTypeStringKeyword_0_99() { return cTypeStringKeyword_0_99; }
		
		//"address"
		public Keyword getTypeAddressKeyword_0_100() { return cTypeAddressKeyword_0_100; }
		
		//"bool"
		public Keyword getTypeBoolKeyword_0_101() { return cTypeBoolKeyword_0_101; }
		
		//"real"
		public Keyword getTypeRealKeyword_0_102() { return cTypeRealKeyword_0_102; }
		
		//"ureal"
		public Keyword getTypeUrealKeyword_0_103() { return cTypeUrealKeyword_0_103; }
	}
	public class MapLocationLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MapLocationLiteral");
		private final Keyword cStorageKeyword = (Keyword)rule.eContents().get(1);
		
		//MapLocationLiteral:
		//	"storage";
		@Override public ParserRule getRule() { return rule; }
		
		//"storage"
		public Keyword getStorageKeyword() { return cStorageKeyword; }
	}
	public class LocationSpecifierEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.LocationSpecifierEnum");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypeMemoryKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final RuleCall cTypeMapLocationLiteralParserRuleCall_0_1 = (RuleCall)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypeCalldataKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		
		//LocationSpecifierEnum:
		//	type=("memory" | MapLocationLiteral | "calldata");
		@Override public ParserRule getRule() { return rule; }
		
		//type=("memory" | MapLocationLiteral | "calldata")
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//("memory" | MapLocationLiteral | "calldata")
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//"memory"
		public Keyword getTypeMemoryKeyword_0_0() { return cTypeMemoryKeyword_0_0; }
		
		//MapLocationLiteral
		public RuleCall getTypeMapLocationLiteralParserRuleCall_0_1() { return cTypeMapLocationLiteralParserRuleCall_0_1; }
		
		//"calldata"
		public Keyword getTypeCalldataKeyword_0_2() { return cTypeCalldataKeyword_0_2; }
	}
	public class VisibilityEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.VisibilityEnum");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cTypeAlternatives_0 = (Alternatives)cTypeAssignment.eContents().get(0);
		private final Keyword cTypePublicKeyword_0_0 = (Keyword)cTypeAlternatives_0.eContents().get(0);
		private final Keyword cTypeInternalKeyword_0_1 = (Keyword)cTypeAlternatives_0.eContents().get(1);
		private final Keyword cTypePrivateKeyword_0_2 = (Keyword)cTypeAlternatives_0.eContents().get(2);
		private final Keyword cTypeExternalKeyword_0_3 = (Keyword)cTypeAlternatives_0.eContents().get(3);
		
		//VisibilityEnum:
		//	type=("public" | "internal" | "private" | "external");
		@Override public ParserRule getRule() { return rule; }
		
		//type=("public" | "internal" | "private" | "external")
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//("public" | "internal" | "private" | "external")
		public Alternatives getTypeAlternatives_0() { return cTypeAlternatives_0; }
		
		//"public"
		public Keyword getTypePublicKeyword_0_0() { return cTypePublicKeyword_0_0; }
		
		//"internal"
		public Keyword getTypeInternalKeyword_0_1() { return cTypeInternalKeyword_0_1; }
		
		//"private"
		public Keyword getTypePrivateKeyword_0_2() { return cTypePrivateKeyword_0_2; }
		
		//"external"
		public Keyword getTypeExternalKeyword_0_3() { return cTypeExternalKeyword_0_3; }
	}
	public class SpecialVariablesTypeEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SpecialVariablesTypeEnum");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final RuleCall cNameBLOCKTerminalRuleCall_0_0 = (RuleCall)cNameAlternatives_0.eContents().get(0);
		private final RuleCall cNameMSGTerminalRuleCall_0_1 = (RuleCall)cNameAlternatives_0.eContents().get(1);
		private final RuleCall cNameTXTerminalRuleCall_0_2 = (RuleCall)cNameAlternatives_0.eContents().get(2);
		
		//// Also "EOS" DAF
		//SpecialVariablesTypeEnum:
		//	name=(BLOCK | MSG | TX);
		@Override public ParserRule getRule() { return rule; }
		
		//name=(BLOCK | MSG | TX)
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//(BLOCK | MSG | TX)
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }
		
		//BLOCK
		public RuleCall getNameBLOCKTerminalRuleCall_0_0() { return cNameBLOCKTerminalRuleCall_0_0; }
		
		//MSG
		public RuleCall getNameMSGTerminalRuleCall_0_1() { return cNameMSGTerminalRuleCall_0_1; }
		
		//TX
		public RuleCall getNameTXTerminalRuleCall_0_2() { return cNameTXTerminalRuleCall_0_2; }
	}
	
	public class LogicalOperationLiteralElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.LogicalOperationLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNOTEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNOTEQUALExclamationMarkEqualsSignKeyword_0_0 = (Keyword)cNOTEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_1_0 = (Keyword)cEQUALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cANDAmpersandAmpersandKeyword_2_0 = (Keyword)cANDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cORVerticalLineVerticalLineKeyword_3_0 = (Keyword)cOREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGTEEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLTELessThanSignEqualsSignKeyword_5_0 = (Keyword)cLTEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cGTGreaterThanSignKeyword_6_0 = (Keyword)cGTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cLTLessThanSignKeyword_7_0 = (Keyword)cLTEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum LogicalOperationLiteral:
		//	NOTEQUAL="!=" |
		//	EQUAL="==" |
		//	AND="&&" |
		//	OR="||" |
		//	GTE=">=" |
		//	LTE="<=" |
		//	GT=">" |
		//	LT="<";
		public EnumRule getRule() { return rule; }
		
		//NOTEQUAL="!=" | EQUAL="==" | AND="&&" | OR="||" | GTE=">=" | LTE="<=" | GT=">" | LT="<"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NOTEQUAL="!="
		public EnumLiteralDeclaration getNOTEQUALEnumLiteralDeclaration_0() { return cNOTEQUALEnumLiteralDeclaration_0; }
		
		//"!="
		public Keyword getNOTEQUALExclamationMarkEqualsSignKeyword_0_0() { return cNOTEQUALExclamationMarkEqualsSignKeyword_0_0; }
		
		//EQUAL="=="
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_1() { return cEQUALEnumLiteralDeclaration_1; }
		
		//"=="
		public Keyword getEQUALEqualsSignEqualsSignKeyword_1_0() { return cEQUALEqualsSignEqualsSignKeyword_1_0; }
		
		//AND="&&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_2() { return cANDEnumLiteralDeclaration_2; }
		
		//"&&"
		public Keyword getANDAmpersandAmpersandKeyword_2_0() { return cANDAmpersandAmpersandKeyword_2_0; }
		
		//OR="||"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_3() { return cOREnumLiteralDeclaration_3; }
		
		//"||"
		public Keyword getORVerticalLineVerticalLineKeyword_3_0() { return cORVerticalLineVerticalLineKeyword_3_0; }
		
		//GTE=">="
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_4() { return cGTEEnumLiteralDeclaration_4; }
		
		//">="
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_4_0() { return cGTEGreaterThanSignEqualsSignKeyword_4_0; }
		
		//LTE="<="
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_5() { return cLTEEnumLiteralDeclaration_5; }
		
		//"<="
		public Keyword getLTELessThanSignEqualsSignKeyword_5_0() { return cLTELessThanSignEqualsSignKeyword_5_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_6() { return cGTEnumLiteralDeclaration_6; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_6_0() { return cGTGreaterThanSignKeyword_6_0; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_7() { return cLTEnumLiteralDeclaration_7; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_7_0() { return cLTLessThanSignKeyword_7_0; }
	}
	public class AssignmentOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.AssignmentOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_OREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASSIGN_ORVerticalLineEqualsSignKeyword_1_0 = (Keyword)cASSIGN_OREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_XOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0 = (Keyword)cASSIGN_XOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_ANDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cASSIGN_ANDAmpersandEqualsSignKeyword_3_0 = (Keyword)cASSIGN_ANDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0 = (Keyword)cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0 = (Keyword)cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_ADDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cASSIGN_ADDPlusSignEqualsSignKeyword_7_0 = (Keyword)cASSIGN_ADDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SUBEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0 = (Keyword)cASSIGN_SUBEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_MULTEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cASSIGN_MULTAsteriskEqualsSignKeyword_9_0 = (Keyword)cASSIGN_MULTEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_DIVEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cASSIGN_DIVSolidusEqualsSignKeyword_10_0 = (Keyword)cASSIGN_DIVEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_MODEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cASSIGN_MODPercentSignEqualsSignKeyword_11_0 = (Keyword)cASSIGN_MODEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum AssignmentOpEnum:
		//	ASSIGN="=" |
		//	ASSIGN_OR="|=" |
		//	ASSIGN_XOR="^=" |
		//	ASSIGN_AND="&=" |
		//	ASSIGN_SHIFT_LEFT="<<=" |
		//	ASSIGN_SHIFT_RIGHT=">>=" |
		//	ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" |
		//	ASSIGN_ADD="+=" |
		//	ASSIGN_SUB="-=" |
		//	ASSIGN_MULT="*=" |
		//	ASSIGN_DIV="/=" |
		//	ASSIGN_MOD="%=";
		public EnumRule getRule() { return rule; }
		
		//ASSIGN="=" | ASSIGN_OR="|=" | ASSIGN_XOR="^=" | ASSIGN_AND="&=" | ASSIGN_SHIFT_LEFT="<<=" | ASSIGN_SHIFT_RIGHT=">>=" |
		//ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" | ASSIGN_ADD="+=" | ASSIGN_SUB="-=" | ASSIGN_MULT="*=" | ASSIGN_DIV="/=" |
		//ASSIGN_MOD="%="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGN="="
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }
		
		//"="
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }
		
		//ASSIGN_OR="|="
		public EnumLiteralDeclaration getASSIGN_OREnumLiteralDeclaration_1() { return cASSIGN_OREnumLiteralDeclaration_1; }
		
		//"|="
		public Keyword getASSIGN_ORVerticalLineEqualsSignKeyword_1_0() { return cASSIGN_ORVerticalLineEqualsSignKeyword_1_0; }
		
		//ASSIGN_XOR="^="
		public EnumLiteralDeclaration getASSIGN_XOREnumLiteralDeclaration_2() { return cASSIGN_XOREnumLiteralDeclaration_2; }
		
		//"^="
		public Keyword getASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0() { return cASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0; }
		
		//ASSIGN_AND="&="
		public EnumLiteralDeclaration getASSIGN_ANDEnumLiteralDeclaration_3() { return cASSIGN_ANDEnumLiteralDeclaration_3; }
		
		//"&="
		public Keyword getASSIGN_ANDAmpersandEqualsSignKeyword_3_0() { return cASSIGN_ANDAmpersandEqualsSignKeyword_3_0; }
		
		//ASSIGN_SHIFT_LEFT="<<="
		public EnumLiteralDeclaration getASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4() { return cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4; }
		
		//"<<="
		public Keyword getASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0() { return cASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0; }
		
		//ASSIGN_SHIFT_RIGHT=">>="
		public EnumLiteralDeclaration getASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5() { return cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5; }
		
		//">>="
		public Keyword getASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0() { return cASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0; }
		
		//ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>="
		public EnumLiteralDeclaration getASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6() { return cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6; }
		
		//">>>="
		public Keyword getASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0() { return cASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0; }
		
		//ASSIGN_ADD="+="
		public EnumLiteralDeclaration getASSIGN_ADDEnumLiteralDeclaration_7() { return cASSIGN_ADDEnumLiteralDeclaration_7; }
		
		//"+="
		public Keyword getASSIGN_ADDPlusSignEqualsSignKeyword_7_0() { return cASSIGN_ADDPlusSignEqualsSignKeyword_7_0; }
		
		//ASSIGN_SUB="-="
		public EnumLiteralDeclaration getASSIGN_SUBEnumLiteralDeclaration_8() { return cASSIGN_SUBEnumLiteralDeclaration_8; }
		
		//"-="
		public Keyword getASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0() { return cASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0; }
		
		//ASSIGN_MULT="*="
		public EnumLiteralDeclaration getASSIGN_MULTEnumLiteralDeclaration_9() { return cASSIGN_MULTEnumLiteralDeclaration_9; }
		
		//"*="
		public Keyword getASSIGN_MULTAsteriskEqualsSignKeyword_9_0() { return cASSIGN_MULTAsteriskEqualsSignKeyword_9_0; }
		
		//ASSIGN_DIV="/="
		public EnumLiteralDeclaration getASSIGN_DIVEnumLiteralDeclaration_10() { return cASSIGN_DIVEnumLiteralDeclaration_10; }
		
		//"/="
		public Keyword getASSIGN_DIVSolidusEqualsSignKeyword_10_0() { return cASSIGN_DIVSolidusEqualsSignKeyword_10_0; }
		
		//ASSIGN_MOD="%="
		public EnumLiteralDeclaration getASSIGN_MODEnumLiteralDeclaration_11() { return cASSIGN_MODEnumLiteralDeclaration_11; }
		
		//"%="
		public Keyword getASSIGN_MODPercentSignEqualsSignKeyword_11_0() { return cASSIGN_MODPercentSignEqualsSignKeyword_11_0; }
	}
	public class EqualityOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EqualityOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOTEQEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOpEnum:
		//	EQ="==" |
		//	NOTEQ="!=";
		public EnumRule getRule() { return rule; }
		
		//EQ="==" | NOTEQ="!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NOTEQ="!="
		public EnumLiteralDeclaration getNOTEQEnumLiteralDeclaration_1() { return cNOTEQEnumLiteralDeclaration_1; }
		
		//"!="
		public Keyword getNOTEQExclamationMarkEqualsSignKeyword_1_0() { return cNOTEQExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class ComparisonOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ComparisonOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGTGreaterThanSignKeyword_1_0 = (Keyword)cGTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLTELessThanSignEqualsSignKeyword_2_0 = (Keyword)cLTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINInKeyword_4_0 = (Keyword)cINEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ComparisonOpEnum:
		//	LT="<" |
		//	GT=">" |
		//	LTE="<=" |
		//	GTE=">=" |
		//	IN="in";
		public EnumRule getRule() { return rule; }
		
		//LT="<" | GT=">" | LTE="<=" | GTE=">=" | IN="in"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_1() { return cGTEnumLiteralDeclaration_1; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_1_0() { return cGTGreaterThanSignKeyword_1_0; }
		
		//LTE="<="
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_2() { return cLTEEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLTELessThanSignEqualsSignKeyword_2_0() { return cLTELessThanSignEqualsSignKeyword_2_0; }
		
		//GTE=">="
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_3() { return cGTEEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_3_0() { return cGTEGreaterThanSignEqualsSignKeyword_3_0; }
		
		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_4() { return cINEnumLiteralDeclaration_4; }
		
		//"in"
		public Keyword getINInKeyword_4_0() { return cINInKeyword_4_0; }
	}
	public class ShiftOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ShiftOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFT_SHIFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLEFT_SHIFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHT_SHIFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRIGHT_SHIFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0 = (Keyword)cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ShiftOpEnum:
		//	LEFT_SHIFT="<<" |
		//	RIGHT_SHIFT=">>" |
		//	ARITHMETIC_RIGHT_SHIFT=">>>";
		public EnumRule getRule() { return rule; }
		
		//LEFT_SHIFT="<<" | RIGHT_SHIFT=">>" | ARITHMETIC_RIGHT_SHIFT=">>>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_SHIFT="<<"
		public EnumLiteralDeclaration getLEFT_SHIFTEnumLiteralDeclaration_0() { return cLEFT_SHIFTEnumLiteralDeclaration_0; }
		
		//"<<"
		public Keyword getLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0() { return cLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0; }
		
		//RIGHT_SHIFT=">>"
		public EnumLiteralDeclaration getRIGHT_SHIFTEnumLiteralDeclaration_1() { return cRIGHT_SHIFTEnumLiteralDeclaration_1; }
		
		//">>"
		public Keyword getRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0() { return cRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0; }
		
		//ARITHMETIC_RIGHT_SHIFT=">>>"
		public EnumLiteralDeclaration getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2() { return cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2; }
		
		//">>>"
		public Keyword getARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0() { return cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0; }
	}
	public class AdditionOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.AdditionOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditionOpEnum:
		//	ADD="+" |
		//	SUB="-";
		public EnumRule getRule() { return rule; }
		
		//ADD="+" | SUB="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getSUBHyphenMinusKeyword_1_0() { return cSUBHyphenMinusKeyword_1_0; }
	}
	public class MulDivModOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MulDivModOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTAsteriskKeyword_0_0 = (Keyword)cMULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODPercentSignKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MulDivModOpEnum:
		//	MULT="*" |
		//	DIV="/" |
		//	MOD="%";
		public EnumRule getRule() { return rule; }
		
		//MULT="*" | DIV="/" | MOD="%"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_0() { return cMULTEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMULTAsteriskKeyword_0_0() { return cMULTAsteriskKeyword_0_0; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		//"%"
		public Keyword getMODPercentSignKeyword_2_0() { return cMODPercentSignKeyword_2_0; }
	}
	public class IncDecOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.IncDecOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCPlusSignPlusSignKeyword_0_0 = (Keyword)cINCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cDECEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IncDecOpEnum:
		//	INC="++" |
		//	DEC="--";
		public EnumRule getRule() { return rule; }
		
		//INC="++" | DEC="--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INC="++"
		public EnumLiteralDeclaration getINCEnumLiteralDeclaration_0() { return cINCEnumLiteralDeclaration_0; }
		
		//"++"
		public Keyword getINCPlusSignPlusSignKeyword_0_0() { return cINCPlusSignPlusSignKeyword_0_0; }
		
		//DEC="--"
		public EnumLiteralDeclaration getDECEnumLiteralDeclaration_1() { return cDECEnumLiteralDeclaration_1; }
		
		//"--"
		public Keyword getDECHyphenMinusHyphenMinusKeyword_1_0() { return cDECHyphenMinusHyphenMinusKeyword_1_0; }
	}
	public class BooleanLiteralEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BooleanLiteralEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanLiteralEnum:
		//	TRUE="true" |
		//	FALSE="false";
		public EnumRule getRule() { return rule; }
		
		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	public class EtherSubDenominationEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.EtherSubDenominationEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEIEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEIWeiKeyword_0_0 = (Keyword)cWEIEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSZABOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSZABOSzaboKeyword_1_0 = (Keyword)cSZABOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFINNEYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFINNEYFinneyKeyword_2_0 = (Keyword)cFINNEYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cETHEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cETHEREtherKeyword_3_0 = (Keyword)cETHEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum EtherSubDenominationEnum:
		//	WEI="wei" |
		//	SZABO="szabo" |
		//	FINNEY="finney" |
		//	ETHER="ether";
		public EnumRule getRule() { return rule; }
		
		//WEI="wei" | SZABO="szabo" | FINNEY="finney" | ETHER="ether"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WEI="wei"
		public EnumLiteralDeclaration getWEIEnumLiteralDeclaration_0() { return cWEIEnumLiteralDeclaration_0; }
		
		//"wei"
		public Keyword getWEIWeiKeyword_0_0() { return cWEIWeiKeyword_0_0; }
		
		//SZABO="szabo"
		public EnumLiteralDeclaration getSZABOEnumLiteralDeclaration_1() { return cSZABOEnumLiteralDeclaration_1; }
		
		//"szabo"
		public Keyword getSZABOSzaboKeyword_1_0() { return cSZABOSzaboKeyword_1_0; }
		
		//FINNEY="finney"
		public EnumLiteralDeclaration getFINNEYEnumLiteralDeclaration_2() { return cFINNEYEnumLiteralDeclaration_2; }
		
		//"finney"
		public Keyword getFINNEYFinneyKeyword_2_0() { return cFINNEYFinneyKeyword_2_0; }
		
		//ETHER="ether"
		public EnumLiteralDeclaration getETHEREnumLiteralDeclaration_3() { return cETHEREnumLiteralDeclaration_3; }
		
		//"ether"
		public Keyword getETHEREtherKeyword_3_0() { return cETHEREtherKeyword_3_0; }
	}
	public class TimeSubdenominationEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TimeSubdenominationEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSSecondsKeyword_0_0 = (Keyword)cSECONDSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTESMinutesKeyword_1_0 = (Keyword)cMINUTESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURSHoursKeyword_2_0 = (Keyword)cHOURSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYSDaysKeyword_3_0 = (Keyword)cDAYSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWEEKSWeeksKeyword_4_0 = (Keyword)cWEEKSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYEARSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYEARSYearsKeyword_5_0 = (Keyword)cYEARSEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TimeSubdenominationEnum:
		//	SECONDS="seconds" |
		//	MINUTES="minutes" |
		//	HOURS="hours" |
		//	DAYS="days" |
		//	WEEKS="weeks" |
		//	YEARS="years";
		public EnumRule getRule() { return rule; }
		
		//SECONDS="seconds" | MINUTES="minutes" | HOURS="hours" | DAYS="days" | WEEKS="weeks" | YEARS="years"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECONDS="seconds"
		public EnumLiteralDeclaration getSECONDSEnumLiteralDeclaration_0() { return cSECONDSEnumLiteralDeclaration_0; }
		
		//"seconds"
		public Keyword getSECONDSSecondsKeyword_0_0() { return cSECONDSSecondsKeyword_0_0; }
		
		//MINUTES="minutes"
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_1() { return cMINUTESEnumLiteralDeclaration_1; }
		
		//"minutes"
		public Keyword getMINUTESMinutesKeyword_1_0() { return cMINUTESMinutesKeyword_1_0; }
		
		//HOURS="hours"
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_2() { return cHOURSEnumLiteralDeclaration_2; }
		
		//"hours"
		public Keyword getHOURSHoursKeyword_2_0() { return cHOURSHoursKeyword_2_0; }
		
		//DAYS="days"
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_3() { return cDAYSEnumLiteralDeclaration_3; }
		
		//"days"
		public Keyword getDAYSDaysKeyword_3_0() { return cDAYSDaysKeyword_3_0; }
		
		//WEEKS="weeks"
		public EnumLiteralDeclaration getWEEKSEnumLiteralDeclaration_4() { return cWEEKSEnumLiteralDeclaration_4; }
		
		//"weeks"
		public Keyword getWEEKSWeeksKeyword_4_0() { return cWEEKSWeeksKeyword_4_0; }
		
		//YEARS="years"
		public EnumLiteralDeclaration getYEARSEnumLiteralDeclaration_5() { return cYEARSEnumLiteralDeclaration_5; }
		
		//"years"
		public Keyword getYEARSYearsKeyword_5_0() { return cYEARSYearsKeyword_5_0; }
	}
	public class SpecialExpressionTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.SpecialExpressionTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUPEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUPERSuperKeyword_0_0 = (Keyword)cSUPEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTHISEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTHISThisKeyword_1_0 = (Keyword)cTHISEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SpecialExpressionTypeEnum:
		//	SUPER="super" |
		//	THIS="this";
		public EnumRule getRule() { return rule; }
		
		//SUPER="super" | THIS="this"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUPER="super"
		public EnumLiteralDeclaration getSUPEREnumLiteralDeclaration_0() { return cSUPEREnumLiteralDeclaration_0; }
		
		//"super"
		public Keyword getSUPERSuperKeyword_0_0() { return cSUPERSuperKeyword_0_0; }
		
		//THIS="this"
		public EnumLiteralDeclaration getTHISEnumLiteralDeclaration_1() { return cTHISEnumLiteralDeclaration_1; }
		
		//"this"
		public Keyword getTHISThisKeyword_1_0() { return cTHISThisKeyword_1_0; }
	}
	public class ReservedWordsEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.ReservedWordsEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASAsKeyword_0_0 = (Keyword)cASEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCASEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCASECaseKeyword_1_0 = (Keyword)cCASEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCATCHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCATCHCatchKeyword_2_0 = (Keyword)cCATCHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFINALFinalKeyword_3_0 = (Keyword)cFINALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLETEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLETLetKeyword_4_0 = (Keyword)cLETEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMATCHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMATCHMatchKeyword_5_0 = (Keyword)cMATCHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cOFEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cOFOfKeyword_6_0 = (Keyword)cOFEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cRELOCATABLEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cRELOCATABLERelocatableKeyword_7_0 = (Keyword)cRELOCATABLEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSWITCHEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSWITCHSwitchKeyword_8_0 = (Keyword)cSWITCHEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTRYEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTRYTryKeyword_9_0 = (Keyword)cTRYEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTYPEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTYPETypeKeyword_10_0 = (Keyword)cTYPEEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTYPEOFEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTYPEOFTypeofKeyword_11_0 = (Keyword)cTYPEOFEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cUSINGEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cUSINGUsingKeyword_12_0 = (Keyword)cUSINGEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cILLEGALEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cILLEGALILLEGALKeyword_13_0 = (Keyword)cILLEGALEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum ReservedWordsEnum:
		//	AS="as" |
		//	CASE="case" |
		//	CATCH="catch" |
		//	FINAL="final" |
		//	LET="let" |
		//	MATCH="match" |
		//	OF="of" |
		//	RELOCATABLE="relocatable" |
		//	SWITCH="switch" |
		//	TRY="try" |
		//	TYPE="type" |
		//	TYPEOF="typeof" |
		//	USING="using" |
		//	ILLEGAL;
		public EnumRule getRule() { return rule; }
		
		//AS="as" | CASE="case" | CATCH="catch" | FINAL="final" | LET="let" | MATCH="match" | OF="of" | RELOCATABLE="relocatable"
		//| SWITCH="switch" | TRY="try" | TYPE="type" | TYPEOF="typeof" | USING="using" | ILLEGAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AS="as"
		public EnumLiteralDeclaration getASEnumLiteralDeclaration_0() { return cASEnumLiteralDeclaration_0; }
		
		//"as"
		public Keyword getASAsKeyword_0_0() { return cASAsKeyword_0_0; }
		
		//CASE="case"
		public EnumLiteralDeclaration getCASEEnumLiteralDeclaration_1() { return cCASEEnumLiteralDeclaration_1; }
		
		//"case"
		public Keyword getCASECaseKeyword_1_0() { return cCASECaseKeyword_1_0; }
		
		//CATCH="catch"
		public EnumLiteralDeclaration getCATCHEnumLiteralDeclaration_2() { return cCATCHEnumLiteralDeclaration_2; }
		
		//"catch"
		public Keyword getCATCHCatchKeyword_2_0() { return cCATCHCatchKeyword_2_0; }
		
		//FINAL="final"
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_3() { return cFINALEnumLiteralDeclaration_3; }
		
		//"final"
		public Keyword getFINALFinalKeyword_3_0() { return cFINALFinalKeyword_3_0; }
		
		//LET="let"
		public EnumLiteralDeclaration getLETEnumLiteralDeclaration_4() { return cLETEnumLiteralDeclaration_4; }
		
		//"let"
		public Keyword getLETLetKeyword_4_0() { return cLETLetKeyword_4_0; }
		
		//MATCH="match"
		public EnumLiteralDeclaration getMATCHEnumLiteralDeclaration_5() { return cMATCHEnumLiteralDeclaration_5; }
		
		//"match"
		public Keyword getMATCHMatchKeyword_5_0() { return cMATCHMatchKeyword_5_0; }
		
		//OF="of"
		public EnumLiteralDeclaration getOFEnumLiteralDeclaration_6() { return cOFEnumLiteralDeclaration_6; }
		
		//"of"
		public Keyword getOFOfKeyword_6_0() { return cOFOfKeyword_6_0; }
		
		//RELOCATABLE="relocatable"
		public EnumLiteralDeclaration getRELOCATABLEEnumLiteralDeclaration_7() { return cRELOCATABLEEnumLiteralDeclaration_7; }
		
		//"relocatable"
		public Keyword getRELOCATABLERelocatableKeyword_7_0() { return cRELOCATABLERelocatableKeyword_7_0; }
		
		//SWITCH="switch"
		public EnumLiteralDeclaration getSWITCHEnumLiteralDeclaration_8() { return cSWITCHEnumLiteralDeclaration_8; }
		
		//"switch"
		public Keyword getSWITCHSwitchKeyword_8_0() { return cSWITCHSwitchKeyword_8_0; }
		
		//TRY="try"
		public EnumLiteralDeclaration getTRYEnumLiteralDeclaration_9() { return cTRYEnumLiteralDeclaration_9; }
		
		//"try"
		public Keyword getTRYTryKeyword_9_0() { return cTRYTryKeyword_9_0; }
		
		//TYPE="type"
		public EnumLiteralDeclaration getTYPEEnumLiteralDeclaration_10() { return cTYPEEnumLiteralDeclaration_10; }
		
		//"type"
		public Keyword getTYPETypeKeyword_10_0() { return cTYPETypeKeyword_10_0; }
		
		//TYPEOF="typeof"
		public EnumLiteralDeclaration getTYPEOFEnumLiteralDeclaration_11() { return cTYPEOFEnumLiteralDeclaration_11; }
		
		//"typeof"
		public Keyword getTYPEOFTypeofKeyword_11_0() { return cTYPEOFTypeofKeyword_11_0; }
		
		//USING="using"
		public EnumLiteralDeclaration getUSINGEnumLiteralDeclaration_12() { return cUSINGEnumLiteralDeclaration_12; }
		
		//"using"
		public Keyword getUSINGUsingKeyword_12_0() { return cUSINGUsingKeyword_12_0; }
		
		//ILLEGAL
		public EnumLiteralDeclaration getILLEGALEnumLiteralDeclaration_13() { return cILLEGALEnumLiteralDeclaration_13; }
		
		//"ILLEGAL"
		public Keyword getILLEGALILLEGALKeyword_13_0() { return cILLEGALILLEGALKeyword_13_0; }
	}
	
	private final ModelElements pModel;
	private final ContractElements pContract;
	private final DeclarationElements pDeclaration;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final StructDeclarationElements pStructDeclaration;
	private final EnumDefinitionElements pEnumDefinition;
	private final EnumValueElements pEnumValue;
	private final FunctionParameterDeclarationElements pFunctionParameterDeclaration;
	private final ArrayDefinitionDeclarationElements pArrayDefinitionDeclaration;
	private final FilledArrayElements pFilledArray;
	private final ValueSetsElements pValueSets;
	private final ArrayDeclarationElements pArrayDeclaration;
	private final NamedTypeElements pNamedType;
	private final SimpleTypeDeclarationElements pSimpleTypeDeclaration;
	private final MappingAccessElements pMappingAccess;
	private final ArrayAccessElements pArrayAccess;
	private final ArrayIndexElements pArrayIndex;
	private final FieldAccessElements pFieldAccess;
	private final MappingDeclarationElements pMappingDeclaration;
	private final UnnamedMappingDeclarationElements pUnnamedMappingDeclaration;
	private final PrimaryTypeDefinitionDeclarationElements pPrimaryTypeDefinitionDeclaration;
	private final PrimaryTypeDeclarationElements pPrimaryTypeDeclaration;
	private final OperationAssegnationLiteralElements pOperationAssegnationLiteral;
	private final SingleDefinitionElements pSingleDefinition;
	private final NonArrayableDeclarationElements pNonArrayableDeclaration;
	private final ArrayableDeclarationElements pArrayableDeclaration;
	private final ConcreteStructureDefinitionDeclarationElements pConcreteStructureDefinitionDeclaration;
	private final ConcreteStructDeclarationElements pConcreteStructDeclaration;
	private final StructureFieldValueElements pStructureFieldValue;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final InternalBlockElements pInternalBlock;
	private final ArrayDefinitionElements pArrayDefinition;
	private final FieldDefinitionElements pFieldDefinition;
	private final MappingDefinitionElements pMappingDefinition;
	private final FunctionCallListArgumentsElements pFunctionCallListArguments;
	private final FunctionCallArgumentsElements pFunctionCallArguments;
	private final FunctionCallArgElements pFunctionCallArg;
	private final FunctionDefinitionOptionalElementElements pFunctionDefinitionOptionalElement;
	private final ConstElements pConst;
	private final VisibilitySpecifierElements pVisibilitySpecifier;
	private final VariableElements pVariable;
	private final VariableDeclarationOptionalElementElements pVariableDeclarationOptionalElement;
	private final IndexedSpeciferElements pIndexedSpecifer;
	private final ConstantSpecifierElements pConstantSpecifier;
	private final LocationSpecifierElements pLocationSpecifier;
	private final TypeElements pType;
	private final StandardTypeElements pStandardType;
	private final StandardTypeWithoutQualifiedIdentifierElements pStandardTypeWithoutQualifiedIdentifier;
	private final ElementaryTypeElements pElementaryType;
	private final ArrayDimensionsElements pArrayDimensions;
	private final VarTypeElements pVarType;
	private final TupleElements pTuple;
	private final TupleSeparatorElements pTupleSeparator;
	private final SimpleStatementElements pSimpleStatement;
	private final SimpleStatement2Elements pSimpleStatement2;
	private final ExpressionStatementElements pExpressionStatement;
	private final QualifiedIdentifierElements pQualifiedIdentifier;
	private final QualifierElements pQualifier;
	private final FieldElements pField;
	private final IndexElements pIndex;
	private final ArgumentsElements pArguments;
	private final ReturnsParameterListElements pReturnsParameterList;
	private final ReturnParameterDeclarationElements pReturnParameterDeclaration;
	private final LoopStructuresElements pLoopStructures;
	private final StatementElements pStatement;
	private final DeleteStatementElements pDeleteStatement;
	private final IfStatementElements pIfStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final BodyElements pBody;
	private final ContinueStatementElements pContinueStatement;
	private final BreakStatementElements pBreakStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ThrowStatementElements pThrowStatement;
	private final PlaceHolderStatementElements pPlaceHolderStatement;
	private final LogicalOperationsElements pLogicalOperations;
	private final ConditionOperationElements pConditionOperation;
	private final LiteralElements pLiteral;
	private final GasleftFunctionElements pGasleftFunction;
	private final BlockhashFunctionElements pBlockhashFunction;
	private final MathematicalFunctionElements pMathematicalFunction;
	private final EcrecoverFunctionElements pEcrecoverFunction;
	private final HashFunctionElements pHashFunction;
	private final IntParameterElements pIntParameter;
	private final FunctionCallElements pFunctionCall;
	private final ArithmeticOperationsElements pArithmeticOperations;
	private final PrimaryArithmeticElements pPrimaryArithmetic;
	private final SecondOperatorsElements pSecondOperators;
	private final BooleanConstElements pBooleanConst;
	private final NumericLiteralElements pNumericLiteral;
	private final NowElements pNow;
	private final UnitTypesElements pUnitTypes;
	private final NumberDimensionlessElements pNumberDimensionless;
	private final EtherElements pEther;
	private final TimeElements pTime;
	private final StringLiteralElements pStringLiteral;
	private final IntLiteralElements pIntLiteral;
	private final HexLiteralElements pHexLiteral;
	private final DecimalLiteralElements pDecimalLiteral;
	private final TypeCastElements pTypeCast;
	private final SpecialVariablesElements pSpecialVariables;
	private final TerminalRule tHEX;
	private final TerminalRule tDECIMAL;
	private final ElementaryTypeNameEnumElements pElementaryTypeNameEnum;
	private final MapLocationLiteralElements pMapLocationLiteral;
	private final LocationSpecifierEnumElements pLocationSpecifierEnum;
	private final VisibilityEnumElements pVisibilityEnum;
	private final LogicalOperationLiteralElements eLogicalOperationLiteral;
	private final AssignmentOpEnumElements eAssignmentOpEnum;
	private final EqualityOpEnumElements eEqualityOpEnum;
	private final ComparisonOpEnumElements eComparisonOpEnum;
	private final ShiftOpEnumElements eShiftOpEnum;
	private final AdditionOpEnumElements eAdditionOpEnum;
	private final MulDivModOpEnumElements eMulDivModOpEnum;
	private final IncDecOpEnumElements eIncDecOpEnum;
	private final BooleanLiteralEnumElements eBooleanLiteralEnum;
	private final EtherSubDenominationEnumElements eEtherSubDenominationEnum;
	private final TimeSubdenominationEnumElements eTimeSubdenominationEnum;
	private final SpecialVariablesTypeEnumElements pSpecialVariablesTypeEnum;
	private final TerminalRule tBLOCK;
	private final TerminalRule tMSG;
	private final TerminalRule tTX;
	private final SpecialExpressionTypeEnumElements eSpecialExpressionTypeEnum;
	private final ReservedWordsEnumElements eReservedWordsEnum;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public OptGrammarGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pContract = new ContractElements();
		this.pDeclaration = new DeclarationElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pStructDeclaration = new StructDeclarationElements();
		this.pEnumDefinition = new EnumDefinitionElements();
		this.pEnumValue = new EnumValueElements();
		this.pFunctionParameterDeclaration = new FunctionParameterDeclarationElements();
		this.pArrayDefinitionDeclaration = new ArrayDefinitionDeclarationElements();
		this.pFilledArray = new FilledArrayElements();
		this.pValueSets = new ValueSetsElements();
		this.pArrayDeclaration = new ArrayDeclarationElements();
		this.pNamedType = new NamedTypeElements();
		this.pSimpleTypeDeclaration = new SimpleTypeDeclarationElements();
		this.pMappingAccess = new MappingAccessElements();
		this.pArrayAccess = new ArrayAccessElements();
		this.pArrayIndex = new ArrayIndexElements();
		this.pFieldAccess = new FieldAccessElements();
		this.pMappingDeclaration = new MappingDeclarationElements();
		this.pUnnamedMappingDeclaration = new UnnamedMappingDeclarationElements();
		this.pPrimaryTypeDefinitionDeclaration = new PrimaryTypeDefinitionDeclarationElements();
		this.pPrimaryTypeDeclaration = new PrimaryTypeDeclarationElements();
		this.pOperationAssegnationLiteral = new OperationAssegnationLiteralElements();
		this.pSingleDefinition = new SingleDefinitionElements();
		this.pNonArrayableDeclaration = new NonArrayableDeclarationElements();
		this.pArrayableDeclaration = new ArrayableDeclarationElements();
		this.pConcreteStructureDefinitionDeclaration = new ConcreteStructureDefinitionDeclarationElements();
		this.pConcreteStructDeclaration = new ConcreteStructDeclarationElements();
		this.pStructureFieldValue = new StructureFieldValueElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pInternalBlock = new InternalBlockElements();
		this.pArrayDefinition = new ArrayDefinitionElements();
		this.pFieldDefinition = new FieldDefinitionElements();
		this.pMappingDefinition = new MappingDefinitionElements();
		this.pFunctionCallListArguments = new FunctionCallListArgumentsElements();
		this.pFunctionCallArguments = new FunctionCallArgumentsElements();
		this.pFunctionCallArg = new FunctionCallArgElements();
		this.pFunctionDefinitionOptionalElement = new FunctionDefinitionOptionalElementElements();
		this.pConst = new ConstElements();
		this.pVisibilitySpecifier = new VisibilitySpecifierElements();
		this.pVariable = new VariableElements();
		this.pVariableDeclarationOptionalElement = new VariableDeclarationOptionalElementElements();
		this.pIndexedSpecifer = new IndexedSpeciferElements();
		this.pConstantSpecifier = new ConstantSpecifierElements();
		this.pLocationSpecifier = new LocationSpecifierElements();
		this.pType = new TypeElements();
		this.pStandardType = new StandardTypeElements();
		this.pStandardTypeWithoutQualifiedIdentifier = new StandardTypeWithoutQualifiedIdentifierElements();
		this.pElementaryType = new ElementaryTypeElements();
		this.pArrayDimensions = new ArrayDimensionsElements();
		this.pVarType = new VarTypeElements();
		this.pTuple = new TupleElements();
		this.pTupleSeparator = new TupleSeparatorElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pSimpleStatement2 = new SimpleStatement2Elements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pQualifiedIdentifier = new QualifiedIdentifierElements();
		this.pQualifier = new QualifierElements();
		this.pField = new FieldElements();
		this.pIndex = new IndexElements();
		this.pArguments = new ArgumentsElements();
		this.pReturnsParameterList = new ReturnsParameterListElements();
		this.pReturnParameterDeclaration = new ReturnParameterDeclarationElements();
		this.pLoopStructures = new LoopStructuresElements();
		this.pStatement = new StatementElements();
		this.pDeleteStatement = new DeleteStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pBody = new BodyElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pThrowStatement = new ThrowStatementElements();
		this.pPlaceHolderStatement = new PlaceHolderStatementElements();
		this.pLogicalOperations = new LogicalOperationsElements();
		this.pConditionOperation = new ConditionOperationElements();
		this.pLiteral = new LiteralElements();
		this.pGasleftFunction = new GasleftFunctionElements();
		this.pBlockhashFunction = new BlockhashFunctionElements();
		this.pMathematicalFunction = new MathematicalFunctionElements();
		this.pEcrecoverFunction = new EcrecoverFunctionElements();
		this.pHashFunction = new HashFunctionElements();
		this.pIntParameter = new IntParameterElements();
		this.pFunctionCall = new FunctionCallElements();
		this.pArithmeticOperations = new ArithmeticOperationsElements();
		this.pPrimaryArithmetic = new PrimaryArithmeticElements();
		this.pSecondOperators = new SecondOperatorsElements();
		this.pBooleanConst = new BooleanConstElements();
		this.pNumericLiteral = new NumericLiteralElements();
		this.pNow = new NowElements();
		this.pUnitTypes = new UnitTypesElements();
		this.pNumberDimensionless = new NumberDimensionlessElements();
		this.pEther = new EtherElements();
		this.pTime = new TimeElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pHexLiteral = new HexLiteralElements();
		this.pDecimalLiteral = new DecimalLiteralElements();
		this.pTypeCast = new TypeCastElements();
		this.pSpecialVariables = new SpecialVariablesElements();
		this.tHEX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.HEX");
		this.tDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.DECIMAL");
		this.pElementaryTypeNameEnum = new ElementaryTypeNameEnumElements();
		this.pMapLocationLiteral = new MapLocationLiteralElements();
		this.pLocationSpecifierEnum = new LocationSpecifierEnumElements();
		this.pVisibilityEnum = new VisibilityEnumElements();
		this.eLogicalOperationLiteral = new LogicalOperationLiteralElements();
		this.eAssignmentOpEnum = new AssignmentOpEnumElements();
		this.eEqualityOpEnum = new EqualityOpEnumElements();
		this.eComparisonOpEnum = new ComparisonOpEnumElements();
		this.eShiftOpEnum = new ShiftOpEnumElements();
		this.eAdditionOpEnum = new AdditionOpEnumElements();
		this.eMulDivModOpEnum = new MulDivModOpEnumElements();
		this.eIncDecOpEnum = new IncDecOpEnumElements();
		this.eBooleanLiteralEnum = new BooleanLiteralEnumElements();
		this.eEtherSubDenominationEnum = new EtherSubDenominationEnumElements();
		this.eTimeSubdenominationEnum = new TimeSubdenominationEnumElements();
		this.pSpecialVariablesTypeEnum = new SpecialVariablesTypeEnumElements();
		this.tBLOCK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.BLOCK");
		this.tMSG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.MSG");
		this.tTX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.myGrammar.OptGrammar.TX");
		this.eSpecialExpressionTypeEnum = new SpecialExpressionTypeEnumElements();
		this.eReservedWordsEnum = new ReservedWordsEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.unicam.myGrammar.OptGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// ---------- TO DO ----------
	///*
	// * Controllare gli array
	// * Controllare le strutture
	// * Controllare le functionCall
	// */ // ---------- TO DO ----------
	//// ---------- Old grammar ----------
	///*
	// * Solidity:
	// * (
	// * importDirective+=ImportDirective |
	// * contract+=Contract
	// * )*
	// * ;
	// * 
	// * ImportDirective:
	// * "import" importURI=STRING ";" |
	// * "import" "*" "as" unitAlias=ID "from" importURI=STRING ";" |
	// * "import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";"
	// * ;
	// * 
	// * SymbolAlias:
	// * symbol=ID "as" alias=ID
	// * ;
	// * 
	// * Contract:
	// * "contract" name=ID (
	// * inheritanceSpecifiers+=InheritanceSpecifier ("," inheritanceSpecifiers+=InheritanceSpecifier)*
	// * )? body=DefinitionBody
	// * ;
	// * 
	// * InheritanceSpecifier:
	// * SuperType=Contract (args=FunctionCallListArguments)?
	// * ;
	// * 
	// * DefinitionBody:
	// * {DefinitionBody} "{" (
	// * functions+=FunctionDefinition |
	// * structs+=StructDefinition |
	// * enums+=EnumDefinition |
	// * variables+=VariableDeclaration ";" |
	// * modifiers+=Modifier |
	// * events+=Event
	// * )* "}"
	// * ;
	// */ // ---------- End Old grammar ----------
	//// ---------- New grammar ----------
	//Model:
	//	operations+=Contract*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Contract:
	//	"contract" name=ID "{" (blocks+=Declaration ";" | blocks+=FunctionDefinition)* "}";
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Declaration:
	//	FunctionDeclaration | StructDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//FunctionDeclaration:
	//	EnumDefinition | FunctionParameterDeclaration;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//StructDeclaration:
	//	visibility=VisibilityEnum? "struct" name=ID "{" (members+=Declaration ";")* "}";
	public StructDeclarationElements getStructDeclarationAccess() {
		return pStructDeclaration;
	}
	
	public ParserRule getStructDeclarationRule() {
		return getStructDeclarationAccess().getRule();
	}
	
	//EnumDefinition:
	//	visibility=VisibilityEnum? "enum" name=ID "{" members+=EnumValue ("," members+=EnumValue)* "}";
	public EnumDefinitionElements getEnumDefinitionAccess() {
		return pEnumDefinition;
	}
	
	public ParserRule getEnumDefinitionRule() {
		return getEnumDefinitionAccess().getRule();
	}
	
	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//FunctionParameterDeclaration:
	//	ArrayDefinitionDeclaration | MappingDeclaration | PrimaryTypeDefinitionDeclaration |
	//	ConcreteStructureDefinitionDeclaration;
	public FunctionParameterDeclarationElements getFunctionParameterDeclarationAccess() {
		return pFunctionParameterDeclaration;
	}
	
	public ParserRule getFunctionParameterDeclarationRule() {
		return getFunctionParameterDeclarationAccess().getRule();
	}
	
	//ArrayDefinitionDeclaration:
	//	ArrayDeclaration ('=' (blocks=FilledArray | var=[Declaration] | access=(MappingAccess | ArrayAccess |
	//	FieldAccess)))?;
	public ArrayDefinitionDeclarationElements getArrayDefinitionDeclarationAccess() {
		return pArrayDefinitionDeclaration;
	}
	
	public ParserRule getArrayDefinitionDeclarationRule() {
		return getArrayDefinitionDeclarationAccess().getRule();
	}
	
	//FilledArray:
	//	arrays+=ValueSets+;
	public FilledArrayElements getFilledArrayAccess() {
		return pFilledArray;
	}
	
	public ParserRule getFilledArrayRule() {
		return getFilledArrayAccess().getRule();
	}
	
	//ValueSets:
	//	{ValueSets} ("[]" | "[" (values+=LogicalOperations ("," values+=LogicalOperations)*)? "]");
	public ValueSetsElements getValueSetsAccess() {
		return pValueSets;
	}
	
	public ParserRule getValueSetsRule() {
		return getValueSetsAccess().getRule();
	}
	
	//ArrayDeclaration:
	//	location=LocationSpecifierEnum? constant?="constant"? visibility=VisibilityEnum? (type=NamedType |
	//	strucType=[StructDeclaration]) name=ID ("[" sizes+=IntLiteral? "]")+;
	public ArrayDeclarationElements getArrayDeclarationAccess() {
		return pArrayDeclaration;
	}
	
	public ParserRule getArrayDeclarationRule() {
		return getArrayDeclarationAccess().getRule();
	}
	
	//NamedType:
	//	SimpleTypeDeclaration | ElementaryTypeNameEnum;
	public NamedTypeElements getNamedTypeAccess() {
		return pNamedType;
	}
	
	public ParserRule getNamedTypeRule() {
		return getNamedTypeAccess().getRule();
	}
	
	//SimpleTypeDeclaration:
	//	type=('string' | 'bool');
	public SimpleTypeDeclarationElements getSimpleTypeDeclarationAccess() {
		return pSimpleTypeDeclaration;
	}
	
	public ParserRule getSimpleTypeDeclarationRule() {
		return getSimpleTypeDeclarationAccess().getRule();
	}
	
	//MappingAccess:
	//	map=[MappingDeclaration] '<(' index=LogicalOperations ')>';
	public MappingAccessElements getMappingAccessAccess() {
		return pMappingAccess;
	}
	
	public ParserRule getMappingAccessRule() {
		return getMappingAccessAccess().getRule();
	}
	
	//ArrayAccess:
	//	variable=[ArrayDefinitionDeclaration] indexes+=ArrayIndex+ ('.' field=ID)?;
	public ArrayAccessElements getArrayAccessAccess() {
		return pArrayAccess;
	}
	
	public ParserRule getArrayAccessRule() {
		return getArrayAccessAccess().getRule();
	}
	
	//ArrayIndex:
	//	'[' value=LogicalOperations ']';
	public ArrayIndexElements getArrayIndexAccess() {
		return pArrayIndex;
	}
	
	public ParserRule getArrayIndexRule() {
		return getArrayIndexAccess().getRule();
	}
	
	//FieldAccess:
	//	ref=[ConcreteStructDeclaration] '.' field=ID;
	public FieldAccessElements getFieldAccessAccess() {
		return pFieldAccess;
	}
	
	public ParserRule getFieldAccessRule() {
		return getFieldAccessAccess().getRule();
	}
	
	//MappingDeclaration:
	//	location=MapLocationLiteral? visibility=VisibilityEnum? unnamedMappingDeclaration=UnnamedMappingDeclaration name=ID;
	public MappingDeclarationElements getMappingDeclarationAccess() {
		return pMappingDeclaration;
	}
	
	public ParserRule getMappingDeclarationRule() {
		return getMappingDeclarationAccess().getRule();
	}
	
	//UnnamedMappingDeclaration:
	//	"mapping" "(" type=NamedType "=>" (secondRef=[Declaration] | second=(NamedType | UnnamedMappingDeclaration))
	//	array?="[]"? ")";
	public UnnamedMappingDeclarationElements getUnnamedMappingDeclarationAccess() {
		return pUnnamedMappingDeclaration;
	}
	
	public ParserRule getUnnamedMappingDeclarationRule() {
		return getUnnamedMappingDeclarationAccess().getRule();
	}
	
	//PrimaryTypeDefinitionDeclaration:
	//	(PrimaryTypeDeclaration | ref=[PrimaryTypeDeclaration]) (operator=OperationAssegnationLiteral
	//	value=(LogicalOperations | SingleDefinition))?;
	public PrimaryTypeDefinitionDeclarationElements getPrimaryTypeDefinitionDeclarationAccess() {
		return pPrimaryTypeDefinitionDeclaration;
	}
	
	public ParserRule getPrimaryTypeDefinitionDeclarationRule() {
		return getPrimaryTypeDefinitionDeclarationAccess().getRule();
	}
	
	//PrimaryTypeDeclaration:
	//	ArrayableDeclaration | NonArrayableDeclaration;
	public PrimaryTypeDeclarationElements getPrimaryTypeDeclarationAccess() {
		return pPrimaryTypeDeclaration;
	}
	
	public ParserRule getPrimaryTypeDeclarationRule() {
		return getPrimaryTypeDeclarationAccess().getRule();
	}
	
	//OperationAssegnationLiteral:
	//	value=("=" | "*=" | "+=" | "-=" | "/=");
	public OperationAssegnationLiteralElements getOperationAssegnationLiteralAccess() {
		return pOperationAssegnationLiteral;
	}
	
	public ParserRule getOperationAssegnationLiteralRule() {
		return getOperationAssegnationLiteralAccess().getRule();
	}
	
	//SingleDefinition:
	//	first=("++" | "--") name=[PrimaryTypeDeclaration] | name=[PrimaryTypeDeclaration] second=("++" | "--");
	public SingleDefinitionElements getSingleDefinitionAccess() {
		return pSingleDefinition;
	}
	
	public ParserRule getSingleDefinitionRule() {
		return getSingleDefinitionAccess().getRule();
	}
	
	//NonArrayableDeclaration:
	//	location=LocationSpecifierEnum? constant?='constant'? visibility=VisibilityEnum? type=SimpleTypeDeclaration name=ID;
	public NonArrayableDeclarationElements getNonArrayableDeclarationAccess() {
		return pNonArrayableDeclaration;
	}
	
	public ParserRule getNonArrayableDeclarationRule() {
		return getNonArrayableDeclarationAccess().getRule();
	}
	
	//ArrayableDeclaration:
	//	constant?='constant'? visibility=VisibilityEnum? type=ElementaryTypeNameEnum name=ID;
	public ArrayableDeclarationElements getArrayableDeclarationAccess() {
		return pArrayableDeclaration;
	}
	
	public ParserRule getArrayableDeclarationRule() {
		return getArrayableDeclarationAccess().getRule();
	}
	
	//ConcreteStructureDefinitionDeclaration:
	//	"struct" (ConcreteStructDeclaration | ref=[ConcreteStructDeclaration]) ("=" ("{" couples+=StructureFieldValue (","
	//	couples+=StructureFieldValue)* "}"
	//	| existenceRef=[ConcreteStructDeclaration] | arrayAccessRef=ArrayAccess))?;
	public ConcreteStructureDefinitionDeclarationElements getConcreteStructureDefinitionDeclarationAccess() {
		return pConcreteStructureDefinitionDeclaration;
	}
	
	public ParserRule getConcreteStructureDefinitionDeclarationRule() {
		return getConcreteStructureDefinitionDeclarationAccess().getRule();
	}
	
	//ConcreteStructDeclaration:
	//	location=LocationSpecifierEnum? constant?="constant"? type=[StructDeclaration] name=ID;
	public ConcreteStructDeclarationElements getConcreteStructDeclarationAccess() {
		return pConcreteStructDeclaration;
	}
	
	public ParserRule getConcreteStructDeclarationRule() {
		return getConcreteStructDeclarationAccess().getRule();
	}
	
	//StructureFieldValue:
	//	field=ID ":" values=(LogicalOperations | FilledArray);
	public StructureFieldValueElements getStructureFieldValueAccess() {
		return pStructureFieldValue;
	}
	
	public ParserRule getStructureFieldValueRule() {
		return getStructureFieldValueAccess().getRule();
	}
	
	//// Anonymous function allowed when "name" is not specified.
	//FunctionDefinition:
	//	payable?="payable"? "function" name=ID "(" (parameters+=FunctionParameterDeclaration (","
	//	parameters+=FunctionParameterDeclaration)*)? ")"
	//	optionalElements+=FunctionDefinitionOptionalElement* ("returns" "(" returnType=NamedType ")")?
	//	"{"
	//	blocks+=InternalBlock*
	//	returnVal=ReturnStatement?
	//	"}";
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//InternalBlock:
	//	def=(ArrayDefinition | MappingDefinition | SingleDefinition | FieldDefinition) ";"
	//	| dec=FunctionDeclaration ";"
	//	| loop=LoopStructures
	//	| call=FunctionCall ";";
	public InternalBlockElements getInternalBlockAccess() {
		return pInternalBlock;
	}
	
	public ParserRule getInternalBlockRule() {
		return getInternalBlockAccess().getRule();
	}
	
	//ArrayDefinition:
	//	ref=[ArrayDefinitionDeclaration] ('=' (blocks=FilledArray
	//	| arrayRef=[ArrayDefinitionDeclaration]) | indexes+=ArrayIndex+ ('.' field=ID)? operator=OperationAssegnationLiteral
	//	value=(LogicalOperations | FilledArray));
	public ArrayDefinitionElements getArrayDefinitionAccess() {
		return pArrayDefinition;
	}
	
	public ParserRule getArrayDefinitionRule() {
		return getArrayDefinitionAccess().getRule();
	}
	
	//FieldDefinition:
	//	FieldAccess '=' value=(LogicalOperations | SingleDefinition);
	public FieldDefinitionElements getFieldDefinitionAccess() {
		return pFieldDefinition;
	}
	
	public ParserRule getFieldDefinitionRule() {
		return getFieldDefinitionAccess().getRule();
	}
	
	//MappingDefinition:
	//	MappingAccess '=' sec=(LogicalOperations | FilledArray);
	public MappingDefinitionElements getMappingDefinitionAccess() {
		return pMappingDefinition;
	}
	
	public ParserRule getMappingDefinitionRule() {
		return getMappingDefinitionAccess().getRule();
	}
	
	//// ---------- End New grammar ----------
	//FunctionCallListArguments:
	//	"(" {FunctionCallListArguments} (arguments+=LogicalOperations ("," arguments+=LogicalOperations)*)?
	//	")";
	public FunctionCallListArgumentsElements getFunctionCallListArgumentsAccess() {
		return pFunctionCallListArguments;
	}
	
	public ParserRule getFunctionCallListArgumentsRule() {
		return getFunctionCallListArgumentsAccess().getRule();
	}
	
	//// call({arg1: 1, arg2: 2})
	//FunctionCallArguments:
	//	"("
	//	"{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)?
	//	"}"
	//	")" | FunctionCallListArguments;
	public FunctionCallArgumentsElements getFunctionCallArgumentsAccess() {
		return pFunctionCallArguments;
	}
	
	public ParserRule getFunctionCallArgumentsRule() {
		return getFunctionCallArgumentsAccess().getRule();
	}
	
	//FunctionCallArg:
	//	name=ID ":" expr=LogicalOperations;
	public FunctionCallArgElements getFunctionCallArgAccess() {
		return pFunctionCallArg;
	}
	
	public ParserRule getFunctionCallArgRule() {
		return getFunctionCallArgAccess().getRule();
	}
	
	//FunctionDefinitionOptionalElement:
	//	Const | VisibilitySpecifier;
	public FunctionDefinitionOptionalElementElements getFunctionDefinitionOptionalElementAccess() {
		return pFunctionDefinitionOptionalElement;
	}
	
	public ParserRule getFunctionDefinitionOptionalElementRule() {
		return getFunctionDefinitionOptionalElementAccess().getRule();
	}
	
	//Const:
	//	"constant" {Const};
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//VisibilitySpecifier:
	//	visibility=VisibilityEnum;
	public VisibilitySpecifierElements getVisibilitySpecifierAccess() {
		return pVisibilitySpecifier;
	}
	
	public ParserRule getVisibilitySpecifierRule() {
		return getVisibilitySpecifierAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	///*
	//// Variable Declarations
	//VariableDeclaration returns Statement:
	//	StandardVariableDeclaration |
	//	VarVariableDeclaration |
	//	VarVariableTupleVariableDeclaration
	//;
	//
	//StandardVariableDeclaration:
	//	type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable (
	//		"=" expression=LogicalOperations
	//	)?
	//;
	//
	//VarVariableDeclaration:
	//	varType=VarType variable=Variable (
	//		"=" expression=LogicalOperations
	//	)?
	//;
	//
	//VarVariableTupleVariableDeclaration:
	//	varType=VarType tuple=Tuple (
	//		"=" expression=LogicalOperations
	//	)?
	//;
	//*/ VariableDeclarationOptionalElement:
	//	VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier;
	public VariableDeclarationOptionalElementElements getVariableDeclarationOptionalElementAccess() {
		return pVariableDeclarationOptionalElement;
	}
	
	public ParserRule getVariableDeclarationOptionalElementRule() {
		return getVariableDeclarationOptionalElementAccess().getRule();
	}
	
	//IndexedSpecifer:
	//	"indexed" {IndexedSpecifer};
	public IndexedSpeciferElements getIndexedSpeciferAccess() {
		return pIndexedSpecifer;
	}
	
	public ParserRule getIndexedSpeciferRule() {
		return getIndexedSpeciferAccess().getRule();
	}
	
	//ConstantSpecifier:
	//	"constant" {ConstantSpecifier};
	public ConstantSpecifierElements getConstantSpecifierAccess() {
		return pConstantSpecifier;
	}
	
	public ParserRule getConstantSpecifierRule() {
		return getConstantSpecifierAccess().getRule();
	}
	
	//LocationSpecifier:
	//	location=LocationSpecifierEnum;
	public LocationSpecifierElements getLocationSpecifierAccess() {
		return pLocationSpecifier;
	}
	
	public ParserRule getLocationSpecifierRule() {
		return getLocationSpecifierAccess().getRule();
	}
	
	//// Types
	//Type:
	//	StandardType | isVarType?=VarType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//StandardType:
	//	ElementaryType dimension=ArrayDimensions? | MappingDeclaration | QualifiedIdentifier;
	public StandardTypeElements getStandardTypeAccess() {
		return pStandardType;
	}
	
	public ParserRule getStandardTypeRule() {
		return getStandardTypeAccess().getRule();
	}
	
	//StandardTypeWithoutQualifiedIdentifier:
	//	ElementaryType dimension=ArrayDimensions? | MappingDeclaration;
	public StandardTypeWithoutQualifiedIdentifierElements getStandardTypeWithoutQualifiedIdentifierAccess() {
		return pStandardTypeWithoutQualifiedIdentifier;
	}
	
	public ParserRule getStandardTypeWithoutQualifiedIdentifierRule() {
		return getStandardTypeWithoutQualifiedIdentifierAccess().getRule();
	}
	
	//ElementaryType:
	//	name=ElementaryTypeNameEnum;
	public ElementaryTypeElements getElementaryTypeAccess() {
		return pElementaryType;
	}
	
	public ParserRule getElementaryTypeRule() {
		return getElementaryTypeAccess().getRule();
	}
	
	//ArrayDimensions:
	//	"[" {ArrayDimensions} value+=LogicalOperations? "]" ("[" value+=LogicalOperations? "]")*;
	public ArrayDimensionsElements getArrayDimensionsAccess() {
		return pArrayDimensions;
	}
	
	public ParserRule getArrayDimensionsRule() {
		return getArrayDimensionsAccess().getRule();
	}
	
	//VarType:
	//	"var";
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//// Tuples
	//Tuple:
	//	"(" {Tuple} (members+=LogicalOperations? (members+=TupleSeparator members+=LogicalOperations?)+)? ")";
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//TupleSeparator:
	//	"," {TupleSeparator};
	public TupleSeparatorElements getTupleSeparatorAccess() {
		return pTupleSeparator;
	}
	
	public ParserRule getTupleSeparatorRule() {
		return getTupleSeparatorAccess().getRule();
	}
	
	///*
	// * SimpleStatement
	// * --------------------
	// * SimpleStatement:
	// * SimpleStatement2 ";"
	// * ;
	// */ SimpleStatement:
	//	(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
	//	ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?) | VarType
	//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
	//	{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)) | ExpressionStatement)
	//	semicolon?=";";
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//SimpleStatement2:
	//	StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
	//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=LogicalOperations)?) |
	//	VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=LogicalOperations) |
	//	{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=LogicalOperations)) | ExpressionStatement;
	public SimpleStatement2Elements getSimpleStatement2Access() {
		return pSimpleStatement2;
	}
	
	public ParserRule getSimpleStatement2Rule() {
		return getSimpleStatement2Access().getRule();
	}
	
	//ExpressionStatement:
	//	expression=LogicalOperations;
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//QualifiedIdentifier:
	//	identifier=ID qualifiers+=Qualifier*;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return pQualifiedIdentifier;
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}
	
	//Qualifier:
	//	Field | Index | Arguments;
	public QualifierElements getQualifierAccess() {
		return pQualifier;
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}
	
	//Field:
	//	"." field=ID;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Index:
	//	"[" {Index} value=LogicalOperations? "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Arguments:
	//	arguments=FunctionCallArguments;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	///*
	// * Modifier:
	// "modifier" name=ID parameters=ParameterList? block=Body
	//;
	//
	//Event:
	//	"event" name=ID parameters=ParameterList? ";"
	//;
	//*
	//
	//ModifierInvocation:
	//	name=[Modifier] args=FunctionCallListArguments?
	//;*/ /*
	//ParameterList:
	//	"("
	//		{ParameterList} (parameters+=VariableDeclaration (
	//			"," parameters+=VariableDeclaration)*
	//		)?
	//	")"
	//;
	//*/ ReturnsParameterList:
	//	"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
	//	")";
	public ReturnsParameterListElements getReturnsParameterListAccess() {
		return pReturnsParameterList;
	}
	
	public ParserRule getReturnsParameterListRule() {
		return getReturnsParameterListAccess().getRule();
	}
	
	//ReturnParameterDeclaration:
	//	typeRef=Type variable=Variable?;
	public ReturnParameterDeclarationElements getReturnParameterDeclarationAccess() {
		return pReturnParameterDeclaration;
	}
	
	public ParserRule getReturnParameterDeclarationRule() {
		return getReturnParameterDeclarationAccess().getRule();
	}
	
	//LoopStructures:
	//	IfStatement | WhileStatement | ForStatement;
	public LoopStructuresElements getLoopStructuresAccess() {
		return pLoopStructures;
	}
	
	public ParserRule getLoopStructuresRule() {
		return getLoopStructuresAccess().getRule();
	}
	
	//Statement:
	//	LoopStructures | Body | PlaceHolderStatement | (ContinueStatement | BreakStatement | ReturnStatement | ThrowStatement
	//	| DeleteStatement | SimpleStatement);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//DeleteStatement:
	//	"delete" variable=QualifiedIdentifier ";";
	public DeleteStatementElements getDeleteStatementAccess() {
		return pDeleteStatement;
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}
	
	//IfStatement:
	//	"if" "(" condition=LogicalOperations ")"
	//	trueBody=Statement (=> "else" falseBody=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	"while" "(" condition=LogicalOperations ")"
	//	body=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ForStatement:
	//	"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=LogicalOperations? ";"
	//	loopExpression=ExpressionStatement? ")"
	//	body=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//Body:
	//	"{" {Body} (statements+=Statement statements+=Statement*)? "}";
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//ContinueStatement:
	//	"continue" {Continue} ";";
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}
	
	//BreakStatement:
	//	"break" {BreakStatement} ";";
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	"return" {ReturnStatement} expression=LogicalOperations? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ThrowStatement:
	//	"throw" {ThrowStatement} ";";
	public ThrowStatementElements getThrowStatementAccess() {
		return pThrowStatement;
	}
	
	public ParserRule getThrowStatementRule() {
		return getThrowStatementAccess().getRule();
	}
	
	//// Only allowed in a Modifier DAF
	//PlaceHolderStatement:
	//	"_" {PlaceHolderStatement} ";"?;
	public PlaceHolderStatementElements getPlaceHolderStatementAccess() {
		return pPlaceHolderStatement;
	}
	
	public ParserRule getPlaceHolderStatementRule() {
		return getPlaceHolderStatementAccess().getRule();
	}
	
	//LogicalOperations:
	//	first=Literal operations+=ConditionOperation* | negate?="NOT" first=Literal operations+=ConditionOperation* |
	//	ternary?="TERNARY" first=Literal "?" true=Literal ":" false=Literal;
	public LogicalOperationsElements getLogicalOperationsAccess() {
		return pLogicalOperations;
	}
	
	public ParserRule getLogicalOperationsRule() {
		return getLogicalOperationsAccess().getRule();
	}
	
	//ConditionOperation:
	//	operation=LogicalOperationLiteral negateSecond="NOT"? seconds=Literal;
	public ConditionOperationElements getConditionOperationAccess() {
		return pConditionOperation;
	}
	
	public ParserRule getConditionOperationRule() {
		return getConditionOperationAccess().getRule();
	}
	
	//Literal:
	//	SpecialVariables | BooleanConst | NumericLiteral | StringLiteral | GasleftFunction | BlockhashFunction |
	//	MathematicalFunction | HashFunction | EcrecoverFunction;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//GasleftFunction:
	//	name="gasleft" "(" ")";
	public GasleftFunctionElements getGasleftFunctionAccess() {
		return pGasleftFunction;
	}
	
	public ParserRule getGasleftFunctionRule() {
		return getGasleftFunctionAccess().getRule();
	}
	
	//BlockhashFunction:
	//	"blockhash" "(" parameter=IntParameter ")";
	public BlockhashFunctionElements getBlockhashFunctionAccess() {
		return pBlockhashFunction;
	}
	
	public ParserRule getBlockhashFunctionRule() {
		return getBlockhashFunctionAccess().getRule();
	}
	
	//MathematicalFunction:
	//	function=("addmod" | "mulmod") "("
	//	parameters+=IntParameter ","
	//	parameters+=IntParameter ","
	//	parameters+=IntParameter
	//	")";
	public MathematicalFunctionElements getMathematicalFunctionAccess() {
		return pMathematicalFunction;
	}
	
	public ParserRule getMathematicalFunctionRule() {
		return getMathematicalFunctionAccess().getRule();
	}
	
	//EcrecoverFunction:
	//	function="ecrecover" "("
	//	parameters+=IntParameter ","
	//	parameters+=IntParameter ","
	//	parameters+=IntParameter ","
	//	parameters+=IntParameter
	//	")";
	public EcrecoverFunctionElements getEcrecoverFunctionAccess() {
		return pEcrecoverFunction;
	}
	
	public ParserRule getEcrecoverFunctionRule() {
		return getEcrecoverFunctionAccess().getRule();
	}
	
	//HashFunction:
	//	name=("keccak256" | "sha256" | "ripemd160") "(" parameters=IntParameter ")";
	public HashFunctionElements getHashFunctionAccess() {
		return pHashFunction;
	}
	
	public ParserRule getHashFunctionRule() {
		return getHashFunctionAccess().getRule();
	}
	
	//IntParameter:
	//	param=ArithmeticOperations | fun=FunctionCall;
	public IntParameterElements getIntParameterAccess() {
		return pIntParameter;
	}
	
	public ParserRule getIntParameterRule() {
		return getIntParameterAccess().getRule();
	}
	
	//FunctionCall:
	//	name=[FunctionDefinition] "(" (parameters+=LogicalOperations ("," parameters+=LogicalOperations)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return pFunctionCall;
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}
	
	//ArithmeticOperations:
	//	first=PrimaryArithmetic seconds+=SecondOperators*;
	public ArithmeticOperationsElements getArithmeticOperationsAccess() {
		return pArithmeticOperations;
	}
	
	public ParserRule getArithmeticOperationsRule() {
		return getArithmeticOperationsAccess().getRule();
	}
	
	//PrimaryArithmetic:
	//	NumericLiteral |
	//	"(" LogicalOperations ")";
	public PrimaryArithmeticElements getPrimaryArithmeticAccess() {
		return pPrimaryArithmetic;
	}
	
	public ParserRule getPrimaryArithmeticRule() {
		return getPrimaryArithmeticAccess().getRule();
	}
	
	//SecondOperators:
	//	operator=("+" | "-" | "/" | "*") value=PrimaryArithmetic;
	public SecondOperatorsElements getSecondOperatorsAccess() {
		return pSecondOperators;
	}
	
	public ParserRule getSecondOperatorsRule() {
		return getSecondOperatorsAccess().getRule();
	}
	
	//BooleanConst:
	//	value=BooleanLiteralEnum;
	public BooleanConstElements getBooleanConstAccess() {
		return pBooleanConst;
	}
	
	public ParserRule getBooleanConstRule() {
		return getBooleanConstAccess().getRule();
	}
	
	//NumericLiteral:
	//	(intValue=NumberDimensionless | hexValue=HexLiteral | decimalValue=DecimalLiteral | now=Now) etherUnit=UnitTypes?;
	public NumericLiteralElements getNumericLiteralAccess() {
		return pNumericLiteral;
	}
	
	public ParserRule getNumericLiteralRule() {
		return getNumericLiteralAccess().getRule();
	}
	
	//Now:
	//	{Now} "now";
	public NowElements getNowAccess() {
		return pNow;
	}
	
	public ParserRule getNowRule() {
		return getNowAccess().getRule();
	}
	
	//UnitTypes:
	//	time=Time | units=Ether;
	public UnitTypesElements getUnitTypesAccess() {
		return pUnitTypes;
	}
	
	public ParserRule getUnitTypesRule() {
		return getUnitTypesAccess().getRule();
	}
	
	//NumberDimensionless:
	//	value=INT;
	public NumberDimensionlessElements getNumberDimensionlessAccess() {
		return pNumberDimensionless;
	}
	
	public ParserRule getNumberDimensionlessRule() {
		return getNumberDimensionlessAccess().getRule();
	}
	
	//Ether:
	//	value=INT ether=EtherSubDenominationEnum;
	public EtherElements getEtherAccess() {
		return pEther;
	}
	
	public ParserRule getEtherRule() {
		return getEtherAccess().getRule();
	}
	
	//Time:
	//	value=INT time=TimeSubdenominationEnum;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//IntLiteral:
	//	value=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//HexLiteral:
	//	value=HEX;
	public HexLiteralElements getHexLiteralAccess() {
		return pHexLiteral;
	}
	
	public ParserRule getHexLiteralRule() {
		return getHexLiteralAccess().getRule();
	}
	
	//DecimalLiteral:
	//	value=DECIMAL;
	public DecimalLiteralElements getDecimalLiteralAccess() {
		return pDecimalLiteral;
	}
	
	public ParserRule getDecimalLiteralRule() {
		return getDecimalLiteralAccess().getRule();
	}
	
	//TypeCast:
	//	value=ElementaryTypeNameEnum "("
	//	expression=LogicalOperations
	//	")";
	public TypeCastElements getTypeCastAccess() {
		return pTypeCast;
	}
	
	public ParserRule getTypeCastRule() {
		return getTypeCastAccess().getRule();
	}
	
	//SpecialVariables:
	//	type=SpecialVariablesTypeEnum "." field=ID qualifiers+=Qualifier*;
	public SpecialVariablesElements getSpecialVariablesAccess() {
		return pSpecialVariables;
	}
	
	public ParserRule getSpecialVariablesRule() {
		return getSpecialVariablesAccess().getRule();
	}
	
	//terminal HEX:
	//	"0x" ("0".."9" | "A".."F" | "a".."f")+;
	public TerminalRule getHEXRule() {
		return tHEX;
	}
	
	//terminal DECIMAL returns ecore::EDouble:
	//	INT ("." INT);
	public TerminalRule getDECIMALRule() {
		return tDECIMAL;
	}
	
	//ElementaryTypeNameEnum:
	//	type=("int" |
	//	"int16" |
	//	"int24" |
	//	"int32" |
	//	"int40" |
	//	"int48" |
	//	"int56" |
	//	"int64" |
	//	"int72" |
	//	"int80" |
	//	"int88" |
	//	"int96" |
	//	"int104" |
	//	"int112" |
	//	"int120" |
	//	"int128" |
	//	"int136" |
	//	"int144" |
	//	"int152" |
	//	"int160" |
	//	"int168" |
	//	"int178" |
	//	"int184" |
	//	"int192" |
	//	"int200" |
	//	"int208" |
	//	"int216" |
	//	"int224" |
	//	"int232" |
	//	"int240" |
	//	"int248" |
	//	"int256" |
	//	// UINT
	//	"uint" |
	//	"uint8" |
	//	"uint16" |
	//	"uint24" |
	//	"uint32" |
	//	"uint40" |
	//	"uint48" |
	//	"uint56" |
	//	"uint64" |
	//	"uint72" |
	//	"uint80" |
	//	"uint88" |
	//	"uint96" |
	//	"uint104" |
	//	"uint112" |
	//	"uint120" |
	//	"uint128" |
	//	"uint136" |
	//	"uint144" |
	//	"uint152" |
	//	"uint160" |
	//	"uint168" |
	//	"uint178" |
	//	"uint184" |
	//	"uint192" |
	//	"uint200" |
	//	"uint208" |
	//	"uint216" |
	//	"uint224" |
	//	"uint232" |
	//	"uint240" |
	//	"uint248" |
	//	"uint256" |
	//	// BYTE
	//	"byte" |
	//	"bytes" |
	//	"bytes1" |
	//	"bytes2" |
	//	"bytes3" |
	//	"bytes4" |
	//	"bytes5" |
	//	"bytes6" |
	//	"bytes7" |
	//	"bytes8" |
	//	"bytes9" |
	//	"bytes10" |
	//	"bytes11" |
	//	"bytes12" |
	//	"bytes13" |
	//	"bytes14" |
	//	"bytes15" |
	//	"bytes16" |
	//	"bytes17" |
	//	"bytes18" |
	//	"bytes19" |
	//	"bytes20" |
	//	"bytes21" |
	//	"bytes22" |
	//	"bytes23" |
	//	"bytes24" |
	//	"bytes25" |
	//	"bytes26" |
	//	"bytes27" |
	//	"bytes28" |
	//	"bytes29" |
	//	"bytes30" |
	//	"bytes31" |
	//	"bytes32" |
	//	// Other
	//	"string" |
	//	"address" |
	//	"bool" |
	//	"real" |
	//	"ureal");
	public ElementaryTypeNameEnumElements getElementaryTypeNameEnumAccess() {
		return pElementaryTypeNameEnum;
	}
	
	public ParserRule getElementaryTypeNameEnumRule() {
		return getElementaryTypeNameEnumAccess().getRule();
	}
	
	//MapLocationLiteral:
	//	"storage";
	public MapLocationLiteralElements getMapLocationLiteralAccess() {
		return pMapLocationLiteral;
	}
	
	public ParserRule getMapLocationLiteralRule() {
		return getMapLocationLiteralAccess().getRule();
	}
	
	//LocationSpecifierEnum:
	//	type=("memory" | MapLocationLiteral | "calldata");
	public LocationSpecifierEnumElements getLocationSpecifierEnumAccess() {
		return pLocationSpecifierEnum;
	}
	
	public ParserRule getLocationSpecifierEnumRule() {
		return getLocationSpecifierEnumAccess().getRule();
	}
	
	//VisibilityEnum:
	//	type=("public" | "internal" | "private" | "external");
	public VisibilityEnumElements getVisibilityEnumAccess() {
		return pVisibilityEnum;
	}
	
	public ParserRule getVisibilityEnumRule() {
		return getVisibilityEnumAccess().getRule();
	}
	
	//enum LogicalOperationLiteral:
	//	NOTEQUAL="!=" |
	//	EQUAL="==" |
	//	AND="&&" |
	//	OR="||" |
	//	GTE=">=" |
	//	LTE="<=" |
	//	GT=">" |
	//	LT="<";
	public LogicalOperationLiteralElements getLogicalOperationLiteralAccess() {
		return eLogicalOperationLiteral;
	}
	
	public EnumRule getLogicalOperationLiteralRule() {
		return getLogicalOperationLiteralAccess().getRule();
	}
	
	//enum AssignmentOpEnum:
	//	ASSIGN="=" |
	//	ASSIGN_OR="|=" |
	//	ASSIGN_XOR="^=" |
	//	ASSIGN_AND="&=" |
	//	ASSIGN_SHIFT_LEFT="<<=" |
	//	ASSIGN_SHIFT_RIGHT=">>=" |
	//	ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" |
	//	ASSIGN_ADD="+=" |
	//	ASSIGN_SUB="-=" |
	//	ASSIGN_MULT="*=" |
	//	ASSIGN_DIV="/=" |
	//	ASSIGN_MOD="%=";
	public AssignmentOpEnumElements getAssignmentOpEnumAccess() {
		return eAssignmentOpEnum;
	}
	
	public EnumRule getAssignmentOpEnumRule() {
		return getAssignmentOpEnumAccess().getRule();
	}
	
	//enum EqualityOpEnum:
	//	EQ="==" |
	//	NOTEQ="!=";
	public EqualityOpEnumElements getEqualityOpEnumAccess() {
		return eEqualityOpEnum;
	}
	
	public EnumRule getEqualityOpEnumRule() {
		return getEqualityOpEnumAccess().getRule();
	}
	
	//enum ComparisonOpEnum:
	//	LT="<" |
	//	GT=">" |
	//	LTE="<=" |
	//	GTE=">=" |
	//	IN="in";
	public ComparisonOpEnumElements getComparisonOpEnumAccess() {
		return eComparisonOpEnum;
	}
	
	public EnumRule getComparisonOpEnumRule() {
		return getComparisonOpEnumAccess().getRule();
	}
	
	//enum ShiftOpEnum:
	//	LEFT_SHIFT="<<" |
	//	RIGHT_SHIFT=">>" |
	//	ARITHMETIC_RIGHT_SHIFT=">>>";
	public ShiftOpEnumElements getShiftOpEnumAccess() {
		return eShiftOpEnum;
	}
	
	public EnumRule getShiftOpEnumRule() {
		return getShiftOpEnumAccess().getRule();
	}
	
	//enum AdditionOpEnum:
	//	ADD="+" |
	//	SUB="-";
	public AdditionOpEnumElements getAdditionOpEnumAccess() {
		return eAdditionOpEnum;
	}
	
	public EnumRule getAdditionOpEnumRule() {
		return getAdditionOpEnumAccess().getRule();
	}
	
	//enum MulDivModOpEnum:
	//	MULT="*" |
	//	DIV="/" |
	//	MOD="%";
	public MulDivModOpEnumElements getMulDivModOpEnumAccess() {
		return eMulDivModOpEnum;
	}
	
	public EnumRule getMulDivModOpEnumRule() {
		return getMulDivModOpEnumAccess().getRule();
	}
	
	//enum IncDecOpEnum:
	//	INC="++" |
	//	DEC="--";
	public IncDecOpEnumElements getIncDecOpEnumAccess() {
		return eIncDecOpEnum;
	}
	
	public EnumRule getIncDecOpEnumRule() {
		return getIncDecOpEnumAccess().getRule();
	}
	
	//enum BooleanLiteralEnum:
	//	TRUE="true" |
	//	FALSE="false";
	public BooleanLiteralEnumElements getBooleanLiteralEnumAccess() {
		return eBooleanLiteralEnum;
	}
	
	public EnumRule getBooleanLiteralEnumRule() {
		return getBooleanLiteralEnumAccess().getRule();
	}
	
	//enum EtherSubDenominationEnum:
	//	WEI="wei" |
	//	SZABO="szabo" |
	//	FINNEY="finney" |
	//	ETHER="ether";
	public EtherSubDenominationEnumElements getEtherSubDenominationEnumAccess() {
		return eEtherSubDenominationEnum;
	}
	
	public EnumRule getEtherSubDenominationEnumRule() {
		return getEtherSubDenominationEnumAccess().getRule();
	}
	
	//enum TimeSubdenominationEnum:
	//	SECONDS="seconds" |
	//	MINUTES="minutes" |
	//	HOURS="hours" |
	//	DAYS="days" |
	//	WEEKS="weeks" |
	//	YEARS="years";
	public TimeSubdenominationEnumElements getTimeSubdenominationEnumAccess() {
		return eTimeSubdenominationEnum;
	}
	
	public EnumRule getTimeSubdenominationEnumRule() {
		return getTimeSubdenominationEnumAccess().getRule();
	}
	
	//// Also "EOS" DAF
	//SpecialVariablesTypeEnum:
	//	name=(BLOCK | MSG | TX);
	public SpecialVariablesTypeEnumElements getSpecialVariablesTypeEnumAccess() {
		return pSpecialVariablesTypeEnum;
	}
	
	public ParserRule getSpecialVariablesTypeEnumRule() {
		return getSpecialVariablesTypeEnumAccess().getRule();
	}
	
	//terminal BLOCK:
	//	"block." ("coinbase" |
	//	"difficulty" |
	//	"gaslimit" |
	//	"number" |
	//	"timestamp");
	public TerminalRule getBLOCKRule() {
		return tBLOCK;
	}
	
	//terminal MSG:
	//	"msg." ("data" |
	//	"gas" |
	//	"sender" |
	//	"sig" |
	//	"value");
	public TerminalRule getMSGRule() {
		return tMSG;
	}
	
	//terminal TX:
	//	"tx." ("gasprice" |
	//	"origin");
	public TerminalRule getTXRule() {
		return tTX;
	}
	
	//enum SpecialExpressionTypeEnum:
	//	SUPER="super" |
	//	THIS="this";
	public SpecialExpressionTypeEnumElements getSpecialExpressionTypeEnumAccess() {
		return eSpecialExpressionTypeEnum;
	}
	
	public EnumRule getSpecialExpressionTypeEnumRule() {
		return getSpecialExpressionTypeEnumAccess().getRule();
	}
	
	//enum ReservedWordsEnum:
	//	AS="as" |
	//	CASE="case" |
	//	CATCH="catch" |
	//	FINAL="final" |
	//	LET="let" |
	//	MATCH="match" |
	//	OF="of" |
	//	RELOCATABLE="relocatable" |
	//	SWITCH="switch" |
	//	TRY="try" |
	//	TYPE="type" |
	//	TYPEOF="typeof" |
	//	USING="using" |
	//	ILLEGAL;
	public ReservedWordsEnumElements getReservedWordsEnumAccess() {
		return eReservedWordsEnum;
	}
	
	public EnumRule getReservedWordsEnumRule() {
		return getReservedWordsEnumAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
