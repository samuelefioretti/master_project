/**
 * generated by Xtext 2.20.0
 */
package org.unicam.myGrammar.optGrammar.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.unicam.myGrammar.optGrammar.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.unicam.myGrammar.optGrammar.OptGrammarPackage
 * @generated
 */
public class OptGrammarAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OptGrammarPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptGrammarAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OptGrammarPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptGrammarSwitch<Adapter> modelSwitch =
    new OptGrammarSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter casePragmaDirective(PragmaDirective object)
      {
        return createPragmaDirectiveAdapter();
      }
      @Override
      public Adapter caseversionOperator(versionOperator object)
      {
        return createversionOperatorAdapter();
      }
      @Override
      public Adapter caseImportDirective(ImportDirective object)
      {
        return createImportDirectiveAdapter();
      }
      @Override
      public Adapter caseSymbolAlias(SymbolAlias object)
      {
        return createSymbolAliasAdapter();
      }
      @Override
      public Adapter caseContract(Contract object)
      {
        return createContractAdapter();
      }
      @Override
      public Adapter caseDefinitionBody(DefinitionBody object)
      {
        return createDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseConstructorDefinition(ConstructorDefinition object)
      {
        return createConstructorDefinitionAdapter();
      }
      @Override
      public Adapter caseInheritanceSpecifier(InheritanceSpecifier object)
      {
        return createInheritanceSpecifierAdapter();
      }
      @Override
      public Adapter caseFunctionCallListArguments(FunctionCallListArguments object)
      {
        return createFunctionCallListArgumentsAdapter();
      }
      @Override
      public Adapter caseFunctionCallArguments(FunctionCallArguments object)
      {
        return createFunctionCallArgumentsAdapter();
      }
      @Override
      public Adapter caseFunctionCallArg(FunctionCallArg object)
      {
        return createFunctionCallArgAdapter();
      }
      @Override
      public Adapter caseFunctionDefinition(FunctionDefinition object)
      {
        return createFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseConst(Const object)
      {
        return createConstAdapter();
      }
      @Override
      public Adapter caseStructDefinition(StructDefinition object)
      {
        return createStructDefinitionAdapter();
      }
      @Override
      public Adapter caseEnumDefinition(EnumDefinition object)
      {
        return createEnumDefinitionAdapter();
      }
      @Override
      public Adapter caseEnumValue(EnumValue object)
      {
        return createEnumValueAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseVariableDeclaration(VariableDeclaration object)
      {
        return createVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseStandardVariableDeclaration(StandardVariableDeclaration object)
      {
        return createStandardVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVarVariableDeclaration(VarVariableDeclaration object)
      {
        return createVarVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVarVariableTupleVariableDeclaration(VarVariableTupleVariableDeclaration object)
      {
        return createVarVariableTupleVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVariableDeclarationOptionalElement(VariableDeclarationOptionalElement object)
      {
        return createVariableDeclarationOptionalElementAdapter();
      }
      @Override
      public Adapter caseVisibilitySpecifier(VisibilitySpecifier object)
      {
        return createVisibilitySpecifierAdapter();
      }
      @Override
      public Adapter caseIndexedSpecifer(IndexedSpecifer object)
      {
        return createIndexedSpeciferAdapter();
      }
      @Override
      public Adapter caseConstantSpecifier(ConstantSpecifier object)
      {
        return createConstantSpecifierAdapter();
      }
      @Override
      public Adapter caseLocationSpecifier(LocationSpecifier object)
      {
        return createLocationSpecifierAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseNamedType(NamedType object)
      {
        return createNamedTypeAdapter();
      }
      @Override
      public Adapter caseStandardType(StandardType object)
      {
        return createStandardTypeAdapter();
      }
      @Override
      public Adapter caseStandardTypeWithoutQualifiedIdentifier(StandardTypeWithoutQualifiedIdentifier object)
      {
        return createStandardTypeWithoutQualifiedIdentifierAdapter();
      }
      @Override
      public Adapter caseArrayType(ArrayType object)
      {
        return createArrayTypeAdapter();
      }
      @Override
      public Adapter caseMapping(Mapping object)
      {
        return createMappingAdapter();
      }
      @Override
      public Adapter caseTuple(Tuple object)
      {
        return createTupleAdapter();
      }
      @Override
      public Adapter caseTupleSeparator(TupleSeparator object)
      {
        return createTupleSeparatorAdapter();
      }
      @Override
      public Adapter caseSimpleStatement(SimpleStatement object)
      {
        return createSimpleStatementAdapter();
      }
      @Override
      public Adapter caseSimpleStatement2(SimpleStatement2 object)
      {
        return createSimpleStatement2Adapter();
      }
      @Override
      public Adapter caseExpressionStatement(ExpressionStatement object)
      {
        return createExpressionStatementAdapter();
      }
      @Override
      public Adapter caseQualifiedIdentifier(QualifiedIdentifier object)
      {
        return createQualifiedIdentifierAdapter();
      }
      @Override
      public Adapter caseQualifier(Qualifier object)
      {
        return createQualifierAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseIndex(Index object)
      {
        return createIndexAdapter();
      }
      @Override
      public Adapter caseArguments(Arguments object)
      {
        return createArgumentsAdapter();
      }
      @Override
      public Adapter caseModifier(Modifier object)
      {
        return createModifierAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseModifierInvocation(ModifierInvocation object)
      {
        return createModifierInvocationAdapter();
      }
      @Override
      public Adapter caseParameterList(ParameterList object)
      {
        return createParameterListAdapter();
      }
      @Override
      public Adapter caseReturnsParameterList(ReturnsParameterList object)
      {
        return createReturnsParameterListAdapter();
      }
      @Override
      public Adapter caseReturnParameterDeclaration(ReturnParameterDeclaration object)
      {
        return createReturnParameterDeclarationAdapter();
      }
      @Override
      public Adapter caseLoopStructures(LoopStructures object)
      {
        return createLoopStructuresAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseDoWhileStatement(DoWhileStatement object)
      {
        return createDoWhileStatementAdapter();
      }
      @Override
      public Adapter caseEmitStatement(EmitStatement object)
      {
        return createEmitStatementAdapter();
      }
      @Override
      public Adapter caseDeleteStatement(DeleteStatement object)
      {
        return createDeleteStatementAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseWhileStatement(WhileStatement object)
      {
        return createWhileStatementAdapter();
      }
      @Override
      public Adapter caseForStatement(ForStatement object)
      {
        return createForStatementAdapter();
      }
      @Override
      public Adapter caseBody(Body object)
      {
        return createBodyAdapter();
      }
      @Override
      public Adapter caseContinueStatement(ContinueStatement object)
      {
        return createContinueStatementAdapter();
      }
      @Override
      public Adapter caseBreakStatement(BreakStatement object)
      {
        return createBreakStatementAdapter();
      }
      @Override
      public Adapter caseReturnStatement(ReturnStatement object)
      {
        return createReturnStatementAdapter();
      }
      @Override
      public Adapter caseThrowStatement(ThrowStatement object)
      {
        return createThrowStatementAdapter();
      }
      @Override
      public Adapter casePlaceHolderStatement(PlaceHolderStatement object)
      {
        return createPlaceHolderStatementAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseSpecialExpression(SpecialExpression object)
      {
        return createSpecialExpressionAdapter();
      }
      @Override
      public Adapter caseNotExpression(NotExpression object)
      {
        return createNotExpressionAdapter();
      }
      @Override
      public Adapter casePreIncExpression(PreIncExpression object)
      {
        return createPreIncExpressionAdapter();
      }
      @Override
      public Adapter casePreDecExpression(PreDecExpression object)
      {
        return createPreDecExpressionAdapter();
      }
      @Override
      public Adapter caseBinaryNotExpression(BinaryNotExpression object)
      {
        return createBinaryNotExpressionAdapter();
      }
      @Override
      public Adapter caseSignExpression(SignExpression object)
      {
        return createSignExpressionAdapter();
      }
      @Override
      public Adapter caseNewExpression(NewExpression object)
      {
        return createNewExpressionAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseArithmeticOperations(ArithmeticOperations object)
      {
        return createArithmeticOperationsAdapter();
      }
      @Override
      public Adapter casePrimaryArithmetic(PrimaryArithmetic object)
      {
        return createPrimaryArithmeticAdapter();
      }
      @Override
      public Adapter caseSecondOperators(SecondOperators object)
      {
        return createSecondOperatorsAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseBlockhashFunction(BlockhashFunction object)
      {
        return createBlockhashFunctionAdapter();
      }
      @Override
      public Adapter caseGasleftFunction(GasleftFunction object)
      {
        return createGasleftFunctionAdapter();
      }
      @Override
      public Adapter caseIntParameter(IntParameter object)
      {
        return createIntParameterAdapter();
      }
      @Override
      public Adapter caseMathematicalFunction(MathematicalFunction object)
      {
        return createMathematicalFunctionAdapter();
      }
      @Override
      public Adapter caseHashFunction(HashFunction object)
      {
        return createHashFunctionAdapter();
      }
      @Override
      public Adapter caseEcrecoverFunction(EcrecoverFunction object)
      {
        return createEcrecoverFunctionAdapter();
      }
      @Override
      public Adapter caseBooleanLiteral(BooleanLiteral object)
      {
        return createBooleanLiteralAdapter();
      }
      @Override
      public Adapter caseNumericLiteral(NumericLiteral object)
      {
        return createNumericLiteralAdapter();
      }
      @Override
      public Adapter caseIntLiteral(IntLiteral object)
      {
        return createIntLiteralAdapter();
      }
      @Override
      public Adapter caseHexLiteral(HexLiteral object)
      {
        return createHexLiteralAdapter();
      }
      @Override
      public Adapter caseDecimalLiteral(DecimalLiteral object)
      {
        return createDecimalLiteralAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseTypeCast(TypeCast object)
      {
        return createTypeCastAdapter();
      }
      @Override
      public Adapter caseUnitTypes(UnitTypes object)
      {
        return createUnitTypesAdapter();
      }
      @Override
      public Adapter caseTimeUnitsLiteral(TimeUnitsLiteral object)
      {
        return createTimeUnitsLiteralAdapter();
      }
      @Override
      public Adapter caseUnitsLiteral(UnitsLiteral object)
      {
        return createUnitsLiteralAdapter();
      }
      @Override
      public Adapter caseSpecialLiteral(SpecialLiteral object)
      {
        return createSpecialLiteralAdapter();
      }
      @Override
      public Adapter caseSizedDeclaration(SizedDeclaration object)
      {
        return createSizedDeclarationAdapter();
      }
      @Override
      public Adapter caseSimpleTypeDeclaration(SimpleTypeDeclaration object)
      {
        return createSimpleTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseLocationLiteral(LocationLiteral object)
      {
        return createLocationLiteralAdapter();
      }
      @Override
      public Adapter caseVisibilityLiteral(VisibilityLiteral object)
      {
        return createVisibilityLiteralAdapter();
      }
      @Override
      public Adapter caseStateMutability(StateMutability object)
      {
        return createStateMutabilityAdapter();
      }
      @Override
      public Adapter caseVarVariableTypeDeclaration(VarVariableTypeDeclaration object)
      {
        return createVarVariableTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseContinue(Continue object)
      {
        return createContinueAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseVariableDeclarationExpression(VariableDeclarationExpression object)
      {
        return createVariableDeclarationExpressionAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter caseBitOr(BitOr object)
      {
        return createBitOrAdapter();
      }
      @Override
      public Adapter caseBitXor(BitXor object)
      {
        return createBitXorAdapter();
      }
      @Override
      public Adapter caseBitAnd(BitAnd object)
      {
        return createBitAndAdapter();
      }
      @Override
      public Adapter caseShift(Shift object)
      {
        return createShiftAdapter();
      }
      @Override
      public Adapter caseAddSub(AddSub object)
      {
        return createAddSubAdapter();
      }
      @Override
      public Adapter caseMulDivMod(MulDivMod object)
      {
        return createMulDivModAdapter();
      }
      @Override
      public Adapter caseExponent(Exponent object)
      {
        return createExponentAdapter();
      }
      @Override
      public Adapter casePostIncDecExpression(PostIncDecExpression object)
      {
        return createPostIncDecExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PragmaDirective <em>Pragma Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PragmaDirective
   * @generated
   */
  public Adapter createPragmaDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.versionOperator <em>version Operator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.versionOperator
   * @generated
   */
  public Adapter createversionOperatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ImportDirective <em>Import Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ImportDirective
   * @generated
   */
  public Adapter createImportDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SymbolAlias <em>Symbol Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SymbolAlias
   * @generated
   */
  public Adapter createSymbolAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Contract <em>Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Contract
   * @generated
   */
  public Adapter createContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.DefinitionBody <em>Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.DefinitionBody
   * @generated
   */
  public Adapter createDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ConstructorDefinition <em>Constructor Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ConstructorDefinition
   * @generated
   */
  public Adapter createConstructorDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.InheritanceSpecifier <em>Inheritance Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.InheritanceSpecifier
   * @generated
   */
  public Adapter createInheritanceSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCallListArguments <em>Function Call List Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCallListArguments
   * @generated
   */
  public Adapter createFunctionCallListArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCallArguments <em>Function Call Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCallArguments
   * @generated
   */
  public Adapter createFunctionCallArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCallArg <em>Function Call Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCallArg
   * @generated
   */
  public Adapter createFunctionCallArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionDefinition <em>Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionDefinition
   * @generated
   */
  public Adapter createFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Const <em>Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Const
   * @generated
   */
  public Adapter createConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StructDefinition <em>Struct Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StructDefinition
   * @generated
   */
  public Adapter createStructDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.EnumDefinition <em>Enum Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.EnumDefinition
   * @generated
   */
  public Adapter createEnumDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.EnumValue <em>Enum Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.EnumValue
   * @generated
   */
  public Adapter createEnumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VariableDeclaration <em>Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VariableDeclaration
   * @generated
   */
  public Adapter createVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StandardVariableDeclaration <em>Standard Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StandardVariableDeclaration
   * @generated
   */
  public Adapter createStandardVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VarVariableDeclaration <em>Var Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VarVariableDeclaration
   * @generated
   */
  public Adapter createVarVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VarVariableTupleVariableDeclaration <em>Var Variable Tuple Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VarVariableTupleVariableDeclaration
   * @generated
   */
  public Adapter createVarVariableTupleVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VariableDeclarationOptionalElement <em>Variable Declaration Optional Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VariableDeclarationOptionalElement
   * @generated
   */
  public Adapter createVariableDeclarationOptionalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VisibilitySpecifier <em>Visibility Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VisibilitySpecifier
   * @generated
   */
  public Adapter createVisibilitySpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IndexedSpecifer <em>Indexed Specifer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IndexedSpecifer
   * @generated
   */
  public Adapter createIndexedSpeciferAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ConstantSpecifier <em>Constant Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ConstantSpecifier
   * @generated
   */
  public Adapter createConstantSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.LocationSpecifier <em>Location Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.LocationSpecifier
   * @generated
   */
  public Adapter createLocationSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NamedType <em>Named Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NamedType
   * @generated
   */
  public Adapter createNamedTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StandardType <em>Standard Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StandardType
   * @generated
   */
  public Adapter createStandardTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StandardTypeWithoutQualifiedIdentifier <em>Standard Type Without Qualified Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StandardTypeWithoutQualifiedIdentifier
   * @generated
   */
  public Adapter createStandardTypeWithoutQualifiedIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayType <em>Array Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayType
   * @generated
   */
  public Adapter createArrayTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Mapping <em>Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Mapping
   * @generated
   */
  public Adapter createMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Tuple <em>Tuple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Tuple
   * @generated
   */
  public Adapter createTupleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.TupleSeparator <em>Tuple Separator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.TupleSeparator
   * @generated
   */
  public Adapter createTupleSeparatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SimpleStatement <em>Simple Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SimpleStatement
   * @generated
   */
  public Adapter createSimpleStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SimpleStatement2 <em>Simple Statement2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SimpleStatement2
   * @generated
   */
  public Adapter createSimpleStatement2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ExpressionStatement <em>Expression Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ExpressionStatement
   * @generated
   */
  public Adapter createExpressionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.QualifiedIdentifier <em>Qualified Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.QualifiedIdentifier
   * @generated
   */
  public Adapter createQualifiedIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Qualifier <em>Qualifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Qualifier
   * @generated
   */
  public Adapter createQualifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Index <em>Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Index
   * @generated
   */
  public Adapter createIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Arguments <em>Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Arguments
   * @generated
   */
  public Adapter createArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Modifier <em>Modifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Modifier
   * @generated
   */
  public Adapter createModifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ModifierInvocation <em>Modifier Invocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ModifierInvocation
   * @generated
   */
  public Adapter createModifierInvocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ParameterList <em>Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ParameterList
   * @generated
   */
  public Adapter createParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ReturnsParameterList <em>Returns Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ReturnsParameterList
   * @generated
   */
  public Adapter createReturnsParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ReturnParameterDeclaration <em>Return Parameter Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ReturnParameterDeclaration
   * @generated
   */
  public Adapter createReturnParameterDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.LoopStructures <em>Loop Structures</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.LoopStructures
   * @generated
   */
  public Adapter createLoopStructuresAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.DoWhileStatement <em>Do While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.DoWhileStatement
   * @generated
   */
  public Adapter createDoWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.EmitStatement <em>Emit Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.EmitStatement
   * @generated
   */
  public Adapter createEmitStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.DeleteStatement <em>Delete Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.DeleteStatement
   * @generated
   */
  public Adapter createDeleteStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.WhileStatement <em>While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.WhileStatement
   * @generated
   */
  public Adapter createWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ForStatement <em>For Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ForStatement
   * @generated
   */
  public Adapter createForStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Body <em>Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Body
   * @generated
   */
  public Adapter createBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ContinueStatement <em>Continue Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ContinueStatement
   * @generated
   */
  public Adapter createContinueStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BreakStatement <em>Break Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BreakStatement
   * @generated
   */
  public Adapter createBreakStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ReturnStatement <em>Return Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ReturnStatement
   * @generated
   */
  public Adapter createReturnStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ThrowStatement <em>Throw Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ThrowStatement
   * @generated
   */
  public Adapter createThrowStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PlaceHolderStatement <em>Place Holder Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PlaceHolderStatement
   * @generated
   */
  public Adapter createPlaceHolderStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SpecialExpression <em>Special Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SpecialExpression
   * @generated
   */
  public Adapter createSpecialExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NotExpression <em>Not Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NotExpression
   * @generated
   */
  public Adapter createNotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PreIncExpression <em>Pre Inc Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PreIncExpression
   * @generated
   */
  public Adapter createPreIncExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PreDecExpression <em>Pre Dec Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PreDecExpression
   * @generated
   */
  public Adapter createPreDecExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BinaryNotExpression <em>Binary Not Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BinaryNotExpression
   * @generated
   */
  public Adapter createBinaryNotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SignExpression <em>Sign Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SignExpression
   * @generated
   */
  public Adapter createSignExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NewExpression <em>New Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NewExpression
   * @generated
   */
  public Adapter createNewExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArithmeticOperations <em>Arithmetic Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArithmeticOperations
   * @generated
   */
  public Adapter createArithmeticOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PrimaryArithmetic <em>Primary Arithmetic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PrimaryArithmetic
   * @generated
   */
  public Adapter createPrimaryArithmeticAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SecondOperators <em>Second Operators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SecondOperators
   * @generated
   */
  public Adapter createSecondOperatorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BlockhashFunction <em>Blockhash Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BlockhashFunction
   * @generated
   */
  public Adapter createBlockhashFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.GasleftFunction <em>Gasleft Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.GasleftFunction
   * @generated
   */
  public Adapter createGasleftFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IntParameter <em>Int Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IntParameter
   * @generated
   */
  public Adapter createIntParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.MathematicalFunction <em>Mathematical Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.MathematicalFunction
   * @generated
   */
  public Adapter createMathematicalFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.HashFunction <em>Hash Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.HashFunction
   * @generated
   */
  public Adapter createHashFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.EcrecoverFunction <em>Ecrecover Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.EcrecoverFunction
   * @generated
   */
  public Adapter createEcrecoverFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BooleanLiteral <em>Boolean Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BooleanLiteral
   * @generated
   */
  public Adapter createBooleanLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NumericLiteral <em>Numeric Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NumericLiteral
   * @generated
   */
  public Adapter createNumericLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IntLiteral <em>Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IntLiteral
   * @generated
   */
  public Adapter createIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.HexLiteral <em>Hex Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.HexLiteral
   * @generated
   */
  public Adapter createHexLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.DecimalLiteral <em>Decimal Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.DecimalLiteral
   * @generated
   */
  public Adapter createDecimalLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.TypeCast <em>Type Cast</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.TypeCast
   * @generated
   */
  public Adapter createTypeCastAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.UnitTypes <em>Unit Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.UnitTypes
   * @generated
   */
  public Adapter createUnitTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.TimeUnitsLiteral <em>Time Units Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.TimeUnitsLiteral
   * @generated
   */
  public Adapter createTimeUnitsLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.UnitsLiteral <em>Units Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.UnitsLiteral
   * @generated
   */
  public Adapter createUnitsLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SpecialLiteral <em>Special Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SpecialLiteral
   * @generated
   */
  public Adapter createSpecialLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SizedDeclaration <em>Sized Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SizedDeclaration
   * @generated
   */
  public Adapter createSizedDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SimpleTypeDeclaration <em>Simple Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SimpleTypeDeclaration
   * @generated
   */
  public Adapter createSimpleTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.LocationLiteral <em>Location Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.LocationLiteral
   * @generated
   */
  public Adapter createLocationLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VisibilityLiteral <em>Visibility Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VisibilityLiteral
   * @generated
   */
  public Adapter createVisibilityLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StateMutability <em>State Mutability</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StateMutability
   * @generated
   */
  public Adapter createStateMutabilityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VarVariableTypeDeclaration <em>Var Variable Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VarVariableTypeDeclaration
   * @generated
   */
  public Adapter createVarVariableTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Continue <em>Continue</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Continue
   * @generated
   */
  public Adapter createContinueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VariableDeclarationExpression <em>Variable Declaration Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VariableDeclarationExpression
   * @generated
   */
  public Adapter createVariableDeclarationExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BitOr <em>Bit Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BitOr
   * @generated
   */
  public Adapter createBitOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BitXor <em>Bit Xor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BitXor
   * @generated
   */
  public Adapter createBitXorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BitAnd <em>Bit And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BitAnd
   * @generated
   */
  public Adapter createBitAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Shift <em>Shift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Shift
   * @generated
   */
  public Adapter createShiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.AddSub <em>Add Sub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.AddSub
   * @generated
   */
  public Adapter createAddSubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.MulDivMod <em>Mul Div Mod</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.MulDivMod
   * @generated
   */
  public Adapter createMulDivModAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Exponent <em>Exponent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Exponent
   * @generated
   */
  public Adapter createExponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PostIncDecExpression <em>Post Inc Dec Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PostIncDecExpression
   * @generated
   */
  public Adapter createPostIncDecExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OptGrammarAdapterFactory
