/**
 * generated by Xtext 2.19.0
 */
package org.unicam.myGrammar.optGrammar.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.unicam.myGrammar.optGrammar.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.unicam.myGrammar.optGrammar.OptGrammarPackage
 * @generated
 */
public class OptGrammarAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static OptGrammarPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptGrammarAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = OptGrammarPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OptGrammarSwitch<Adapter> modelSwitch =
    new OptGrammarSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseContract(Contract object)
      {
        return createContractAdapter();
      }
      @Override
      public Adapter caseDeclaration(Declaration object)
      {
        return createDeclarationAdapter();
      }
      @Override
      public Adapter caseFunctionDeclaration(FunctionDeclaration object)
      {
        return createFunctionDeclarationAdapter();
      }
      @Override
      public Adapter caseStructDeclaration(StructDeclaration object)
      {
        return createStructDeclarationAdapter();
      }
      @Override
      public Adapter caseEnumDefinition(EnumDefinition object)
      {
        return createEnumDefinitionAdapter();
      }
      @Override
      public Adapter caseEnumValue(EnumValue object)
      {
        return createEnumValueAdapter();
      }
      @Override
      public Adapter caseFunctionParameterDeclaration(FunctionParameterDeclaration object)
      {
        return createFunctionParameterDeclarationAdapter();
      }
      @Override
      public Adapter caseArrayDefinitionDeclaration(ArrayDefinitionDeclaration object)
      {
        return createArrayDefinitionDeclarationAdapter();
      }
      @Override
      public Adapter caseFilledArray(FilledArray object)
      {
        return createFilledArrayAdapter();
      }
      @Override
      public Adapter caseValueSets(ValueSets object)
      {
        return createValueSetsAdapter();
      }
      @Override
      public Adapter caseArrayDeclaration(ArrayDeclaration object)
      {
        return createArrayDeclarationAdapter();
      }
      @Override
      public Adapter caseNamedType(NamedType object)
      {
        return createNamedTypeAdapter();
      }
      @Override
      public Adapter caseSimpleTypeDeclaration(SimpleTypeDeclaration object)
      {
        return createSimpleTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseMappingAccess(MappingAccess object)
      {
        return createMappingAccessAdapter();
      }
      @Override
      public Adapter caseArrayAccess(ArrayAccess object)
      {
        return createArrayAccessAdapter();
      }
      @Override
      public Adapter caseArrayIndex(ArrayIndex object)
      {
        return createArrayIndexAdapter();
      }
      @Override
      public Adapter caseFieldAccess(FieldAccess object)
      {
        return createFieldAccessAdapter();
      }
      @Override
      public Adapter caseMappingDeclaration(MappingDeclaration object)
      {
        return createMappingDeclarationAdapter();
      }
      @Override
      public Adapter caseUnnamedMappingDeclaration(UnnamedMappingDeclaration object)
      {
        return createUnnamedMappingDeclarationAdapter();
      }
      @Override
      public Adapter casePrimaryTypeDefinitionDeclaration(PrimaryTypeDefinitionDeclaration object)
      {
        return createPrimaryTypeDefinitionDeclarationAdapter();
      }
      @Override
      public Adapter casePrimaryTypeDeclaration(PrimaryTypeDeclaration object)
      {
        return createPrimaryTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseOperationAssegnationLiteral(OperationAssegnationLiteral object)
      {
        return createOperationAssegnationLiteralAdapter();
      }
      @Override
      public Adapter caseSingleDefinition(SingleDefinition object)
      {
        return createSingleDefinitionAdapter();
      }
      @Override
      public Adapter caseNonArrayableDeclaration(NonArrayableDeclaration object)
      {
        return createNonArrayableDeclarationAdapter();
      }
      @Override
      public Adapter caseArrayableDeclaration(ArrayableDeclaration object)
      {
        return createArrayableDeclarationAdapter();
      }
      @Override
      public Adapter caseConcreteStructureDefinitionDeclaration(ConcreteStructureDefinitionDeclaration object)
      {
        return createConcreteStructureDefinitionDeclarationAdapter();
      }
      @Override
      public Adapter caseConcreteStructDeclaration(ConcreteStructDeclaration object)
      {
        return createConcreteStructDeclarationAdapter();
      }
      @Override
      public Adapter caseStructureFieldValue(StructureFieldValue object)
      {
        return createStructureFieldValueAdapter();
      }
      @Override
      public Adapter caseFunctionDefinition(FunctionDefinition object)
      {
        return createFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseInternalBlock(InternalBlock object)
      {
        return createInternalBlockAdapter();
      }
      @Override
      public Adapter caseArrayDefinition(ArrayDefinition object)
      {
        return createArrayDefinitionAdapter();
      }
      @Override
      public Adapter caseFieldDefinition(FieldDefinition object)
      {
        return createFieldDefinitionAdapter();
      }
      @Override
      public Adapter caseMappingDefinition(MappingDefinition object)
      {
        return createMappingDefinitionAdapter();
      }
      @Override
      public Adapter caseFunctionCallListArguments(FunctionCallListArguments object)
      {
        return createFunctionCallListArgumentsAdapter();
      }
      @Override
      public Adapter caseFunctionCallArguments(FunctionCallArguments object)
      {
        return createFunctionCallArgumentsAdapter();
      }
      @Override
      public Adapter caseFunctionCallArg(FunctionCallArg object)
      {
        return createFunctionCallArgAdapter();
      }
      @Override
      public Adapter caseFunctionDefinitionOptionalElement(FunctionDefinitionOptionalElement object)
      {
        return createFunctionDefinitionOptionalElementAdapter();
      }
      @Override
      public Adapter caseConst(Const object)
      {
        return createConstAdapter();
      }
      @Override
      public Adapter caseVisibilitySpecifier(VisibilitySpecifier object)
      {
        return createVisibilitySpecifierAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseVariableDeclarationOptionalElement(VariableDeclarationOptionalElement object)
      {
        return createVariableDeclarationOptionalElementAdapter();
      }
      @Override
      public Adapter caseIndexedSpecifer(IndexedSpecifer object)
      {
        return createIndexedSpeciferAdapter();
      }
      @Override
      public Adapter caseConstantSpecifier(ConstantSpecifier object)
      {
        return createConstantSpecifierAdapter();
      }
      @Override
      public Adapter caseLocationSpecifier(LocationSpecifier object)
      {
        return createLocationSpecifierAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseStandardType(StandardType object)
      {
        return createStandardTypeAdapter();
      }
      @Override
      public Adapter caseStandardTypeWithoutQualifiedIdentifier(StandardTypeWithoutQualifiedIdentifier object)
      {
        return createStandardTypeWithoutQualifiedIdentifierAdapter();
      }
      @Override
      public Adapter caseElementaryType(ElementaryType object)
      {
        return createElementaryTypeAdapter();
      }
      @Override
      public Adapter caseArrayDimensions(ArrayDimensions object)
      {
        return createArrayDimensionsAdapter();
      }
      @Override
      public Adapter caseTuple(Tuple object)
      {
        return createTupleAdapter();
      }
      @Override
      public Adapter caseTupleSeparator(TupleSeparator object)
      {
        return createTupleSeparatorAdapter();
      }
      @Override
      public Adapter caseSimpleStatement(SimpleStatement object)
      {
        return createSimpleStatementAdapter();
      }
      @Override
      public Adapter caseSimpleStatement2(SimpleStatement2 object)
      {
        return createSimpleStatement2Adapter();
      }
      @Override
      public Adapter caseExpressionStatement(ExpressionStatement object)
      {
        return createExpressionStatementAdapter();
      }
      @Override
      public Adapter caseQualifiedIdentifier(QualifiedIdentifier object)
      {
        return createQualifiedIdentifierAdapter();
      }
      @Override
      public Adapter caseQualifier(Qualifier object)
      {
        return createQualifierAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseIndex(Index object)
      {
        return createIndexAdapter();
      }
      @Override
      public Adapter caseArguments(Arguments object)
      {
        return createArgumentsAdapter();
      }
      @Override
      public Adapter caseReturnsParameterList(ReturnsParameterList object)
      {
        return createReturnsParameterListAdapter();
      }
      @Override
      public Adapter caseReturnParameterDeclaration(ReturnParameterDeclaration object)
      {
        return createReturnParameterDeclarationAdapter();
      }
      @Override
      public Adapter caseLoopStructures(LoopStructures object)
      {
        return createLoopStructuresAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseDeleteStatement(DeleteStatement object)
      {
        return createDeleteStatementAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseWhileStatement(WhileStatement object)
      {
        return createWhileStatementAdapter();
      }
      @Override
      public Adapter caseForStatement(ForStatement object)
      {
        return createForStatementAdapter();
      }
      @Override
      public Adapter caseBody(Body object)
      {
        return createBodyAdapter();
      }
      @Override
      public Adapter caseContinueStatement(ContinueStatement object)
      {
        return createContinueStatementAdapter();
      }
      @Override
      public Adapter caseBreakStatement(BreakStatement object)
      {
        return createBreakStatementAdapter();
      }
      @Override
      public Adapter caseReturnStatement(ReturnStatement object)
      {
        return createReturnStatementAdapter();
      }
      @Override
      public Adapter caseThrowStatement(ThrowStatement object)
      {
        return createThrowStatementAdapter();
      }
      @Override
      public Adapter casePlaceHolderStatement(PlaceHolderStatement object)
      {
        return createPlaceHolderStatementAdapter();
      }
      @Override
      public Adapter caseLogicalOperations(LogicalOperations object)
      {
        return createLogicalOperationsAdapter();
      }
      @Override
      public Adapter caseConditionOperation(ConditionOperation object)
      {
        return createConditionOperationAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseGasleftFunction(GasleftFunction object)
      {
        return createGasleftFunctionAdapter();
      }
      @Override
      public Adapter caseBlockhashFunction(BlockhashFunction object)
      {
        return createBlockhashFunctionAdapter();
      }
      @Override
      public Adapter caseMathematicalFunction(MathematicalFunction object)
      {
        return createMathematicalFunctionAdapter();
      }
      @Override
      public Adapter caseEcrecoverFunction(EcrecoverFunction object)
      {
        return createEcrecoverFunctionAdapter();
      }
      @Override
      public Adapter caseHashFunction(HashFunction object)
      {
        return createHashFunctionAdapter();
      }
      @Override
      public Adapter caseIntParameter(IntParameter object)
      {
        return createIntParameterAdapter();
      }
      @Override
      public Adapter caseFunctionCall(FunctionCall object)
      {
        return createFunctionCallAdapter();
      }
      @Override
      public Adapter caseArithmeticOperations(ArithmeticOperations object)
      {
        return createArithmeticOperationsAdapter();
      }
      @Override
      public Adapter casePrimaryArithmetic(PrimaryArithmetic object)
      {
        return createPrimaryArithmeticAdapter();
      }
      @Override
      public Adapter caseSecondOperators(SecondOperators object)
      {
        return createSecondOperatorsAdapter();
      }
      @Override
      public Adapter caseBooleanConst(BooleanConst object)
      {
        return createBooleanConstAdapter();
      }
      @Override
      public Adapter caseNumericLiteral(NumericLiteral object)
      {
        return createNumericLiteralAdapter();
      }
      @Override
      public Adapter caseNow(Now object)
      {
        return createNowAdapter();
      }
      @Override
      public Adapter caseUnitTypes(UnitTypes object)
      {
        return createUnitTypesAdapter();
      }
      @Override
      public Adapter caseNumberDimensionless(NumberDimensionless object)
      {
        return createNumberDimensionlessAdapter();
      }
      @Override
      public Adapter caseEther(Ether object)
      {
        return createEtherAdapter();
      }
      @Override
      public Adapter caseTime(Time object)
      {
        return createTimeAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseIntLiteral(IntLiteral object)
      {
        return createIntLiteralAdapter();
      }
      @Override
      public Adapter caseHexLiteral(HexLiteral object)
      {
        return createHexLiteralAdapter();
      }
      @Override
      public Adapter caseDecimalLiteral(DecimalLiteral object)
      {
        return createDecimalLiteralAdapter();
      }
      @Override
      public Adapter caseTypeCast(TypeCast object)
      {
        return createTypeCastAdapter();
      }
      @Override
      public Adapter caseSpecialVariables(SpecialVariables object)
      {
        return createSpecialVariablesAdapter();
      }
      @Override
      public Adapter caseElementaryTypeNameEnum(ElementaryTypeNameEnum object)
      {
        return createElementaryTypeNameEnumAdapter();
      }
      @Override
      public Adapter caseLocationSpecifierEnum(LocationSpecifierEnum object)
      {
        return createLocationSpecifierEnumAdapter();
      }
      @Override
      public Adapter caseVisibilityEnum(VisibilityEnum object)
      {
        return createVisibilityEnumAdapter();
      }
      @Override
      public Adapter caseSpecialVariablesTypeEnum(SpecialVariablesTypeEnum object)
      {
        return createSpecialVariablesTypeEnumAdapter();
      }
      @Override
      public Adapter caseStandardVariableDeclaration(StandardVariableDeclaration object)
      {
        return createStandardVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVarVariableTypeDeclaration(VarVariableTypeDeclaration object)
      {
        return createVarVariableTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseVarVariableTupleVariableDeclaration(VarVariableTupleVariableDeclaration object)
      {
        return createVarVariableTupleVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseContinue(Continue object)
      {
        return createContinueAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Contract <em>Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Contract
   * @generated
   */
  public Adapter createContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Declaration <em>Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Declaration
   * @generated
   */
  public Adapter createDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionDeclaration <em>Function Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionDeclaration
   * @generated
   */
  public Adapter createFunctionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StructDeclaration <em>Struct Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StructDeclaration
   * @generated
   */
  public Adapter createStructDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.EnumDefinition <em>Enum Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.EnumDefinition
   * @generated
   */
  public Adapter createEnumDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.EnumValue <em>Enum Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.EnumValue
   * @generated
   */
  public Adapter createEnumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionParameterDeclaration <em>Function Parameter Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionParameterDeclaration
   * @generated
   */
  public Adapter createFunctionParameterDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayDefinitionDeclaration <em>Array Definition Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayDefinitionDeclaration
   * @generated
   */
  public Adapter createArrayDefinitionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FilledArray <em>Filled Array</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FilledArray
   * @generated
   */
  public Adapter createFilledArrayAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ValueSets <em>Value Sets</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ValueSets
   * @generated
   */
  public Adapter createValueSetsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayDeclaration <em>Array Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayDeclaration
   * @generated
   */
  public Adapter createArrayDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NamedType <em>Named Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NamedType
   * @generated
   */
  public Adapter createNamedTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SimpleTypeDeclaration <em>Simple Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SimpleTypeDeclaration
   * @generated
   */
  public Adapter createSimpleTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.MappingAccess <em>Mapping Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.MappingAccess
   * @generated
   */
  public Adapter createMappingAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayAccess <em>Array Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayAccess
   * @generated
   */
  public Adapter createArrayAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayIndex <em>Array Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayIndex
   * @generated
   */
  public Adapter createArrayIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FieldAccess <em>Field Access</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FieldAccess
   * @generated
   */
  public Adapter createFieldAccessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.MappingDeclaration <em>Mapping Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.MappingDeclaration
   * @generated
   */
  public Adapter createMappingDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.UnnamedMappingDeclaration <em>Unnamed Mapping Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.UnnamedMappingDeclaration
   * @generated
   */
  public Adapter createUnnamedMappingDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PrimaryTypeDefinitionDeclaration <em>Primary Type Definition Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PrimaryTypeDefinitionDeclaration
   * @generated
   */
  public Adapter createPrimaryTypeDefinitionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PrimaryTypeDeclaration <em>Primary Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PrimaryTypeDeclaration
   * @generated
   */
  public Adapter createPrimaryTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.OperationAssegnationLiteral <em>Operation Assegnation Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.OperationAssegnationLiteral
   * @generated
   */
  public Adapter createOperationAssegnationLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SingleDefinition <em>Single Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SingleDefinition
   * @generated
   */
  public Adapter createSingleDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NonArrayableDeclaration <em>Non Arrayable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NonArrayableDeclaration
   * @generated
   */
  public Adapter createNonArrayableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayableDeclaration <em>Arrayable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayableDeclaration
   * @generated
   */
  public Adapter createArrayableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ConcreteStructureDefinitionDeclaration <em>Concrete Structure Definition Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ConcreteStructureDefinitionDeclaration
   * @generated
   */
  public Adapter createConcreteStructureDefinitionDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ConcreteStructDeclaration <em>Concrete Struct Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ConcreteStructDeclaration
   * @generated
   */
  public Adapter createConcreteStructDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StructureFieldValue <em>Structure Field Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StructureFieldValue
   * @generated
   */
  public Adapter createStructureFieldValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionDefinition <em>Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionDefinition
   * @generated
   */
  public Adapter createFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.InternalBlock <em>Internal Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.InternalBlock
   * @generated
   */
  public Adapter createInternalBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayDefinition <em>Array Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayDefinition
   * @generated
   */
  public Adapter createArrayDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FieldDefinition <em>Field Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FieldDefinition
   * @generated
   */
  public Adapter createFieldDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.MappingDefinition <em>Mapping Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.MappingDefinition
   * @generated
   */
  public Adapter createMappingDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCallListArguments <em>Function Call List Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCallListArguments
   * @generated
   */
  public Adapter createFunctionCallListArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCallArguments <em>Function Call Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCallArguments
   * @generated
   */
  public Adapter createFunctionCallArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCallArg <em>Function Call Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCallArg
   * @generated
   */
  public Adapter createFunctionCallArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionDefinitionOptionalElement <em>Function Definition Optional Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionDefinitionOptionalElement
   * @generated
   */
  public Adapter createFunctionDefinitionOptionalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Const <em>Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Const
   * @generated
   */
  public Adapter createConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VisibilitySpecifier <em>Visibility Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VisibilitySpecifier
   * @generated
   */
  public Adapter createVisibilitySpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VariableDeclarationOptionalElement <em>Variable Declaration Optional Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VariableDeclarationOptionalElement
   * @generated
   */
  public Adapter createVariableDeclarationOptionalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IndexedSpecifer <em>Indexed Specifer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IndexedSpecifer
   * @generated
   */
  public Adapter createIndexedSpeciferAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ConstantSpecifier <em>Constant Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ConstantSpecifier
   * @generated
   */
  public Adapter createConstantSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.LocationSpecifier <em>Location Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.LocationSpecifier
   * @generated
   */
  public Adapter createLocationSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StandardType <em>Standard Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StandardType
   * @generated
   */
  public Adapter createStandardTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StandardTypeWithoutQualifiedIdentifier <em>Standard Type Without Qualified Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StandardTypeWithoutQualifiedIdentifier
   * @generated
   */
  public Adapter createStandardTypeWithoutQualifiedIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ElementaryType <em>Elementary Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ElementaryType
   * @generated
   */
  public Adapter createElementaryTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArrayDimensions <em>Array Dimensions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArrayDimensions
   * @generated
   */
  public Adapter createArrayDimensionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Tuple <em>Tuple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Tuple
   * @generated
   */
  public Adapter createTupleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.TupleSeparator <em>Tuple Separator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.TupleSeparator
   * @generated
   */
  public Adapter createTupleSeparatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SimpleStatement <em>Simple Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SimpleStatement
   * @generated
   */
  public Adapter createSimpleStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SimpleStatement2 <em>Simple Statement2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SimpleStatement2
   * @generated
   */
  public Adapter createSimpleStatement2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ExpressionStatement <em>Expression Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ExpressionStatement
   * @generated
   */
  public Adapter createExpressionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.QualifiedIdentifier <em>Qualified Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.QualifiedIdentifier
   * @generated
   */
  public Adapter createQualifiedIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Qualifier <em>Qualifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Qualifier
   * @generated
   */
  public Adapter createQualifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Index <em>Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Index
   * @generated
   */
  public Adapter createIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Arguments <em>Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Arguments
   * @generated
   */
  public Adapter createArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ReturnsParameterList <em>Returns Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ReturnsParameterList
   * @generated
   */
  public Adapter createReturnsParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ReturnParameterDeclaration <em>Return Parameter Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ReturnParameterDeclaration
   * @generated
   */
  public Adapter createReturnParameterDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.LoopStructures <em>Loop Structures</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.LoopStructures
   * @generated
   */
  public Adapter createLoopStructuresAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.DeleteStatement <em>Delete Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.DeleteStatement
   * @generated
   */
  public Adapter createDeleteStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.WhileStatement <em>While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.WhileStatement
   * @generated
   */
  public Adapter createWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ForStatement <em>For Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ForStatement
   * @generated
   */
  public Adapter createForStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Body <em>Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Body
   * @generated
   */
  public Adapter createBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ContinueStatement <em>Continue Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ContinueStatement
   * @generated
   */
  public Adapter createContinueStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BreakStatement <em>Break Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BreakStatement
   * @generated
   */
  public Adapter createBreakStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ReturnStatement <em>Return Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ReturnStatement
   * @generated
   */
  public Adapter createReturnStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ThrowStatement <em>Throw Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ThrowStatement
   * @generated
   */
  public Adapter createThrowStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PlaceHolderStatement <em>Place Holder Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PlaceHolderStatement
   * @generated
   */
  public Adapter createPlaceHolderStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.LogicalOperations <em>Logical Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.LogicalOperations
   * @generated
   */
  public Adapter createLogicalOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ConditionOperation <em>Condition Operation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ConditionOperation
   * @generated
   */
  public Adapter createConditionOperationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.GasleftFunction <em>Gasleft Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.GasleftFunction
   * @generated
   */
  public Adapter createGasleftFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BlockhashFunction <em>Blockhash Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BlockhashFunction
   * @generated
   */
  public Adapter createBlockhashFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.MathematicalFunction <em>Mathematical Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.MathematicalFunction
   * @generated
   */
  public Adapter createMathematicalFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.EcrecoverFunction <em>Ecrecover Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.EcrecoverFunction
   * @generated
   */
  public Adapter createEcrecoverFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.HashFunction <em>Hash Function</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.HashFunction
   * @generated
   */
  public Adapter createHashFunctionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IntParameter <em>Int Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IntParameter
   * @generated
   */
  public Adapter createIntParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.FunctionCall <em>Function Call</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.FunctionCall
   * @generated
   */
  public Adapter createFunctionCallAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ArithmeticOperations <em>Arithmetic Operations</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ArithmeticOperations
   * @generated
   */
  public Adapter createArithmeticOperationsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.PrimaryArithmetic <em>Primary Arithmetic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.PrimaryArithmetic
   * @generated
   */
  public Adapter createPrimaryArithmeticAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SecondOperators <em>Second Operators</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SecondOperators
   * @generated
   */
  public Adapter createSecondOperatorsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.BooleanConst <em>Boolean Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.BooleanConst
   * @generated
   */
  public Adapter createBooleanConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NumericLiteral <em>Numeric Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NumericLiteral
   * @generated
   */
  public Adapter createNumericLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Now <em>Now</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Now
   * @generated
   */
  public Adapter createNowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.UnitTypes <em>Unit Types</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.UnitTypes
   * @generated
   */
  public Adapter createUnitTypesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.NumberDimensionless <em>Number Dimensionless</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.NumberDimensionless
   * @generated
   */
  public Adapter createNumberDimensionlessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Ether <em>Ether</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Ether
   * @generated
   */
  public Adapter createEtherAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Time <em>Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Time
   * @generated
   */
  public Adapter createTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.IntLiteral <em>Int Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.IntLiteral
   * @generated
   */
  public Adapter createIntLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.HexLiteral <em>Hex Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.HexLiteral
   * @generated
   */
  public Adapter createHexLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.DecimalLiteral <em>Decimal Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.DecimalLiteral
   * @generated
   */
  public Adapter createDecimalLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.TypeCast <em>Type Cast</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.TypeCast
   * @generated
   */
  public Adapter createTypeCastAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SpecialVariables <em>Special Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SpecialVariables
   * @generated
   */
  public Adapter createSpecialVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.ElementaryTypeNameEnum <em>Elementary Type Name Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.ElementaryTypeNameEnum
   * @generated
   */
  public Adapter createElementaryTypeNameEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.LocationSpecifierEnum <em>Location Specifier Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.LocationSpecifierEnum
   * @generated
   */
  public Adapter createLocationSpecifierEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VisibilityEnum <em>Visibility Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VisibilityEnum
   * @generated
   */
  public Adapter createVisibilityEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.SpecialVariablesTypeEnum <em>Special Variables Type Enum</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.SpecialVariablesTypeEnum
   * @generated
   */
  public Adapter createSpecialVariablesTypeEnumAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.StandardVariableDeclaration <em>Standard Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.StandardVariableDeclaration
   * @generated
   */
  public Adapter createStandardVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VarVariableTypeDeclaration <em>Var Variable Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VarVariableTypeDeclaration
   * @generated
   */
  public Adapter createVarVariableTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.VarVariableTupleVariableDeclaration <em>Var Variable Tuple Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.VarVariableTupleVariableDeclaration
   * @generated
   */
  public Adapter createVarVariableTupleVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.myGrammar.optGrammar.Continue <em>Continue</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.myGrammar.optGrammar.Continue
   * @generated
   */
  public Adapter createContinueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //OptGrammarAdapterFactory
