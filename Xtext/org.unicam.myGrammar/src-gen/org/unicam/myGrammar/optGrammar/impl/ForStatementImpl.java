/**
 * generated by Xtext 2.19.0
 */
package org.unicam.myGrammar.optGrammar.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.unicam.myGrammar.optGrammar.Expression;
import org.unicam.myGrammar.optGrammar.ExpressionStatement;
import org.unicam.myGrammar.optGrammar.ForStatement;
import org.unicam.myGrammar.optGrammar.OptGrammarPackage;
import org.unicam.myGrammar.optGrammar.SimpleStatement2;
import org.unicam.myGrammar.optGrammar.Statement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ForStatementImpl#getInitExpression <em>Init Expression</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ForStatementImpl#getConditionExpression <em>Condition Expression</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ForStatementImpl#getLoopExpression <em>Loop Expression</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ForStatementImpl#getBody <em>Body</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForStatementImpl extends StatementImpl implements ForStatement
{
  /**
   * The cached value of the '{@link #getInitExpression() <em>Init Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitExpression()
   * @generated
   * @ordered
   */
  protected SimpleStatement2 initExpression;

  /**
   * The cached value of the '{@link #getConditionExpression() <em>Condition Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionExpression()
   * @generated
   * @ordered
   */
  protected Expression conditionExpression;

  /**
   * The cached value of the '{@link #getLoopExpression() <em>Loop Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLoopExpression()
   * @generated
   * @ordered
   */
  protected ExpressionStatement loopExpression;

  /**
   * The cached value of the '{@link #getBody() <em>Body</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBody()
   * @generated
   * @ordered
   */
  protected Statement body;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OptGrammarPackage.eINSTANCE.getForStatement();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleStatement2 getInitExpression()
  {
    return initExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitExpression(SimpleStatement2 newInitExpression, NotificationChain msgs)
  {
    SimpleStatement2 oldInitExpression = initExpression;
    initExpression = newInitExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION, oldInitExpression, newInitExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitExpression(SimpleStatement2 newInitExpression)
  {
    if (newInitExpression != initExpression)
    {
      NotificationChain msgs = null;
      if (initExpression != null)
        msgs = ((InternalEObject)initExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION, null, msgs);
      if (newInitExpression != null)
        msgs = ((InternalEObject)newInitExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION, null, msgs);
      msgs = basicSetInitExpression(newInitExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION, newInitExpression, newInitExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getConditionExpression()
  {
    return conditionExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionExpression(Expression newConditionExpression, NotificationChain msgs)
  {
    Expression oldConditionExpression = conditionExpression;
    conditionExpression = newConditionExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION, oldConditionExpression, newConditionExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionExpression(Expression newConditionExpression)
  {
    if (newConditionExpression != conditionExpression)
    {
      NotificationChain msgs = null;
      if (conditionExpression != null)
        msgs = ((InternalEObject)conditionExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION, null, msgs);
      if (newConditionExpression != null)
        msgs = ((InternalEObject)newConditionExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION, null, msgs);
      msgs = basicSetConditionExpression(newConditionExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION, newConditionExpression, newConditionExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionStatement getLoopExpression()
  {
    return loopExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLoopExpression(ExpressionStatement newLoopExpression, NotificationChain msgs)
  {
    ExpressionStatement oldLoopExpression = loopExpression;
    loopExpression = newLoopExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION, oldLoopExpression, newLoopExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLoopExpression(ExpressionStatement newLoopExpression)
  {
    if (newLoopExpression != loopExpression)
    {
      NotificationChain msgs = null;
      if (loopExpression != null)
        msgs = ((InternalEObject)loopExpression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION, null, msgs);
      if (newLoopExpression != null)
        msgs = ((InternalEObject)newLoopExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION, null, msgs);
      msgs = basicSetLoopExpression(newLoopExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION, newLoopExpression, newLoopExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement getBody()
  {
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBody(Statement newBody, NotificationChain msgs)
  {
    Statement oldBody = body;
    body = newBody;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__BODY, oldBody, newBody);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBody(Statement newBody)
  {
    if (newBody != body)
    {
      NotificationChain msgs = null;
      if (body != null)
        msgs = ((InternalEObject)body).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__BODY, null, msgs);
      if (newBody != null)
        msgs = ((InternalEObject)newBody).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.FOR_STATEMENT__BODY, null, msgs);
      msgs = basicSetBody(newBody, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.FOR_STATEMENT__BODY, newBody, newBody));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION:
        return basicSetInitExpression(null, msgs);
      case OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION:
        return basicSetConditionExpression(null, msgs);
      case OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION:
        return basicSetLoopExpression(null, msgs);
      case OptGrammarPackage.FOR_STATEMENT__BODY:
        return basicSetBody(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION:
        return getInitExpression();
      case OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION:
        return getConditionExpression();
      case OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION:
        return getLoopExpression();
      case OptGrammarPackage.FOR_STATEMENT__BODY:
        return getBody();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION:
        setInitExpression((SimpleStatement2)newValue);
        return;
      case OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION:
        setConditionExpression((Expression)newValue);
        return;
      case OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION:
        setLoopExpression((ExpressionStatement)newValue);
        return;
      case OptGrammarPackage.FOR_STATEMENT__BODY:
        setBody((Statement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION:
        setInitExpression((SimpleStatement2)null);
        return;
      case OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION:
        setConditionExpression((Expression)null);
        return;
      case OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION:
        setLoopExpression((ExpressionStatement)null);
        return;
      case OptGrammarPackage.FOR_STATEMENT__BODY:
        setBody((Statement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.FOR_STATEMENT__INIT_EXPRESSION:
        return initExpression != null;
      case OptGrammarPackage.FOR_STATEMENT__CONDITION_EXPRESSION:
        return conditionExpression != null;
      case OptGrammarPackage.FOR_STATEMENT__LOOP_EXPRESSION:
        return loopExpression != null;
      case OptGrammarPackage.FOR_STATEMENT__BODY:
        return body != null;
    }
    return super.eIsSet(featureID);
  }

} //ForStatementImpl
