/**
 * generated by Xtext 2.20.0
 */
package org.unicam.myGrammar.optGrammar.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.unicam.myGrammar.optGrammar.OptGrammarPackage;
import org.unicam.myGrammar.optGrammar.PragmaDirective;
import org.unicam.myGrammar.optGrammar.versionOperator;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Pragma Directive</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.PragmaDirectiveImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.PragmaDirectiveImpl#getVersion <em>Version</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.PragmaDirectiveImpl#getVersionliteral <em>Versionliteral</em>}</li>
 * </ul>
 *
 * @generated
 */
public class PragmaDirectiveImpl extends MinimalEObjectImpl.Container implements PragmaDirective
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getVersion() <em>Version</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersion()
   * @generated
   * @ordered
   */
  protected versionOperator version;

  /**
   * The default value of the '{@link #getVersionliteral() <em>Versionliteral</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersionliteral()
   * @generated
   * @ordered
   */
  protected static final String VERSIONLITERAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVersionliteral() <em>Versionliteral</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVersionliteral()
   * @generated
   * @ordered
   */
  protected String versionliteral = VERSIONLITERAL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected PragmaDirectiveImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OptGrammarPackage.Literals.PRAGMA_DIRECTIVE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.PRAGMA_DIRECTIVE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public versionOperator getVersion()
  {
    return version;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVersion(versionOperator newVersion, NotificationChain msgs)
  {
    versionOperator oldVersion = version;
    version = newVersion;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION, oldVersion, newVersion);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersion(versionOperator newVersion)
  {
    if (newVersion != version)
    {
      NotificationChain msgs = null;
      if (version != null)
        msgs = ((InternalEObject)version).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION, null, msgs);
      if (newVersion != null)
        msgs = ((InternalEObject)newVersion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION, null, msgs);
      msgs = basicSetVersion(newVersion, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION, newVersion, newVersion));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVersionliteral()
  {
    return versionliteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVersionliteral(String newVersionliteral)
  {
    String oldVersionliteral = versionliteral;
    versionliteral = newVersionliteral;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.PRAGMA_DIRECTIVE__VERSIONLITERAL, oldVersionliteral, versionliteral));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION:
        return basicSetVersion(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OptGrammarPackage.PRAGMA_DIRECTIVE__NAME:
        return getName();
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION:
        return getVersion();
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSIONLITERAL:
        return getVersionliteral();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OptGrammarPackage.PRAGMA_DIRECTIVE__NAME:
        setName((String)newValue);
        return;
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION:
        setVersion((versionOperator)newValue);
        return;
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSIONLITERAL:
        setVersionliteral((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.PRAGMA_DIRECTIVE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION:
        setVersion((versionOperator)null);
        return;
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSIONLITERAL:
        setVersionliteral(VERSIONLITERAL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.PRAGMA_DIRECTIVE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSION:
        return version != null;
      case OptGrammarPackage.PRAGMA_DIRECTIVE__VERSIONLITERAL:
        return VERSIONLITERAL_EDEFAULT == null ? versionliteral != null : !VERSIONLITERAL_EDEFAULT.equals(versionliteral);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", versionliteral: ");
    result.append(versionliteral);
    result.append(')');
    return result.toString();
  }

} //PragmaDirectiveImpl
