/**
 * generated by Xtext 2.19.0
 */
package org.unicam.myGrammar.optGrammar.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.unicam.myGrammar.optGrammar.ConditionOperation;
import org.unicam.myGrammar.optGrammar.Literal;
import org.unicam.myGrammar.optGrammar.LogicalOperationLiteral;
import org.unicam.myGrammar.optGrammar.OptGrammarPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Condition Operation</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ConditionOperationImpl#getOperation <em>Operation</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ConditionOperationImpl#getNegateSecond <em>Negate Second</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ConditionOperationImpl#getSeconds <em>Seconds</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConditionOperationImpl extends MinimalEObjectImpl.Container implements ConditionOperation
{
  /**
   * The default value of the '{@link #getOperation() <em>Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperation()
   * @generated
   * @ordered
   */
  protected static final LogicalOperationLiteral OPERATION_EDEFAULT = LogicalOperationLiteral.NOTEQUAL;

  /**
   * The cached value of the '{@link #getOperation() <em>Operation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperation()
   * @generated
   * @ordered
   */
  protected LogicalOperationLiteral operation = OPERATION_EDEFAULT;

  /**
   * The default value of the '{@link #getNegateSecond() <em>Negate Second</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNegateSecond()
   * @generated
   * @ordered
   */
  protected static final String NEGATE_SECOND_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNegateSecond() <em>Negate Second</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNegateSecond()
   * @generated
   * @ordered
   */
  protected String negateSecond = NEGATE_SECOND_EDEFAULT;

  /**
   * The cached value of the '{@link #getSeconds() <em>Seconds</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSeconds()
   * @generated
   * @ordered
   */
  protected Literal seconds;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConditionOperationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OptGrammarPackage.Literals.CONDITION_OPERATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOperationLiteral getOperation()
  {
    return operation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOperation(LogicalOperationLiteral newOperation)
  {
    LogicalOperationLiteral oldOperation = operation;
    operation = newOperation == null ? OPERATION_EDEFAULT : newOperation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONDITION_OPERATION__OPERATION, oldOperation, operation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getNegateSecond()
  {
    return negateSecond;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegateSecond(String newNegateSecond)
  {
    String oldNegateSecond = negateSecond;
    negateSecond = newNegateSecond;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONDITION_OPERATION__NEGATE_SECOND, oldNegateSecond, negateSecond));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal getSeconds()
  {
    return seconds;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSeconds(Literal newSeconds, NotificationChain msgs)
  {
    Literal oldSeconds = seconds;
    seconds = newSeconds;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONDITION_OPERATION__SECONDS, oldSeconds, newSeconds);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSeconds(Literal newSeconds)
  {
    if (newSeconds != seconds)
    {
      NotificationChain msgs = null;
      if (seconds != null)
        msgs = ((InternalEObject)seconds).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.CONDITION_OPERATION__SECONDS, null, msgs);
      if (newSeconds != null)
        msgs = ((InternalEObject)newSeconds).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.CONDITION_OPERATION__SECONDS, null, msgs);
      msgs = basicSetSeconds(newSeconds, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONDITION_OPERATION__SECONDS, newSeconds, newSeconds));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONDITION_OPERATION__SECONDS:
        return basicSetSeconds(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONDITION_OPERATION__OPERATION:
        return getOperation();
      case OptGrammarPackage.CONDITION_OPERATION__NEGATE_SECOND:
        return getNegateSecond();
      case OptGrammarPackage.CONDITION_OPERATION__SECONDS:
        return getSeconds();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONDITION_OPERATION__OPERATION:
        setOperation((LogicalOperationLiteral)newValue);
        return;
      case OptGrammarPackage.CONDITION_OPERATION__NEGATE_SECOND:
        setNegateSecond((String)newValue);
        return;
      case OptGrammarPackage.CONDITION_OPERATION__SECONDS:
        setSeconds((Literal)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONDITION_OPERATION__OPERATION:
        setOperation(OPERATION_EDEFAULT);
        return;
      case OptGrammarPackage.CONDITION_OPERATION__NEGATE_SECOND:
        setNegateSecond(NEGATE_SECOND_EDEFAULT);
        return;
      case OptGrammarPackage.CONDITION_OPERATION__SECONDS:
        setSeconds((Literal)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONDITION_OPERATION__OPERATION:
        return operation != OPERATION_EDEFAULT;
      case OptGrammarPackage.CONDITION_OPERATION__NEGATE_SECOND:
        return NEGATE_SECOND_EDEFAULT == null ? negateSecond != null : !NEGATE_SECOND_EDEFAULT.equals(negateSecond);
      case OptGrammarPackage.CONDITION_OPERATION__SECONDS:
        return seconds != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (operation: ");
    result.append(operation);
    result.append(", negateSecond: ");
    result.append(negateSecond);
    result.append(')');
    return result.toString();
  }

} //ConditionOperationImpl
