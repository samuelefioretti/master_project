/**
 * generated by Xtext 2.19.0
 */
package org.unicam.myGrammar.optGrammar.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.unicam.myGrammar.optGrammar.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OptGrammarFactoryImpl extends EFactoryImpl implements OptGrammarFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OptGrammarFactory init()
  {
    try
    {
      OptGrammarFactory theOptGrammarFactory = (OptGrammarFactory)EPackage.Registry.INSTANCE.getEFactory(OptGrammarPackage.eNS_URI);
      if (theOptGrammarFactory != null)
      {
        return theOptGrammarFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OptGrammarFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptGrammarFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OptGrammarPackage.MODEL: return createModel();
      case OptGrammarPackage.CONTRACT: return createContract();
      case OptGrammarPackage.DECLARATION: return createDeclaration();
      case OptGrammarPackage.FUNCTION_DECLARATION: return createFunctionDeclaration();
      case OptGrammarPackage.STRUCT_DECLARATION: return createStructDeclaration();
      case OptGrammarPackage.ENUM_DEFINITION: return createEnumDefinition();
      case OptGrammarPackage.ENUM_VALUE: return createEnumValue();
      case OptGrammarPackage.FUNCTION_PARAMETER_DECLARATION: return createFunctionParameterDeclaration();
      case OptGrammarPackage.ARRAY_DEFINITION_DECLARATION: return createArrayDefinitionDeclaration();
      case OptGrammarPackage.FILLED_ARRAY: return createFilledArray();
      case OptGrammarPackage.VALUE_SETS: return createValueSets();
      case OptGrammarPackage.ARRAY_DECLARATION: return createArrayDeclaration();
      case OptGrammarPackage.NAMED_TYPE: return createNamedType();
      case OptGrammarPackage.SIMPLE_TYPE_DECLARATION: return createSimpleTypeDeclaration();
      case OptGrammarPackage.MAPPING_ACCESS: return createMappingAccess();
      case OptGrammarPackage.ARRAY_ACCESS: return createArrayAccess();
      case OptGrammarPackage.ARRAY_INDEX: return createArrayIndex();
      case OptGrammarPackage.FIELD_ACCESS: return createFieldAccess();
      case OptGrammarPackage.MAPPING_DECLARATION: return createMappingDeclaration();
      case OptGrammarPackage.UNNAMED_MAPPING_DECLARATION: return createUnnamedMappingDeclaration();
      case OptGrammarPackage.PRIMARY_TYPE_DEFINITION_DECLARATION: return createPrimaryTypeDefinitionDeclaration();
      case OptGrammarPackage.PRIMARY_TYPE_DECLARATION: return createPrimaryTypeDeclaration();
      case OptGrammarPackage.OPERATION_ASSEGNATION_LITERAL: return createOperationAssegnationLiteral();
      case OptGrammarPackage.SINGLE_DEFINITION: return createSingleDefinition();
      case OptGrammarPackage.NON_ARRAYABLE_DECLARATION: return createNonArrayableDeclaration();
      case OptGrammarPackage.ARRAYABLE_DECLARATION: return createArrayableDeclaration();
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION: return createConcreteStructureDefinitionDeclaration();
      case OptGrammarPackage.CONCRETE_STRUCT_DECLARATION: return createConcreteStructDeclaration();
      case OptGrammarPackage.STRUCTURE_FIELD_VALUE: return createStructureFieldValue();
      case OptGrammarPackage.FUNCTION_DEFINITION: return createFunctionDefinition();
      case OptGrammarPackage.INTERNAL_BLOCK: return createInternalBlock();
      case OptGrammarPackage.ARRAY_DEFINITION: return createArrayDefinition();
      case OptGrammarPackage.FIELD_DEFINITION: return createFieldDefinition();
      case OptGrammarPackage.MAPPING_DEFINITION: return createMappingDefinition();
      case OptGrammarPackage.FUNCTION_CALL_LIST_ARGUMENTS: return createFunctionCallListArguments();
      case OptGrammarPackage.FUNCTION_CALL_ARGUMENTS: return createFunctionCallArguments();
      case OptGrammarPackage.FUNCTION_CALL_ARG: return createFunctionCallArg();
      case OptGrammarPackage.FUNCTION_DEFINITION_OPTIONAL_ELEMENT: return createFunctionDefinitionOptionalElement();
      case OptGrammarPackage.CONST: return createConst();
      case OptGrammarPackage.VISIBILITY_SPECIFIER: return createVisibilitySpecifier();
      case OptGrammarPackage.VARIABLE: return createVariable();
      case OptGrammarPackage.VARIABLE_DECLARATION_OPTIONAL_ELEMENT: return createVariableDeclarationOptionalElement();
      case OptGrammarPackage.INDEXED_SPECIFER: return createIndexedSpecifer();
      case OptGrammarPackage.CONSTANT_SPECIFIER: return createConstantSpecifier();
      case OptGrammarPackage.LOCATION_SPECIFIER: return createLocationSpecifier();
      case OptGrammarPackage.TYPE: return createType();
      case OptGrammarPackage.STANDARD_TYPE: return createStandardType();
      case OptGrammarPackage.STANDARD_TYPE_WITHOUT_QUALIFIED_IDENTIFIER: return createStandardTypeWithoutQualifiedIdentifier();
      case OptGrammarPackage.ELEMENTARY_TYPE: return createElementaryType();
      case OptGrammarPackage.ARRAY_DIMENSIONS: return createArrayDimensions();
      case OptGrammarPackage.TUPLE: return createTuple();
      case OptGrammarPackage.TUPLE_SEPARATOR: return createTupleSeparator();
      case OptGrammarPackage.SIMPLE_STATEMENT: return createSimpleStatement();
      case OptGrammarPackage.SIMPLE_STATEMENT2: return createSimpleStatement2();
      case OptGrammarPackage.EXPRESSION_STATEMENT: return createExpressionStatement();
      case OptGrammarPackage.QUALIFIED_IDENTIFIER: return createQualifiedIdentifier();
      case OptGrammarPackage.QUALIFIER: return createQualifier();
      case OptGrammarPackage.FIELD: return createField();
      case OptGrammarPackage.INDEX: return createIndex();
      case OptGrammarPackage.ARGUMENTS: return createArguments();
      case OptGrammarPackage.RETURNS_PARAMETER_LIST: return createReturnsParameterList();
      case OptGrammarPackage.RETURN_PARAMETER_DECLARATION: return createReturnParameterDeclaration();
      case OptGrammarPackage.LOOP_STRUCTURES: return createLoopStructures();
      case OptGrammarPackage.STATEMENT: return createStatement();
      case OptGrammarPackage.DELETE_STATEMENT: return createDeleteStatement();
      case OptGrammarPackage.IF_STATEMENT: return createIfStatement();
      case OptGrammarPackage.WHILE_STATEMENT: return createWhileStatement();
      case OptGrammarPackage.FOR_STATEMENT: return createForStatement();
      case OptGrammarPackage.BODY: return createBody();
      case OptGrammarPackage.CONTINUE_STATEMENT: return createContinueStatement();
      case OptGrammarPackage.BREAK_STATEMENT: return createBreakStatement();
      case OptGrammarPackage.RETURN_STATEMENT: return createReturnStatement();
      case OptGrammarPackage.THROW_STATEMENT: return createThrowStatement();
      case OptGrammarPackage.PLACE_HOLDER_STATEMENT: return createPlaceHolderStatement();
      case OptGrammarPackage.LOGICAL_OPERATIONS: return createLogicalOperations();
      case OptGrammarPackage.CONDITION_OPERATION: return createConditionOperation();
      case OptGrammarPackage.LITERAL: return createLiteral();
      case OptGrammarPackage.GASLEFT_FUNCTION: return createGasleftFunction();
      case OptGrammarPackage.BLOCKHASH_FUNCTION: return createBlockhashFunction();
      case OptGrammarPackage.MATHEMATICAL_FUNCTION: return createMathematicalFunction();
      case OptGrammarPackage.ECRECOVER_FUNCTION: return createEcrecoverFunction();
      case OptGrammarPackage.HASH_FUNCTION: return createHashFunction();
      case OptGrammarPackage.INT_PARAMETER: return createIntParameter();
      case OptGrammarPackage.FUNCTION_CALL: return createFunctionCall();
      case OptGrammarPackage.ARITHMETIC_OPERATIONS: return createArithmeticOperations();
      case OptGrammarPackage.PRIMARY_ARITHMETIC: return createPrimaryArithmetic();
      case OptGrammarPackage.SECOND_OPERATORS: return createSecondOperators();
      case OptGrammarPackage.BOOLEAN_CONST: return createBooleanConst();
      case OptGrammarPackage.NUMERIC_LITERAL: return createNumericLiteral();
      case OptGrammarPackage.NOW: return createNow();
      case OptGrammarPackage.UNIT_TYPES: return createUnitTypes();
      case OptGrammarPackage.NUMBER_DIMENSIONLESS: return createNumberDimensionless();
      case OptGrammarPackage.ETHER: return createEther();
      case OptGrammarPackage.TIME: return createTime();
      case OptGrammarPackage.STRING_LITERAL: return createStringLiteral();
      case OptGrammarPackage.INT_LITERAL: return createIntLiteral();
      case OptGrammarPackage.HEX_LITERAL: return createHexLiteral();
      case OptGrammarPackage.DECIMAL_LITERAL: return createDecimalLiteral();
      case OptGrammarPackage.TYPE_CAST: return createTypeCast();
      case OptGrammarPackage.SPECIAL_VARIABLES: return createSpecialVariables();
      case OptGrammarPackage.ELEMENTARY_TYPE_NAME_ENUM: return createElementaryTypeNameEnum();
      case OptGrammarPackage.LOCATION_SPECIFIER_ENUM: return createLocationSpecifierEnum();
      case OptGrammarPackage.VISIBILITY_ENUM: return createVisibilityEnum();
      case OptGrammarPackage.SPECIAL_VARIABLES_TYPE_ENUM: return createSpecialVariablesTypeEnum();
      case OptGrammarPackage.STANDARD_VARIABLE_DECLARATION: return createStandardVariableDeclaration();
      case OptGrammarPackage.VAR_VARIABLE_TYPE_DECLARATION: return createVarVariableTypeDeclaration();
      case OptGrammarPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION: return createVarVariableTupleVariableDeclaration();
      case OptGrammarPackage.CONTINUE: return createContinue();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OptGrammarPackage.LOGICAL_OPERATION_LITERAL:
        return createLogicalOperationLiteralFromString(eDataType, initialValue);
      case OptGrammarPackage.ASSIGNMENT_OP_ENUM:
        return createAssignmentOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.EQUALITY_OP_ENUM:
        return createEqualityOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.COMPARISON_OP_ENUM:
        return createComparisonOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.SHIFT_OP_ENUM:
        return createShiftOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.ADDITION_OP_ENUM:
        return createAdditionOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.MUL_DIV_MOD_OP_ENUM:
        return createMulDivModOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.INC_DEC_OP_ENUM:
        return createIncDecOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.BOOLEAN_LITERAL_ENUM:
        return createBooleanLiteralEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.ETHER_SUB_DENOMINATION_ENUM:
        return createEtherSubDenominationEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.TIME_SUBDENOMINATION_ENUM:
        return createTimeSubdenominationEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.SPECIAL_EXPRESSION_TYPE_ENUM:
        return createSpecialExpressionTypeEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.RESERVED_WORDS_ENUM:
        return createReservedWordsEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OptGrammarPackage.LOGICAL_OPERATION_LITERAL:
        return convertLogicalOperationLiteralToString(eDataType, instanceValue);
      case OptGrammarPackage.ASSIGNMENT_OP_ENUM:
        return convertAssignmentOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.EQUALITY_OP_ENUM:
        return convertEqualityOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.COMPARISON_OP_ENUM:
        return convertComparisonOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.SHIFT_OP_ENUM:
        return convertShiftOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.ADDITION_OP_ENUM:
        return convertAdditionOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.MUL_DIV_MOD_OP_ENUM:
        return convertMulDivModOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.INC_DEC_OP_ENUM:
        return convertIncDecOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.BOOLEAN_LITERAL_ENUM:
        return convertBooleanLiteralEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.ETHER_SUB_DENOMINATION_ENUM:
        return convertEtherSubDenominationEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.TIME_SUBDENOMINATION_ENUM:
        return convertTimeSubdenominationEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.SPECIAL_EXPRESSION_TYPE_ENUM:
        return convertSpecialExpressionTypeEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.RESERVED_WORDS_ENUM:
        return convertReservedWordsEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Declaration createDeclaration()
  {
    DeclarationImpl declaration = new DeclarationImpl();
    return declaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDeclaration createFunctionDeclaration()
  {
    FunctionDeclarationImpl functionDeclaration = new FunctionDeclarationImpl();
    return functionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StructDeclaration createStructDeclaration()
  {
    StructDeclarationImpl structDeclaration = new StructDeclarationImpl();
    return structDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumDefinition createEnumDefinition()
  {
    EnumDefinitionImpl enumDefinition = new EnumDefinitionImpl();
    return enumDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumValue createEnumValue()
  {
    EnumValueImpl enumValue = new EnumValueImpl();
    return enumValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionParameterDeclaration createFunctionParameterDeclaration()
  {
    FunctionParameterDeclarationImpl functionParameterDeclaration = new FunctionParameterDeclarationImpl();
    return functionParameterDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayDefinitionDeclaration createArrayDefinitionDeclaration()
  {
    ArrayDefinitionDeclarationImpl arrayDefinitionDeclaration = new ArrayDefinitionDeclarationImpl();
    return arrayDefinitionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FilledArray createFilledArray()
  {
    FilledArrayImpl filledArray = new FilledArrayImpl();
    return filledArray;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ValueSets createValueSets()
  {
    ValueSetsImpl valueSets = new ValueSetsImpl();
    return valueSets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayDeclaration createArrayDeclaration()
  {
    ArrayDeclarationImpl arrayDeclaration = new ArrayDeclarationImpl();
    return arrayDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NamedType createNamedType()
  {
    NamedTypeImpl namedType = new NamedTypeImpl();
    return namedType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleTypeDeclaration createSimpleTypeDeclaration()
  {
    SimpleTypeDeclarationImpl simpleTypeDeclaration = new SimpleTypeDeclarationImpl();
    return simpleTypeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingAccess createMappingAccess()
  {
    MappingAccessImpl mappingAccess = new MappingAccessImpl();
    return mappingAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayAccess createArrayAccess()
  {
    ArrayAccessImpl arrayAccess = new ArrayAccessImpl();
    return arrayAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayIndex createArrayIndex()
  {
    ArrayIndexImpl arrayIndex = new ArrayIndexImpl();
    return arrayIndex;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldAccess createFieldAccess()
  {
    FieldAccessImpl fieldAccess = new FieldAccessImpl();
    return fieldAccess;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingDeclaration createMappingDeclaration()
  {
    MappingDeclarationImpl mappingDeclaration = new MappingDeclarationImpl();
    return mappingDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnnamedMappingDeclaration createUnnamedMappingDeclaration()
  {
    UnnamedMappingDeclarationImpl unnamedMappingDeclaration = new UnnamedMappingDeclarationImpl();
    return unnamedMappingDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryTypeDefinitionDeclaration createPrimaryTypeDefinitionDeclaration()
  {
    PrimaryTypeDefinitionDeclarationImpl primaryTypeDefinitionDeclaration = new PrimaryTypeDefinitionDeclarationImpl();
    return primaryTypeDefinitionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryTypeDeclaration createPrimaryTypeDeclaration()
  {
    PrimaryTypeDeclarationImpl primaryTypeDeclaration = new PrimaryTypeDeclarationImpl();
    return primaryTypeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OperationAssegnationLiteral createOperationAssegnationLiteral()
  {
    OperationAssegnationLiteralImpl operationAssegnationLiteral = new OperationAssegnationLiteralImpl();
    return operationAssegnationLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SingleDefinition createSingleDefinition()
  {
    SingleDefinitionImpl singleDefinition = new SingleDefinitionImpl();
    return singleDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NonArrayableDeclaration createNonArrayableDeclaration()
  {
    NonArrayableDeclarationImpl nonArrayableDeclaration = new NonArrayableDeclarationImpl();
    return nonArrayableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayableDeclaration createArrayableDeclaration()
  {
    ArrayableDeclarationImpl arrayableDeclaration = new ArrayableDeclarationImpl();
    return arrayableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConcreteStructureDefinitionDeclaration createConcreteStructureDefinitionDeclaration()
  {
    ConcreteStructureDefinitionDeclarationImpl concreteStructureDefinitionDeclaration = new ConcreteStructureDefinitionDeclarationImpl();
    return concreteStructureDefinitionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConcreteStructDeclaration createConcreteStructDeclaration()
  {
    ConcreteStructDeclarationImpl concreteStructDeclaration = new ConcreteStructDeclarationImpl();
    return concreteStructDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StructureFieldValue createStructureFieldValue()
  {
    StructureFieldValueImpl structureFieldValue = new StructureFieldValueImpl();
    return structureFieldValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDefinition createFunctionDefinition()
  {
    FunctionDefinitionImpl functionDefinition = new FunctionDefinitionImpl();
    return functionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InternalBlock createInternalBlock()
  {
    InternalBlockImpl internalBlock = new InternalBlockImpl();
    return internalBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayDefinition createArrayDefinition()
  {
    ArrayDefinitionImpl arrayDefinition = new ArrayDefinitionImpl();
    return arrayDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FieldDefinition createFieldDefinition()
  {
    FieldDefinitionImpl fieldDefinition = new FieldDefinitionImpl();
    return fieldDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MappingDefinition createMappingDefinition()
  {
    MappingDefinitionImpl mappingDefinition = new MappingDefinitionImpl();
    return mappingDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallListArguments createFunctionCallListArguments()
  {
    FunctionCallListArgumentsImpl functionCallListArguments = new FunctionCallListArgumentsImpl();
    return functionCallListArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallArguments createFunctionCallArguments()
  {
    FunctionCallArgumentsImpl functionCallArguments = new FunctionCallArgumentsImpl();
    return functionCallArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallArg createFunctionCallArg()
  {
    FunctionCallArgImpl functionCallArg = new FunctionCallArgImpl();
    return functionCallArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDefinitionOptionalElement createFunctionDefinitionOptionalElement()
  {
    FunctionDefinitionOptionalElementImpl functionDefinitionOptionalElement = new FunctionDefinitionOptionalElementImpl();
    return functionDefinitionOptionalElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Const createConst()
  {
    ConstImpl const_ = new ConstImpl();
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VisibilitySpecifier createVisibilitySpecifier()
  {
    VisibilitySpecifierImpl visibilitySpecifier = new VisibilitySpecifierImpl();
    return visibilitySpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclarationOptionalElement createVariableDeclarationOptionalElement()
  {
    VariableDeclarationOptionalElementImpl variableDeclarationOptionalElement = new VariableDeclarationOptionalElementImpl();
    return variableDeclarationOptionalElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexedSpecifer createIndexedSpecifer()
  {
    IndexedSpeciferImpl indexedSpecifer = new IndexedSpeciferImpl();
    return indexedSpecifer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantSpecifier createConstantSpecifier()
  {
    ConstantSpecifierImpl constantSpecifier = new ConstantSpecifierImpl();
    return constantSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationSpecifier createLocationSpecifier()
  {
    LocationSpecifierImpl locationSpecifier = new LocationSpecifierImpl();
    return locationSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardType createStandardType()
  {
    StandardTypeImpl standardType = new StandardTypeImpl();
    return standardType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardTypeWithoutQualifiedIdentifier createStandardTypeWithoutQualifiedIdentifier()
  {
    StandardTypeWithoutQualifiedIdentifierImpl standardTypeWithoutQualifiedIdentifier = new StandardTypeWithoutQualifiedIdentifierImpl();
    return standardTypeWithoutQualifiedIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementaryType createElementaryType()
  {
    ElementaryTypeImpl elementaryType = new ElementaryTypeImpl();
    return elementaryType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayDimensions createArrayDimensions()
  {
    ArrayDimensionsImpl arrayDimensions = new ArrayDimensionsImpl();
    return arrayDimensions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tuple createTuple()
  {
    TupleImpl tuple = new TupleImpl();
    return tuple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleSeparator createTupleSeparator()
  {
    TupleSeparatorImpl tupleSeparator = new TupleSeparatorImpl();
    return tupleSeparator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleStatement createSimpleStatement()
  {
    SimpleStatementImpl simpleStatement = new SimpleStatementImpl();
    return simpleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleStatement2 createSimpleStatement2()
  {
    SimpleStatement2Impl simpleStatement2 = new SimpleStatement2Impl();
    return simpleStatement2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionStatement createExpressionStatement()
  {
    ExpressionStatementImpl expressionStatement = new ExpressionStatementImpl();
    return expressionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QualifiedIdentifier createQualifiedIdentifier()
  {
    QualifiedIdentifierImpl qualifiedIdentifier = new QualifiedIdentifierImpl();
    return qualifiedIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Qualifier createQualifier()
  {
    QualifierImpl qualifier = new QualifierImpl();
    return qualifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Index createIndex()
  {
    IndexImpl index = new IndexImpl();
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arguments createArguments()
  {
    ArgumentsImpl arguments = new ArgumentsImpl();
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnsParameterList createReturnsParameterList()
  {
    ReturnsParameterListImpl returnsParameterList = new ReturnsParameterListImpl();
    return returnsParameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnParameterDeclaration createReturnParameterDeclaration()
  {
    ReturnParameterDeclarationImpl returnParameterDeclaration = new ReturnParameterDeclarationImpl();
    return returnParameterDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopStructures createLoopStructures()
  {
    LoopStructuresImpl loopStructures = new LoopStructuresImpl();
    return loopStructures;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteStatement createDeleteStatement()
  {
    DeleteStatementImpl deleteStatement = new DeleteStatementImpl();
    return deleteStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileStatement createWhileStatement()
  {
    WhileStatementImpl whileStatement = new WhileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContinueStatement createContinueStatement()
  {
    ContinueStatementImpl continueStatement = new ContinueStatementImpl();
    return continueStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BreakStatement createBreakStatement()
  {
    BreakStatementImpl breakStatement = new BreakStatementImpl();
    return breakStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThrowStatement createThrowStatement()
  {
    ThrowStatementImpl throwStatement = new ThrowStatementImpl();
    return throwStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlaceHolderStatement createPlaceHolderStatement()
  {
    PlaceHolderStatementImpl placeHolderStatement = new PlaceHolderStatementImpl();
    return placeHolderStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LogicalOperations createLogicalOperations()
  {
    LogicalOperationsImpl logicalOperations = new LogicalOperationsImpl();
    return logicalOperations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionOperation createConditionOperation()
  {
    ConditionOperationImpl conditionOperation = new ConditionOperationImpl();
    return conditionOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GasleftFunction createGasleftFunction()
  {
    GasleftFunctionImpl gasleftFunction = new GasleftFunctionImpl();
    return gasleftFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BlockhashFunction createBlockhashFunction()
  {
    BlockhashFunctionImpl blockhashFunction = new BlockhashFunctionImpl();
    return blockhashFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MathematicalFunction createMathematicalFunction()
  {
    MathematicalFunctionImpl mathematicalFunction = new MathematicalFunctionImpl();
    return mathematicalFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EcrecoverFunction createEcrecoverFunction()
  {
    EcrecoverFunctionImpl ecrecoverFunction = new EcrecoverFunctionImpl();
    return ecrecoverFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HashFunction createHashFunction()
  {
    HashFunctionImpl hashFunction = new HashFunctionImpl();
    return hashFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntParameter createIntParameter()
  {
    IntParameterImpl intParameter = new IntParameterImpl();
    return intParameter;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCall createFunctionCall()
  {
    FunctionCallImpl functionCall = new FunctionCallImpl();
    return functionCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArithmeticOperations createArithmeticOperations()
  {
    ArithmeticOperationsImpl arithmeticOperations = new ArithmeticOperationsImpl();
    return arithmeticOperations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryArithmetic createPrimaryArithmetic()
  {
    PrimaryArithmeticImpl primaryArithmetic = new PrimaryArithmeticImpl();
    return primaryArithmetic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SecondOperators createSecondOperators()
  {
    SecondOperatorsImpl secondOperators = new SecondOperatorsImpl();
    return secondOperators;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanConst createBooleanConst()
  {
    BooleanConstImpl booleanConst = new BooleanConstImpl();
    return booleanConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericLiteral createNumericLiteral()
  {
    NumericLiteralImpl numericLiteral = new NumericLiteralImpl();
    return numericLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Now createNow()
  {
    NowImpl now = new NowImpl();
    return now;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitTypes createUnitTypes()
  {
    UnitTypesImpl unitTypes = new UnitTypesImpl();
    return unitTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumberDimensionless createNumberDimensionless()
  {
    NumberDimensionlessImpl numberDimensionless = new NumberDimensionlessImpl();
    return numberDimensionless;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Ether createEther()
  {
    EtherImpl ether = new EtherImpl();
    return ether;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time createTime()
  {
    TimeImpl time = new TimeImpl();
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HexLiteral createHexLiteral()
  {
    HexLiteralImpl hexLiteral = new HexLiteralImpl();
    return hexLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecimalLiteral createDecimalLiteral()
  {
    DecimalLiteralImpl decimalLiteral = new DecimalLiteralImpl();
    return decimalLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeCast createTypeCast()
  {
    TypeCastImpl typeCast = new TypeCastImpl();
    return typeCast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialVariables createSpecialVariables()
  {
    SpecialVariablesImpl specialVariables = new SpecialVariablesImpl();
    return specialVariables;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementaryTypeNameEnum createElementaryTypeNameEnum()
  {
    ElementaryTypeNameEnumImpl elementaryTypeNameEnum = new ElementaryTypeNameEnumImpl();
    return elementaryTypeNameEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationSpecifierEnum createLocationSpecifierEnum()
  {
    LocationSpecifierEnumImpl locationSpecifierEnum = new LocationSpecifierEnumImpl();
    return locationSpecifierEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VisibilityEnum createVisibilityEnum()
  {
    VisibilityEnumImpl visibilityEnum = new VisibilityEnumImpl();
    return visibilityEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialVariablesTypeEnum createSpecialVariablesTypeEnum()
  {
    SpecialVariablesTypeEnumImpl specialVariablesTypeEnum = new SpecialVariablesTypeEnumImpl();
    return specialVariablesTypeEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardVariableDeclaration createStandardVariableDeclaration()
  {
    StandardVariableDeclarationImpl standardVariableDeclaration = new StandardVariableDeclarationImpl();
    return standardVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarVariableTypeDeclaration createVarVariableTypeDeclaration()
  {
    VarVariableTypeDeclarationImpl varVariableTypeDeclaration = new VarVariableTypeDeclarationImpl();
    return varVariableTypeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarVariableTupleVariableDeclaration createVarVariableTupleVariableDeclaration()
  {
    VarVariableTupleVariableDeclarationImpl varVariableTupleVariableDeclaration = new VarVariableTupleVariableDeclarationImpl();
    return varVariableTupleVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Continue createContinue()
  {
    ContinueImpl continue_ = new ContinueImpl();
    return continue_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicalOperationLiteral createLogicalOperationLiteralFromString(EDataType eDataType, String initialValue)
  {
    LogicalOperationLiteral result = LogicalOperationLiteral.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertLogicalOperationLiteralToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentOpEnum createAssignmentOpEnumFromString(EDataType eDataType, String initialValue)
  {
    AssignmentOpEnum result = AssignmentOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAssignmentOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EqualityOpEnum createEqualityOpEnumFromString(EDataType eDataType, String initialValue)
  {
    EqualityOpEnum result = EqualityOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEqualityOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparisonOpEnum createComparisonOpEnumFromString(EDataType eDataType, String initialValue)
  {
    ComparisonOpEnum result = ComparisonOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparisonOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShiftOpEnum createShiftOpEnumFromString(EDataType eDataType, String initialValue)
  {
    ShiftOpEnum result = ShiftOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertShiftOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AdditionOpEnum createAdditionOpEnumFromString(EDataType eDataType, String initialValue)
  {
    AdditionOpEnum result = AdditionOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAdditionOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MulDivModOpEnum createMulDivModOpEnumFromString(EDataType eDataType, String initialValue)
  {
    MulDivModOpEnum result = MulDivModOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMulDivModOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IncDecOpEnum createIncDecOpEnumFromString(EDataType eDataType, String initialValue)
  {
    IncDecOpEnum result = IncDecOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIncDecOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanLiteralEnum createBooleanLiteralEnumFromString(EDataType eDataType, String initialValue)
  {
    BooleanLiteralEnum result = BooleanLiteralEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanLiteralEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EtherSubDenominationEnum createEtherSubDenominationEnumFromString(EDataType eDataType, String initialValue)
  {
    EtherSubDenominationEnum result = EtherSubDenominationEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEtherSubDenominationEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimeSubdenominationEnum createTimeSubdenominationEnumFromString(EDataType eDataType, String initialValue)
  {
    TimeSubdenominationEnum result = TimeSubdenominationEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTimeSubdenominationEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecialExpressionTypeEnum createSpecialExpressionTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    SpecialExpressionTypeEnum result = SpecialExpressionTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSpecialExpressionTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReservedWordsEnum createReservedWordsEnumFromString(EDataType eDataType, String initialValue)
  {
    ReservedWordsEnum result = ReservedWordsEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertReservedWordsEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OptGrammarPackage getOptGrammarPackage()
  {
    return (OptGrammarPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OptGrammarPackage getPackage()
  {
    return OptGrammarPackage.eINSTANCE;
  }

} //OptGrammarFactoryImpl
