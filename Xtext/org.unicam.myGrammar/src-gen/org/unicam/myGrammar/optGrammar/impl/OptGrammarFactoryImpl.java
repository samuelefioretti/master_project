/**
 * generated by Xtext 2.20.0
 */
package org.unicam.myGrammar.optGrammar.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.unicam.myGrammar.optGrammar.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class OptGrammarFactoryImpl extends EFactoryImpl implements OptGrammarFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static OptGrammarFactory init()
  {
    try
    {
      OptGrammarFactory theOptGrammarFactory = (OptGrammarFactory)EPackage.Registry.INSTANCE.getEFactory(OptGrammarPackage.eNS_URI);
      if (theOptGrammarFactory != null)
      {
        return theOptGrammarFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new OptGrammarFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptGrammarFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case OptGrammarPackage.MODEL: return createModel();
      case OptGrammarPackage.CONTRACT: return createContract();
      case OptGrammarPackage.DEFINITION_BODY: return createDefinitionBody();
      case OptGrammarPackage.INHERITANCE_SPECIFIER: return createInheritanceSpecifier();
      case OptGrammarPackage.FUNCTION_CALL_LIST_ARGUMENTS: return createFunctionCallListArguments();
      case OptGrammarPackage.FUNCTION_CALL_ARGUMENTS: return createFunctionCallArguments();
      case OptGrammarPackage.FUNCTION_CALL_ARG: return createFunctionCallArg();
      case OptGrammarPackage.FUNCTION_DEFINITION: return createFunctionDefinition();
      case OptGrammarPackage.FUNCTION_DEFINITION_OPTIONAL_ELEMENT: return createFunctionDefinitionOptionalElement();
      case OptGrammarPackage.CONST: return createConst();
      case OptGrammarPackage.VISIBILITY_SPECIFIER: return createVisibilitySpecifier();
      case OptGrammarPackage.STRUCT_DEFINITION: return createStructDefinition();
      case OptGrammarPackage.ENUM_DEFINITION: return createEnumDefinition();
      case OptGrammarPackage.ENUM_VALUE: return createEnumValue();
      case OptGrammarPackage.VARIABLE: return createVariable();
      case OptGrammarPackage.STATEMENT: return createStatement();
      case OptGrammarPackage.STANDARD_VARIABLE_DECLARATION: return createStandardVariableDeclaration();
      case OptGrammarPackage.VAR_VARIABLE_DECLARATION: return createVarVariableDeclaration();
      case OptGrammarPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION: return createVarVariableTupleVariableDeclaration();
      case OptGrammarPackage.VARIABLE_DECLARATION_OPTIONAL_ELEMENT: return createVariableDeclarationOptionalElement();
      case OptGrammarPackage.INDEXED_SPECIFER: return createIndexedSpecifer();
      case OptGrammarPackage.CONSTANT_SPECIFIER: return createConstantSpecifier();
      case OptGrammarPackage.LOCATION_SPECIFIER: return createLocationSpecifier();
      case OptGrammarPackage.TYPE: return createType();
      case OptGrammarPackage.STANDARD_TYPE: return createStandardType();
      case OptGrammarPackage.STANDARD_TYPE_WITHOUT_QUALIFIED_IDENTIFIER: return createStandardTypeWithoutQualifiedIdentifier();
      case OptGrammarPackage.ELEMENTARY_TYPE: return createElementaryType();
      case OptGrammarPackage.MAPPING: return createMapping();
      case OptGrammarPackage.ARRAY_DIMENSIONS: return createArrayDimensions();
      case OptGrammarPackage.TUPLE: return createTuple();
      case OptGrammarPackage.TUPLE_SEPARATOR: return createTupleSeparator();
      case OptGrammarPackage.SIMPLE_STATEMENT: return createSimpleStatement();
      case OptGrammarPackage.SIMPLE_STATEMENT2: return createSimpleStatement2();
      case OptGrammarPackage.EXPRESSION_STATEMENT: return createExpressionStatement();
      case OptGrammarPackage.QUALIFIED_IDENTIFIER: return createQualifiedIdentifier();
      case OptGrammarPackage.QUALIFIER: return createQualifier();
      case OptGrammarPackage.FIELD: return createField();
      case OptGrammarPackage.INDEX: return createIndex();
      case OptGrammarPackage.ARGUMENTS: return createArguments();
      case OptGrammarPackage.MODIFIER: return createModifier();
      case OptGrammarPackage.EVENT: return createEvent();
      case OptGrammarPackage.MODIFIER_INVOCATION: return createModifierInvocation();
      case OptGrammarPackage.PARAMETER_LIST: return createParameterList();
      case OptGrammarPackage.RETURNS_PARAMETER_LIST: return createReturnsParameterList();
      case OptGrammarPackage.RETURN_PARAMETER_DECLARATION: return createReturnParameterDeclaration();
      case OptGrammarPackage.DELETE_STATEMENT: return createDeleteStatement();
      case OptGrammarPackage.IF_STATEMENT: return createIfStatement();
      case OptGrammarPackage.WHILE_STATEMENT: return createWhileStatement();
      case OptGrammarPackage.FOR_STATEMENT: return createForStatement();
      case OptGrammarPackage.BODY: return createBody();
      case OptGrammarPackage.CONTINUE_STATEMENT: return createContinueStatement();
      case OptGrammarPackage.BREAK_STATEMENT: return createBreakStatement();
      case OptGrammarPackage.RETURN_STATEMENT: return createReturnStatement();
      case OptGrammarPackage.THROW_STATEMENT: return createThrowStatement();
      case OptGrammarPackage.PLACE_HOLDER_STATEMENT: return createPlaceHolderStatement();
      case OptGrammarPackage.EXPRESSION: return createExpression();
      case OptGrammarPackage.SPECIAL_EXPRESSION: return createSpecialExpression();
      case OptGrammarPackage.NOT_EXPRESSION: return createNotExpression();
      case OptGrammarPackage.PRE_INC_EXPRESSION: return createPreIncExpression();
      case OptGrammarPackage.PRE_DEC_EXPRESSION: return createPreDecExpression();
      case OptGrammarPackage.BINARY_NOT_EXPRESSION: return createBinaryNotExpression();
      case OptGrammarPackage.SIGN_EXPRESSION: return createSignExpression();
      case OptGrammarPackage.NEW_EXPRESSION: return createNewExpression();
      case OptGrammarPackage.LITERAL: return createLiteral();
      case OptGrammarPackage.SPECIAL_LITERAL: return createSpecialLiteral();
      case OptGrammarPackage.BOOLEAN_CONST: return createBooleanConst();
      case OptGrammarPackage.NUMERIC_LITERAL: return createNumericLiteral();
      case OptGrammarPackage.UNIT_TYPES: return createUnitTypes();
      case OptGrammarPackage.INT_LITERAL: return createIntLiteral();
      case OptGrammarPackage.HEX_LITERAL: return createHexLiteral();
      case OptGrammarPackage.DECIMAL_LITERAL: return createDecimalLiteral();
      case OptGrammarPackage.STRING_LITERAL: return createStringLiteral();
      case OptGrammarPackage.TYPE_CAST: return createTypeCast();
      case OptGrammarPackage.ELEMENTARY_TYPE_NAME_ENUM: return createElementaryTypeNameEnum();
      case OptGrammarPackage.SIMPLE_TYPE_DECLARATION: return createSimpleTypeDeclaration();
      case OptGrammarPackage.LOCATION_SPECIFIER_ENUM: return createLocationSpecifierEnum();
      case OptGrammarPackage.VISIBILITY_ENUM: return createVisibilityEnum();
      case OptGrammarPackage.UNITS_LITERAL: return createUnitsLiteral();
      case OptGrammarPackage.TIME_UNITS_LITERAL: return createTimeUnitsLiteral();
      case OptGrammarPackage.VAR_VARIABLE_TYPE_DECLARATION: return createVarVariableTypeDeclaration();
      case OptGrammarPackage.BLOCK: return createBlock();
      case OptGrammarPackage.CONTINUE: return createContinue();
      case OptGrammarPackage.ASSIGNMENT: return createAssignment();
      case OptGrammarPackage.VARIABLE_DECLARATION_EXPRESSION: return createVariableDeclarationExpression();
      case OptGrammarPackage.OR: return createOr();
      case OptGrammarPackage.AND: return createAnd();
      case OptGrammarPackage.EQUALITY: return createEquality();
      case OptGrammarPackage.COMPARISON: return createComparison();
      case OptGrammarPackage.BIT_OR: return createBitOr();
      case OptGrammarPackage.BIT_XOR: return createBitXor();
      case OptGrammarPackage.BIT_AND: return createBitAnd();
      case OptGrammarPackage.SHIFT: return createShift();
      case OptGrammarPackage.ADD_SUB: return createAddSub();
      case OptGrammarPackage.MUL_DIV_MOD: return createMulDivMod();
      case OptGrammarPackage.EXPONENT: return createExponent();
      case OptGrammarPackage.POST_INC_DEC_EXPRESSION: return createPostIncDecExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OptGrammarPackage.ASSIGNMENT_OP_ENUM:
        return createAssignmentOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.EQUALITY_OP_ENUM:
        return createEqualityOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.COMPARISON_OP_ENUM:
        return createComparisonOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.SHIFT_OP_ENUM:
        return createShiftOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.ADDITION_OP_ENUM:
        return createAdditionOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.MUL_DIV_MOD_OP_ENUM:
        return createMulDivModOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.INC_DEC_OP_ENUM:
        return createIncDecOpEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.BOOLEAN_LITERAL_ENUM:
        return createBooleanLiteralEnumFromString(eDataType, initialValue);
      case OptGrammarPackage.SPECIAL_EXPRESSION_TYPE_ENUM:
        return createSpecialExpressionTypeEnumFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case OptGrammarPackage.ASSIGNMENT_OP_ENUM:
        return convertAssignmentOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.EQUALITY_OP_ENUM:
        return convertEqualityOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.COMPARISON_OP_ENUM:
        return convertComparisonOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.SHIFT_OP_ENUM:
        return convertShiftOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.ADDITION_OP_ENUM:
        return convertAdditionOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.MUL_DIV_MOD_OP_ENUM:
        return convertMulDivModOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.INC_DEC_OP_ENUM:
        return convertIncDecOpEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.BOOLEAN_LITERAL_ENUM:
        return convertBooleanLiteralEnumToString(eDataType, instanceValue);
      case OptGrammarPackage.SPECIAL_EXPRESSION_TYPE_ENUM:
        return convertSpecialExpressionTypeEnumToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Contract createContract()
  {
    ContractImpl contract = new ContractImpl();
    return contract;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DefinitionBody createDefinitionBody()
  {
    DefinitionBodyImpl definitionBody = new DefinitionBodyImpl();
    return definitionBody;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InheritanceSpecifier createInheritanceSpecifier()
  {
    InheritanceSpecifierImpl inheritanceSpecifier = new InheritanceSpecifierImpl();
    return inheritanceSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallListArguments createFunctionCallListArguments()
  {
    FunctionCallListArgumentsImpl functionCallListArguments = new FunctionCallListArgumentsImpl();
    return functionCallListArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallArguments createFunctionCallArguments()
  {
    FunctionCallArgumentsImpl functionCallArguments = new FunctionCallArgumentsImpl();
    return functionCallArguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionCallArg createFunctionCallArg()
  {
    FunctionCallArgImpl functionCallArg = new FunctionCallArgImpl();
    return functionCallArg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDefinition createFunctionDefinition()
  {
    FunctionDefinitionImpl functionDefinition = new FunctionDefinitionImpl();
    return functionDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FunctionDefinitionOptionalElement createFunctionDefinitionOptionalElement()
  {
    FunctionDefinitionOptionalElementImpl functionDefinitionOptionalElement = new FunctionDefinitionOptionalElementImpl();
    return functionDefinitionOptionalElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Const createConst()
  {
    ConstImpl const_ = new ConstImpl();
    return const_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VisibilitySpecifier createVisibilitySpecifier()
  {
    VisibilitySpecifierImpl visibilitySpecifier = new VisibilitySpecifierImpl();
    return visibilitySpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StructDefinition createStructDefinition()
  {
    StructDefinitionImpl structDefinition = new StructDefinitionImpl();
    return structDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumDefinition createEnumDefinition()
  {
    EnumDefinitionImpl enumDefinition = new EnumDefinitionImpl();
    return enumDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EnumValue createEnumValue()
  {
    EnumValueImpl enumValue = new EnumValueImpl();
    return enumValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardVariableDeclaration createStandardVariableDeclaration()
  {
    StandardVariableDeclarationImpl standardVariableDeclaration = new StandardVariableDeclarationImpl();
    return standardVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarVariableDeclaration createVarVariableDeclaration()
  {
    VarVariableDeclarationImpl varVariableDeclaration = new VarVariableDeclarationImpl();
    return varVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarVariableTupleVariableDeclaration createVarVariableTupleVariableDeclaration()
  {
    VarVariableTupleVariableDeclarationImpl varVariableTupleVariableDeclaration = new VarVariableTupleVariableDeclarationImpl();
    return varVariableTupleVariableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclarationOptionalElement createVariableDeclarationOptionalElement()
  {
    VariableDeclarationOptionalElementImpl variableDeclarationOptionalElement = new VariableDeclarationOptionalElementImpl();
    return variableDeclarationOptionalElement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IndexedSpecifer createIndexedSpecifer()
  {
    IndexedSpeciferImpl indexedSpecifer = new IndexedSpeciferImpl();
    return indexedSpecifer;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConstantSpecifier createConstantSpecifier()
  {
    ConstantSpecifierImpl constantSpecifier = new ConstantSpecifierImpl();
    return constantSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationSpecifier createLocationSpecifier()
  {
    LocationSpecifierImpl locationSpecifier = new LocationSpecifierImpl();
    return locationSpecifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Type createType()
  {
    TypeImpl type = new TypeImpl();
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardType createStandardType()
  {
    StandardTypeImpl standardType = new StandardTypeImpl();
    return standardType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StandardTypeWithoutQualifiedIdentifier createStandardTypeWithoutQualifiedIdentifier()
  {
    StandardTypeWithoutQualifiedIdentifierImpl standardTypeWithoutQualifiedIdentifier = new StandardTypeWithoutQualifiedIdentifierImpl();
    return standardTypeWithoutQualifiedIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementaryType createElementaryType()
  {
    ElementaryTypeImpl elementaryType = new ElementaryTypeImpl();
    return elementaryType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping createMapping()
  {
    MappingImpl mapping = new MappingImpl();
    return mapping;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayDimensions createArrayDimensions()
  {
    ArrayDimensionsImpl arrayDimensions = new ArrayDimensionsImpl();
    return arrayDimensions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tuple createTuple()
  {
    TupleImpl tuple = new TupleImpl();
    return tuple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TupleSeparator createTupleSeparator()
  {
    TupleSeparatorImpl tupleSeparator = new TupleSeparatorImpl();
    return tupleSeparator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleStatement createSimpleStatement()
  {
    SimpleStatementImpl simpleStatement = new SimpleStatementImpl();
    return simpleStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleStatement2 createSimpleStatement2()
  {
    SimpleStatement2Impl simpleStatement2 = new SimpleStatement2Impl();
    return simpleStatement2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExpressionStatement createExpressionStatement()
  {
    ExpressionStatementImpl expressionStatement = new ExpressionStatementImpl();
    return expressionStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public QualifiedIdentifier createQualifiedIdentifier()
  {
    QualifiedIdentifierImpl qualifiedIdentifier = new QualifiedIdentifierImpl();
    return qualifiedIdentifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Qualifier createQualifier()
  {
    QualifierImpl qualifier = new QualifierImpl();
    return qualifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Field createField()
  {
    FieldImpl field = new FieldImpl();
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Index createIndex()
  {
    IndexImpl index = new IndexImpl();
    return index;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Arguments createArguments()
  {
    ArgumentsImpl arguments = new ArgumentsImpl();
    return arguments;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modifier createModifier()
  {
    ModifierImpl modifier = new ModifierImpl();
    return modifier;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Event createEvent()
  {
    EventImpl event = new EventImpl();
    return event;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ModifierInvocation createModifierInvocation()
  {
    ModifierInvocationImpl modifierInvocation = new ModifierInvocationImpl();
    return modifierInvocation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ParameterList createParameterList()
  {
    ParameterListImpl parameterList = new ParameterListImpl();
    return parameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnsParameterList createReturnsParameterList()
  {
    ReturnsParameterListImpl returnsParameterList = new ReturnsParameterListImpl();
    return returnsParameterList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnParameterDeclaration createReturnParameterDeclaration()
  {
    ReturnParameterDeclarationImpl returnParameterDeclaration = new ReturnParameterDeclarationImpl();
    return returnParameterDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteStatement createDeleteStatement()
  {
    DeleteStatementImpl deleteStatement = new DeleteStatementImpl();
    return deleteStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileStatement createWhileStatement()
  {
    WhileStatementImpl whileStatement = new WhileStatementImpl();
    return whileStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForStatement createForStatement()
  {
    ForStatementImpl forStatement = new ForStatementImpl();
    return forStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Body createBody()
  {
    BodyImpl body = new BodyImpl();
    return body;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ContinueStatement createContinueStatement()
  {
    ContinueStatementImpl continueStatement = new ContinueStatementImpl();
    return continueStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BreakStatement createBreakStatement()
  {
    BreakStatementImpl breakStatement = new BreakStatementImpl();
    return breakStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReturnStatement createReturnStatement()
  {
    ReturnStatementImpl returnStatement = new ReturnStatementImpl();
    return returnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ThrowStatement createThrowStatement()
  {
    ThrowStatementImpl throwStatement = new ThrowStatementImpl();
    return throwStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlaceHolderStatement createPlaceHolderStatement()
  {
    PlaceHolderStatementImpl placeHolderStatement = new PlaceHolderStatementImpl();
    return placeHolderStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialExpression createSpecialExpression()
  {
    SpecialExpressionImpl specialExpression = new SpecialExpressionImpl();
    return specialExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotExpression createNotExpression()
  {
    NotExpressionImpl notExpression = new NotExpressionImpl();
    return notExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PreIncExpression createPreIncExpression()
  {
    PreIncExpressionImpl preIncExpression = new PreIncExpressionImpl();
    return preIncExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PreDecExpression createPreDecExpression()
  {
    PreDecExpressionImpl preDecExpression = new PreDecExpressionImpl();
    return preDecExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BinaryNotExpression createBinaryNotExpression()
  {
    BinaryNotExpressionImpl binaryNotExpression = new BinaryNotExpressionImpl();
    return binaryNotExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SignExpression createSignExpression()
  {
    SignExpressionImpl signExpression = new SignExpressionImpl();
    return signExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NewExpression createNewExpression()
  {
    NewExpressionImpl newExpression = new NewExpressionImpl();
    return newExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Literal createLiteral()
  {
    LiteralImpl literal = new LiteralImpl();
    return literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialLiteral createSpecialLiteral()
  {
    SpecialLiteralImpl specialLiteral = new SpecialLiteralImpl();
    return specialLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BooleanConst createBooleanConst()
  {
    BooleanConstImpl booleanConst = new BooleanConstImpl();
    return booleanConst;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NumericLiteral createNumericLiteral()
  {
    NumericLiteralImpl numericLiteral = new NumericLiteralImpl();
    return numericLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitTypes createUnitTypes()
  {
    UnitTypesImpl unitTypes = new UnitTypesImpl();
    return unitTypes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public HexLiteral createHexLiteral()
  {
    HexLiteralImpl hexLiteral = new HexLiteralImpl();
    return hexLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DecimalLiteral createDecimalLiteral()
  {
    DecimalLiteralImpl decimalLiteral = new DecimalLiteralImpl();
    return decimalLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringLiteral createStringLiteral()
  {
    StringLiteralImpl stringLiteral = new StringLiteralImpl();
    return stringLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TypeCast createTypeCast()
  {
    TypeCastImpl typeCast = new TypeCastImpl();
    return typeCast;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ElementaryTypeNameEnum createElementaryTypeNameEnum()
  {
    ElementaryTypeNameEnumImpl elementaryTypeNameEnum = new ElementaryTypeNameEnumImpl();
    return elementaryTypeNameEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleTypeDeclaration createSimpleTypeDeclaration()
  {
    SimpleTypeDeclarationImpl simpleTypeDeclaration = new SimpleTypeDeclarationImpl();
    return simpleTypeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocationSpecifierEnum createLocationSpecifierEnum()
  {
    LocationSpecifierEnumImpl locationSpecifierEnum = new LocationSpecifierEnumImpl();
    return locationSpecifierEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VisibilityEnum createVisibilityEnum()
  {
    VisibilityEnumImpl visibilityEnum = new VisibilityEnumImpl();
    return visibilityEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UnitsLiteral createUnitsLiteral()
  {
    UnitsLiteralImpl unitsLiteral = new UnitsLiteralImpl();
    return unitsLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeUnitsLiteral createTimeUnitsLiteral()
  {
    TimeUnitsLiteralImpl timeUnitsLiteral = new TimeUnitsLiteralImpl();
    return timeUnitsLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarVariableTypeDeclaration createVarVariableTypeDeclaration()
  {
    VarVariableTypeDeclarationImpl varVariableTypeDeclaration = new VarVariableTypeDeclarationImpl();
    return varVariableTypeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Block createBlock()
  {
    BlockImpl block = new BlockImpl();
    return block;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Continue createContinue()
  {
    ContinueImpl continue_ = new ContinueImpl();
    return continue_;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Assignment createAssignment()
  {
    AssignmentImpl assignment = new AssignmentImpl();
    return assignment;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclarationExpression createVariableDeclarationExpression()
  {
    VariableDeclarationExpressionImpl variableDeclarationExpression = new VariableDeclarationExpressionImpl();
    return variableDeclarationExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Or createOr()
  {
    OrImpl or = new OrImpl();
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public And createAnd()
  {
    AndImpl and = new AndImpl();
    return and;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Equality createEquality()
  {
    EqualityImpl equality = new EqualityImpl();
    return equality;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Comparison createComparison()
  {
    ComparisonImpl comparison = new ComparisonImpl();
    return comparison;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitOr createBitOr()
  {
    BitOrImpl bitOr = new BitOrImpl();
    return bitOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitXor createBitXor()
  {
    BitXorImpl bitXor = new BitXorImpl();
    return bitXor;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BitAnd createBitAnd()
  {
    BitAndImpl bitAnd = new BitAndImpl();
    return bitAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Shift createShift()
  {
    ShiftImpl shift = new ShiftImpl();
    return shift;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddSub createAddSub()
  {
    AddSubImpl addSub = new AddSubImpl();
    return addSub;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MulDivMod createMulDivMod()
  {
    MulDivModImpl mulDivMod = new MulDivModImpl();
    return mulDivMod;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exponent createExponent()
  {
    ExponentImpl exponent = new ExponentImpl();
    return exponent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PostIncDecExpression createPostIncDecExpression()
  {
    PostIncDecExpressionImpl postIncDecExpression = new PostIncDecExpressionImpl();
    return postIncDecExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AssignmentOpEnum createAssignmentOpEnumFromString(EDataType eDataType, String initialValue)
  {
    AssignmentOpEnum result = AssignmentOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAssignmentOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EqualityOpEnum createEqualityOpEnumFromString(EDataType eDataType, String initialValue)
  {
    EqualityOpEnum result = EqualityOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertEqualityOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComparisonOpEnum createComparisonOpEnumFromString(EDataType eDataType, String initialValue)
  {
    ComparisonOpEnum result = ComparisonOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertComparisonOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ShiftOpEnum createShiftOpEnumFromString(EDataType eDataType, String initialValue)
  {
    ShiftOpEnum result = ShiftOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertShiftOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AdditionOpEnum createAdditionOpEnumFromString(EDataType eDataType, String initialValue)
  {
    AdditionOpEnum result = AdditionOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAdditionOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MulDivModOpEnum createMulDivModOpEnumFromString(EDataType eDataType, String initialValue)
  {
    MulDivModOpEnum result = MulDivModOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMulDivModOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IncDecOpEnum createIncDecOpEnumFromString(EDataType eDataType, String initialValue)
  {
    IncDecOpEnum result = IncDecOpEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertIncDecOpEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BooleanLiteralEnum createBooleanLiteralEnumFromString(EDataType eDataType, String initialValue)
  {
    BooleanLiteralEnum result = BooleanLiteralEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertBooleanLiteralEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SpecialExpressionTypeEnum createSpecialExpressionTypeEnumFromString(EDataType eDataType, String initialValue)
  {
    SpecialExpressionTypeEnum result = SpecialExpressionTypeEnum.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSpecialExpressionTypeEnumToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public OptGrammarPackage getOptGrammarPackage()
  {
    return (OptGrammarPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static OptGrammarPackage getPackage()
  {
    return OptGrammarPackage.eINSTANCE;
  }

} //OptGrammarFactoryImpl
