/**
 * generated by Xtext 2.19.0
 */
package org.unicam.myGrammar.optGrammar.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.unicam.myGrammar.optGrammar.ArrayAccess;
import org.unicam.myGrammar.optGrammar.ConcreteStructDeclaration;
import org.unicam.myGrammar.optGrammar.ConcreteStructureDefinitionDeclaration;
import org.unicam.myGrammar.optGrammar.OptGrammarPackage;
import org.unicam.myGrammar.optGrammar.StructureFieldValue;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Concrete Structure Definition Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ConcreteStructureDefinitionDeclarationImpl#getRef <em>Ref</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ConcreteStructureDefinitionDeclarationImpl#getCouples <em>Couples</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ConcreteStructureDefinitionDeclarationImpl#getExistenceRef <em>Existence Ref</em>}</li>
 *   <li>{@link org.unicam.myGrammar.optGrammar.impl.ConcreteStructureDefinitionDeclarationImpl#getArrayAccessRef <em>Array Access Ref</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConcreteStructureDefinitionDeclarationImpl extends FunctionParameterDeclarationImpl implements ConcreteStructureDefinitionDeclaration
{
  /**
   * The cached value of the '{@link #getRef() <em>Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRef()
   * @generated
   * @ordered
   */
  protected ConcreteStructDeclaration ref;

  /**
   * The cached value of the '{@link #getCouples() <em>Couples</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCouples()
   * @generated
   * @ordered
   */
  protected EList<StructureFieldValue> couples;

  /**
   * The cached value of the '{@link #getExistenceRef() <em>Existence Ref</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExistenceRef()
   * @generated
   * @ordered
   */
  protected ConcreteStructDeclaration existenceRef;

  /**
   * The cached value of the '{@link #getArrayAccessRef() <em>Array Access Ref</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArrayAccessRef()
   * @generated
   * @ordered
   */
  protected ArrayAccess arrayAccessRef;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConcreteStructureDefinitionDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return OptGrammarPackage.Literals.CONCRETE_STRUCTURE_DEFINITION_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConcreteStructDeclaration getRef()
  {
    if (ref != null && ref.eIsProxy())
    {
      InternalEObject oldRef = (InternalEObject)ref;
      ref = (ConcreteStructDeclaration)eResolveProxy(oldRef);
      if (ref != oldRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__REF, oldRef, ref));
      }
    }
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteStructDeclaration basicGetRef()
  {
    return ref;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRef(ConcreteStructDeclaration newRef)
  {
    ConcreteStructDeclaration oldRef = ref;
    ref = newRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__REF, oldRef, ref));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StructureFieldValue> getCouples()
  {
    if (couples == null)
    {
      couples = new EObjectContainmentEList<StructureFieldValue>(StructureFieldValue.class, this, OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__COUPLES);
    }
    return couples;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConcreteStructDeclaration getExistenceRef()
  {
    if (existenceRef != null && existenceRef.eIsProxy())
    {
      InternalEObject oldExistenceRef = (InternalEObject)existenceRef;
      existenceRef = (ConcreteStructDeclaration)eResolveProxy(oldExistenceRef);
      if (existenceRef != oldExistenceRef)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__EXISTENCE_REF, oldExistenceRef, existenceRef));
      }
    }
    return existenceRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConcreteStructDeclaration basicGetExistenceRef()
  {
    return existenceRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExistenceRef(ConcreteStructDeclaration newExistenceRef)
  {
    ConcreteStructDeclaration oldExistenceRef = existenceRef;
    existenceRef = newExistenceRef;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__EXISTENCE_REF, oldExistenceRef, existenceRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ArrayAccess getArrayAccessRef()
  {
    return arrayAccessRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetArrayAccessRef(ArrayAccess newArrayAccessRef, NotificationChain msgs)
  {
    ArrayAccess oldArrayAccessRef = arrayAccessRef;
    arrayAccessRef = newArrayAccessRef;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF, oldArrayAccessRef, newArrayAccessRef);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setArrayAccessRef(ArrayAccess newArrayAccessRef)
  {
    if (newArrayAccessRef != arrayAccessRef)
    {
      NotificationChain msgs = null;
      if (arrayAccessRef != null)
        msgs = ((InternalEObject)arrayAccessRef).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF, null, msgs);
      if (newArrayAccessRef != null)
        msgs = ((InternalEObject)newArrayAccessRef).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF, null, msgs);
      msgs = basicSetArrayAccessRef(newArrayAccessRef, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF, newArrayAccessRef, newArrayAccessRef));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__COUPLES:
        return ((InternalEList<?>)getCouples()).basicRemove(otherEnd, msgs);
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF:
        return basicSetArrayAccessRef(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__REF:
        if (resolve) return getRef();
        return basicGetRef();
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__COUPLES:
        return getCouples();
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__EXISTENCE_REF:
        if (resolve) return getExistenceRef();
        return basicGetExistenceRef();
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF:
        return getArrayAccessRef();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__REF:
        setRef((ConcreteStructDeclaration)newValue);
        return;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__COUPLES:
        getCouples().clear();
        getCouples().addAll((Collection<? extends StructureFieldValue>)newValue);
        return;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__EXISTENCE_REF:
        setExistenceRef((ConcreteStructDeclaration)newValue);
        return;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF:
        setArrayAccessRef((ArrayAccess)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__REF:
        setRef((ConcreteStructDeclaration)null);
        return;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__COUPLES:
        getCouples().clear();
        return;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__EXISTENCE_REF:
        setExistenceRef((ConcreteStructDeclaration)null);
        return;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF:
        setArrayAccessRef((ArrayAccess)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__REF:
        return ref != null;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__COUPLES:
        return couples != null && !couples.isEmpty();
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__EXISTENCE_REF:
        return existenceRef != null;
      case OptGrammarPackage.CONCRETE_STRUCTURE_DEFINITION_DECLARATION__ARRAY_ACCESS_REF:
        return arrayAccessRef != null;
    }
    return super.eIsSet(featureID);
  }

} //ConcreteStructureDefinitionDeclarationImpl
