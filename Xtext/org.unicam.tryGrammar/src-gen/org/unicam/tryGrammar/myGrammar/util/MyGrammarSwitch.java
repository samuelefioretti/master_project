/**
 * generated by Xtext 2.19.0
 */
package org.unicam.tryGrammar.myGrammar.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.unicam.tryGrammar.myGrammar.AddSub;
import org.unicam.tryGrammar.myGrammar.And;
import org.unicam.tryGrammar.myGrammar.Arguments;
import org.unicam.tryGrammar.myGrammar.ArrayDimensions;
import org.unicam.tryGrammar.myGrammar.Assignment;
import org.unicam.tryGrammar.myGrammar.BinaryNotExpression;
import org.unicam.tryGrammar.myGrammar.BitAnd;
import org.unicam.tryGrammar.myGrammar.BitOr;
import org.unicam.tryGrammar.myGrammar.BitXor;
import org.unicam.tryGrammar.myGrammar.Block;
import org.unicam.tryGrammar.myGrammar.Body;
import org.unicam.tryGrammar.myGrammar.BooleanConst;
import org.unicam.tryGrammar.myGrammar.BreakStatement;
import org.unicam.tryGrammar.myGrammar.Comparison;
import org.unicam.tryGrammar.myGrammar.Const;
import org.unicam.tryGrammar.myGrammar.ConstantSpecifier;
import org.unicam.tryGrammar.myGrammar.Continue;
import org.unicam.tryGrammar.myGrammar.ContinueStatement;
import org.unicam.tryGrammar.myGrammar.Contract;
import org.unicam.tryGrammar.myGrammar.ContractOrLibrary;
import org.unicam.tryGrammar.myGrammar.DecimalLiteral;
import org.unicam.tryGrammar.myGrammar.DefinitionBody;
import org.unicam.tryGrammar.myGrammar.DeleteStatement;
import org.unicam.tryGrammar.myGrammar.ElementaryType;
import org.unicam.tryGrammar.myGrammar.EnumDefinition;
import org.unicam.tryGrammar.myGrammar.EnumValue;
import org.unicam.tryGrammar.myGrammar.Equality;
import org.unicam.tryGrammar.myGrammar.Ether;
import org.unicam.tryGrammar.myGrammar.Event;
import org.unicam.tryGrammar.myGrammar.Exponent;
import org.unicam.tryGrammar.myGrammar.Expression;
import org.unicam.tryGrammar.myGrammar.ExpressionStatement;
import org.unicam.tryGrammar.myGrammar.Field;
import org.unicam.tryGrammar.myGrammar.ForStatement;
import org.unicam.tryGrammar.myGrammar.FunctionCallArg;
import org.unicam.tryGrammar.myGrammar.FunctionCallArguments;
import org.unicam.tryGrammar.myGrammar.FunctionCallListArguments;
import org.unicam.tryGrammar.myGrammar.FunctionDefinition;
import org.unicam.tryGrammar.myGrammar.FunctionDefinitionOptionalElement;
import org.unicam.tryGrammar.myGrammar.GasleftFunction;
import org.unicam.tryGrammar.myGrammar.HexLiteral;
import org.unicam.tryGrammar.myGrammar.IfStatement;
import org.unicam.tryGrammar.myGrammar.ImportDirective;
import org.unicam.tryGrammar.myGrammar.Index;
import org.unicam.tryGrammar.myGrammar.IndexedSpecifer;
import org.unicam.tryGrammar.myGrammar.InheritanceSpecifier;
import org.unicam.tryGrammar.myGrammar.Library;
import org.unicam.tryGrammar.myGrammar.Literal;
import org.unicam.tryGrammar.myGrammar.LocationSpecifier;
import org.unicam.tryGrammar.myGrammar.Mapping;
import org.unicam.tryGrammar.myGrammar.Modifier;
import org.unicam.tryGrammar.myGrammar.ModifierInvocation;
import org.unicam.tryGrammar.myGrammar.MulDivMod;
import org.unicam.tryGrammar.myGrammar.MyGrammarPackage;
import org.unicam.tryGrammar.myGrammar.NewExpression;
import org.unicam.tryGrammar.myGrammar.NotExpression;
import org.unicam.tryGrammar.myGrammar.Now;
import org.unicam.tryGrammar.myGrammar.NumberDimensionless;
import org.unicam.tryGrammar.myGrammar.Or;
import org.unicam.tryGrammar.myGrammar.ParameterList;
import org.unicam.tryGrammar.myGrammar.PlaceHolderStatement;
import org.unicam.tryGrammar.myGrammar.PostIncDecExpression;
import org.unicam.tryGrammar.myGrammar.PreDecExpression;
import org.unicam.tryGrammar.myGrammar.PreIncExpression;
import org.unicam.tryGrammar.myGrammar.QualifiedIdentifier;
import org.unicam.tryGrammar.myGrammar.Qualifier;
import org.unicam.tryGrammar.myGrammar.ReturnParameterDeclaration;
import org.unicam.tryGrammar.myGrammar.ReturnStatement;
import org.unicam.tryGrammar.myGrammar.ReturnsParameterList;
import org.unicam.tryGrammar.myGrammar.Shift;
import org.unicam.tryGrammar.myGrammar.SignExpression;
import org.unicam.tryGrammar.myGrammar.SimpleStatement;
import org.unicam.tryGrammar.myGrammar.SimpleStatement2;
import org.unicam.tryGrammar.myGrammar.Solidity;
import org.unicam.tryGrammar.myGrammar.SpecialExpression;
import org.unicam.tryGrammar.myGrammar.SpecialVariables;
import org.unicam.tryGrammar.myGrammar.SpecialVariablesTypeEnum;
import org.unicam.tryGrammar.myGrammar.StandardType;
import org.unicam.tryGrammar.myGrammar.StandardTypeWithoutQualifiedIdentifier;
import org.unicam.tryGrammar.myGrammar.StandardVariableDeclaration;
import org.unicam.tryGrammar.myGrammar.Statement;
import org.unicam.tryGrammar.myGrammar.StringLiteral;
import org.unicam.tryGrammar.myGrammar.StructDefinition;
import org.unicam.tryGrammar.myGrammar.SymbolAlias;
import org.unicam.tryGrammar.myGrammar.ThrowStatement;
import org.unicam.tryGrammar.myGrammar.Time;
import org.unicam.tryGrammar.myGrammar.Tuple;
import org.unicam.tryGrammar.myGrammar.TupleSeparator;
import org.unicam.tryGrammar.myGrammar.Type;
import org.unicam.tryGrammar.myGrammar.TypeCast;
import org.unicam.tryGrammar.myGrammar.VarVariableDeclaration;
import org.unicam.tryGrammar.myGrammar.VarVariableTupleVariableDeclaration;
import org.unicam.tryGrammar.myGrammar.VarVariableTypeDeclaration;
import org.unicam.tryGrammar.myGrammar.Variable;
import org.unicam.tryGrammar.myGrammar.VariableDeclarationExpression;
import org.unicam.tryGrammar.myGrammar.VariableDeclarationOptionalElement;
import org.unicam.tryGrammar.myGrammar.VisibilitySpecifier;
import org.unicam.tryGrammar.myGrammar.WhileStatement;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.unicam.tryGrammar.myGrammar.MyGrammarPackage
 * @generated
 */
public class MyGrammarSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static MyGrammarPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyGrammarSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = MyGrammarPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case MyGrammarPackage.SOLIDITY:
      {
        Solidity solidity = (Solidity)theEObject;
        T result = caseSolidity(solidity);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.IMPORT_DIRECTIVE:
      {
        ImportDirective importDirective = (ImportDirective)theEObject;
        T result = caseImportDirective(importDirective);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SYMBOL_ALIAS:
      {
        SymbolAlias symbolAlias = (SymbolAlias)theEObject;
        T result = caseSymbolAlias(symbolAlias);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.CONTRACT_OR_LIBRARY:
      {
        ContractOrLibrary contractOrLibrary = (ContractOrLibrary)theEObject;
        T result = caseContractOrLibrary(contractOrLibrary);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.CONTRACT:
      {
        Contract contract = (Contract)theEObject;
        T result = caseContract(contract);
        if (result == null) result = caseContractOrLibrary(contract);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.LIBRARY:
      {
        Library library = (Library)theEObject;
        T result = caseLibrary(library);
        if (result == null) result = caseContractOrLibrary(library);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.DEFINITION_BODY:
      {
        DefinitionBody definitionBody = (DefinitionBody)theEObject;
        T result = caseDefinitionBody(definitionBody);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.INHERITANCE_SPECIFIER:
      {
        InheritanceSpecifier inheritanceSpecifier = (InheritanceSpecifier)theEObject;
        T result = caseInheritanceSpecifier(inheritanceSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.FUNCTION_CALL_LIST_ARGUMENTS:
      {
        FunctionCallListArguments functionCallListArguments = (FunctionCallListArguments)theEObject;
        T result = caseFunctionCallListArguments(functionCallListArguments);
        if (result == null) result = caseFunctionCallArguments(functionCallListArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.FUNCTION_CALL_ARGUMENTS:
      {
        FunctionCallArguments functionCallArguments = (FunctionCallArguments)theEObject;
        T result = caseFunctionCallArguments(functionCallArguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.FUNCTION_CALL_ARG:
      {
        FunctionCallArg functionCallArg = (FunctionCallArg)theEObject;
        T result = caseFunctionCallArg(functionCallArg);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.FUNCTION_DEFINITION:
      {
        FunctionDefinition functionDefinition = (FunctionDefinition)theEObject;
        T result = caseFunctionDefinition(functionDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.FUNCTION_DEFINITION_OPTIONAL_ELEMENT:
      {
        FunctionDefinitionOptionalElement functionDefinitionOptionalElement = (FunctionDefinitionOptionalElement)theEObject;
        T result = caseFunctionDefinitionOptionalElement(functionDefinitionOptionalElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.CONST:
      {
        Const const_ = (Const)theEObject;
        T result = caseConst(const_);
        if (result == null) result = caseFunctionDefinitionOptionalElement(const_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.VISIBILITY_SPECIFIER:
      {
        VisibilitySpecifier visibilitySpecifier = (VisibilitySpecifier)theEObject;
        T result = caseVisibilitySpecifier(visibilitySpecifier);
        if (result == null) result = caseFunctionDefinition(visibilitySpecifier);
        if (result == null) result = caseFunctionDefinitionOptionalElement(visibilitySpecifier);
        if (result == null) result = caseEnumDefinition(visibilitySpecifier);
        if (result == null) result = caseVariableDeclarationOptionalElement(visibilitySpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.STRUCT_DEFINITION:
      {
        StructDefinition structDefinition = (StructDefinition)theEObject;
        T result = caseStructDefinition(structDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ENUM_DEFINITION:
      {
        EnumDefinition enumDefinition = (EnumDefinition)theEObject;
        T result = caseEnumDefinition(enumDefinition);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ENUM_VALUE:
      {
        EnumValue enumValue = (EnumValue)theEObject;
        T result = caseEnumValue(enumValue);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.VARIABLE:
      {
        Variable variable = (Variable)theEObject;
        T result = caseVariable(variable);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.STATEMENT:
      {
        Statement statement = (Statement)theEObject;
        T result = caseStatement(statement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.STANDARD_VARIABLE_DECLARATION:
      {
        StandardVariableDeclaration standardVariableDeclaration = (StandardVariableDeclaration)theEObject;
        T result = caseStandardVariableDeclaration(standardVariableDeclaration);
        if (result == null) result = caseSimpleStatement(standardVariableDeclaration);
        if (result == null) result = caseSimpleStatement2(standardVariableDeclaration);
        if (result == null) result = caseStatement(standardVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.VAR_VARIABLE_DECLARATION:
      {
        VarVariableDeclaration varVariableDeclaration = (VarVariableDeclaration)theEObject;
        T result = caseVarVariableDeclaration(varVariableDeclaration);
        if (result == null) result = caseStatement(varVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION:
      {
        VarVariableTupleVariableDeclaration varVariableTupleVariableDeclaration = (VarVariableTupleVariableDeclaration)theEObject;
        T result = caseVarVariableTupleVariableDeclaration(varVariableTupleVariableDeclaration);
        if (result == null) result = caseSimpleStatement(varVariableTupleVariableDeclaration);
        if (result == null) result = caseSimpleStatement2(varVariableTupleVariableDeclaration);
        if (result == null) result = caseStatement(varVariableTupleVariableDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.VARIABLE_DECLARATION_OPTIONAL_ELEMENT:
      {
        VariableDeclarationOptionalElement variableDeclarationOptionalElement = (VariableDeclarationOptionalElement)theEObject;
        T result = caseVariableDeclarationOptionalElement(variableDeclarationOptionalElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.INDEXED_SPECIFER:
      {
        IndexedSpecifer indexedSpecifer = (IndexedSpecifer)theEObject;
        T result = caseIndexedSpecifer(indexedSpecifer);
        if (result == null) result = caseVariableDeclarationOptionalElement(indexedSpecifer);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.CONSTANT_SPECIFIER:
      {
        ConstantSpecifier constantSpecifier = (ConstantSpecifier)theEObject;
        T result = caseConstantSpecifier(constantSpecifier);
        if (result == null) result = caseVariableDeclarationOptionalElement(constantSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.LOCATION_SPECIFIER:
      {
        LocationSpecifier locationSpecifier = (LocationSpecifier)theEObject;
        T result = caseLocationSpecifier(locationSpecifier);
        if (result == null) result = caseVariableDeclarationOptionalElement(locationSpecifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.TYPE:
      {
        Type type = (Type)theEObject;
        T result = caseType(type);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.STANDARD_TYPE:
      {
        StandardType standardType = (StandardType)theEObject;
        T result = caseStandardType(standardType);
        if (result == null) result = caseType(standardType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.STANDARD_TYPE_WITHOUT_QUALIFIED_IDENTIFIER:
      {
        StandardTypeWithoutQualifiedIdentifier standardTypeWithoutQualifiedIdentifier = (StandardTypeWithoutQualifiedIdentifier)theEObject;
        T result = caseStandardTypeWithoutQualifiedIdentifier(standardTypeWithoutQualifiedIdentifier);
        if (result == null) result = caseSimpleStatement(standardTypeWithoutQualifiedIdentifier);
        if (result == null) result = caseSimpleStatement2(standardTypeWithoutQualifiedIdentifier);
        if (result == null) result = caseStatement(standardTypeWithoutQualifiedIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ELEMENTARY_TYPE:
      {
        ElementaryType elementaryType = (ElementaryType)theEObject;
        T result = caseElementaryType(elementaryType);
        if (result == null) result = caseStandardType(elementaryType);
        if (result == null) result = caseStandardTypeWithoutQualifiedIdentifier(elementaryType);
        if (result == null) result = caseType(elementaryType);
        if (result == null) result = caseSimpleStatement(elementaryType);
        if (result == null) result = caseSimpleStatement2(elementaryType);
        if (result == null) result = caseStatement(elementaryType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.MAPPING:
      {
        Mapping mapping = (Mapping)theEObject;
        T result = caseMapping(mapping);
        if (result == null) result = caseStandardType(mapping);
        if (result == null) result = caseStandardTypeWithoutQualifiedIdentifier(mapping);
        if (result == null) result = caseType(mapping);
        if (result == null) result = caseSimpleStatement(mapping);
        if (result == null) result = caseSimpleStatement2(mapping);
        if (result == null) result = caseStatement(mapping);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ARRAY_DIMENSIONS:
      {
        ArrayDimensions arrayDimensions = (ArrayDimensions)theEObject;
        T result = caseArrayDimensions(arrayDimensions);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.TUPLE:
      {
        Tuple tuple = (Tuple)theEObject;
        T result = caseTuple(tuple);
        if (result == null) result = caseExpression(tuple);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.TUPLE_SEPARATOR:
      {
        TupleSeparator tupleSeparator = (TupleSeparator)theEObject;
        T result = caseTupleSeparator(tupleSeparator);
        if (result == null) result = caseExpression(tupleSeparator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SIMPLE_STATEMENT:
      {
        SimpleStatement simpleStatement = (SimpleStatement)theEObject;
        T result = caseSimpleStatement(simpleStatement);
        if (result == null) result = caseStatement(simpleStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SIMPLE_STATEMENT2:
      {
        SimpleStatement2 simpleStatement2 = (SimpleStatement2)theEObject;
        T result = caseSimpleStatement2(simpleStatement2);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.EXPRESSION_STATEMENT:
      {
        ExpressionStatement expressionStatement = (ExpressionStatement)theEObject;
        T result = caseExpressionStatement(expressionStatement);
        if (result == null) result = caseSimpleStatement(expressionStatement);
        if (result == null) result = caseSimpleStatement2(expressionStatement);
        if (result == null) result = caseStatement(expressionStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.QUALIFIED_IDENTIFIER:
      {
        QualifiedIdentifier qualifiedIdentifier = (QualifiedIdentifier)theEObject;
        T result = caseQualifiedIdentifier(qualifiedIdentifier);
        if (result == null) result = caseStandardType(qualifiedIdentifier);
        if (result == null) result = caseExpression(qualifiedIdentifier);
        if (result == null) result = caseType(qualifiedIdentifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.QUALIFIER:
      {
        Qualifier qualifier = (Qualifier)theEObject;
        T result = caseQualifier(qualifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.FIELD:
      {
        Field field = (Field)theEObject;
        T result = caseField(field);
        if (result == null) result = caseQualifier(field);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.INDEX:
      {
        Index index = (Index)theEObject;
        T result = caseIndex(index);
        if (result == null) result = caseQualifier(index);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ARGUMENTS:
      {
        Arguments arguments = (Arguments)theEObject;
        T result = caseArguments(arguments);
        if (result == null) result = caseQualifier(arguments);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.MODIFIER:
      {
        Modifier modifier = (Modifier)theEObject;
        T result = caseModifier(modifier);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.EVENT:
      {
        Event event = (Event)theEObject;
        T result = caseEvent(event);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.MODIFIER_INVOCATION:
      {
        ModifierInvocation modifierInvocation = (ModifierInvocation)theEObject;
        T result = caseModifierInvocation(modifierInvocation);
        if (result == null) result = caseFunctionDefinitionOptionalElement(modifierInvocation);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.PARAMETER_LIST:
      {
        ParameterList parameterList = (ParameterList)theEObject;
        T result = caseParameterList(parameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.RETURNS_PARAMETER_LIST:
      {
        ReturnsParameterList returnsParameterList = (ReturnsParameterList)theEObject;
        T result = caseReturnsParameterList(returnsParameterList);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.RETURN_PARAMETER_DECLARATION:
      {
        ReturnParameterDeclaration returnParameterDeclaration = (ReturnParameterDeclaration)theEObject;
        T result = caseReturnParameterDeclaration(returnParameterDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.DELETE_STATEMENT:
      {
        DeleteStatement deleteStatement = (DeleteStatement)theEObject;
        T result = caseDeleteStatement(deleteStatement);
        if (result == null) result = caseStatement(deleteStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.IF_STATEMENT:
      {
        IfStatement ifStatement = (IfStatement)theEObject;
        T result = caseIfStatement(ifStatement);
        if (result == null) result = caseStatement(ifStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.WHILE_STATEMENT:
      {
        WhileStatement whileStatement = (WhileStatement)theEObject;
        T result = caseWhileStatement(whileStatement);
        if (result == null) result = caseStatement(whileStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.FOR_STATEMENT:
      {
        ForStatement forStatement = (ForStatement)theEObject;
        T result = caseForStatement(forStatement);
        if (result == null) result = caseStatement(forStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BODY:
      {
        Body body = (Body)theEObject;
        T result = caseBody(body);
        if (result == null) result = caseStatement(body);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.CONTINUE_STATEMENT:
      {
        ContinueStatement continueStatement = (ContinueStatement)theEObject;
        T result = caseContinueStatement(continueStatement);
        if (result == null) result = caseStatement(continueStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BREAK_STATEMENT:
      {
        BreakStatement breakStatement = (BreakStatement)theEObject;
        T result = caseBreakStatement(breakStatement);
        if (result == null) result = caseStatement(breakStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.RETURN_STATEMENT:
      {
        ReturnStatement returnStatement = (ReturnStatement)theEObject;
        T result = caseReturnStatement(returnStatement);
        if (result == null) result = caseStatement(returnStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.THROW_STATEMENT:
      {
        ThrowStatement throwStatement = (ThrowStatement)theEObject;
        T result = caseThrowStatement(throwStatement);
        if (result == null) result = caseStatement(throwStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.PLACE_HOLDER_STATEMENT:
      {
        PlaceHolderStatement placeHolderStatement = (PlaceHolderStatement)theEObject;
        T result = casePlaceHolderStatement(placeHolderStatement);
        if (result == null) result = caseStatement(placeHolderStatement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.EXPRESSION:
      {
        Expression expression = (Expression)theEObject;
        T result = caseExpression(expression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SPECIAL_EXPRESSION:
      {
        SpecialExpression specialExpression = (SpecialExpression)theEObject;
        T result = caseSpecialExpression(specialExpression);
        if (result == null) result = caseExpression(specialExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.NOT_EXPRESSION:
      {
        NotExpression notExpression = (NotExpression)theEObject;
        T result = caseNotExpression(notExpression);
        if (result == null) result = caseExpression(notExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.PRE_INC_EXPRESSION:
      {
        PreIncExpression preIncExpression = (PreIncExpression)theEObject;
        T result = casePreIncExpression(preIncExpression);
        if (result == null) result = caseExpression(preIncExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.PRE_DEC_EXPRESSION:
      {
        PreDecExpression preDecExpression = (PreDecExpression)theEObject;
        T result = casePreDecExpression(preDecExpression);
        if (result == null) result = caseExpression(preDecExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BINARY_NOT_EXPRESSION:
      {
        BinaryNotExpression binaryNotExpression = (BinaryNotExpression)theEObject;
        T result = caseBinaryNotExpression(binaryNotExpression);
        if (result == null) result = caseExpression(binaryNotExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SIGN_EXPRESSION:
      {
        SignExpression signExpression = (SignExpression)theEObject;
        T result = caseSignExpression(signExpression);
        if (result == null) result = caseExpression(signExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.NEW_EXPRESSION:
      {
        NewExpression newExpression = (NewExpression)theEObject;
        T result = caseNewExpression(newExpression);
        if (result == null) result = caseExpression(newExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.LITERAL:
      {
        Literal literal = (Literal)theEObject;
        T result = caseLiteral(literal);
        if (result == null) result = caseExpression(literal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.GASLEFT_FUNCTION:
      {
        GasleftFunction gasleftFunction = (GasleftFunction)theEObject;
        T result = caseGasleftFunction(gasleftFunction);
        if (result == null) result = caseLiteral(gasleftFunction);
        if (result == null) result = caseExpression(gasleftFunction);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BOOLEAN_CONST:
      {
        BooleanConst booleanConst = (BooleanConst)theEObject;
        T result = caseBooleanConst(booleanConst);
        if (result == null) result = caseLiteral(booleanConst);
        if (result == null) result = caseExpression(booleanConst);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.NUMBER:
      {
        org.unicam.tryGrammar.myGrammar.Number number = (org.unicam.tryGrammar.myGrammar.Number)theEObject;
        T result = caseNumber(number);
        if (result == null) result = caseLiteral(number);
        if (result == null) result = caseExpression(number);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.NUMBER_DIMENSIONLESS:
      {
        NumberDimensionless numberDimensionless = (NumberDimensionless)theEObject;
        T result = caseNumberDimensionless(numberDimensionless);
        if (result == null) result = caseNumber(numberDimensionless);
        if (result == null) result = caseLiteral(numberDimensionless);
        if (result == null) result = caseExpression(numberDimensionless);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ETHER:
      {
        Ether ether = (Ether)theEObject;
        T result = caseEther(ether);
        if (result == null) result = caseNumber(ether);
        if (result == null) result = caseLiteral(ether);
        if (result == null) result = caseExpression(ether);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.TIME:
      {
        Time time = (Time)theEObject;
        T result = caseTime(time);
        if (result == null) result = caseNumber(time);
        if (result == null) result = caseLiteral(time);
        if (result == null) result = caseExpression(time);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.STRING_LITERAL:
      {
        StringLiteral stringLiteral = (StringLiteral)theEObject;
        T result = caseStringLiteral(stringLiteral);
        if (result == null) result = caseLiteral(stringLiteral);
        if (result == null) result = caseExpression(stringLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.HEX_LITERAL:
      {
        HexLiteral hexLiteral = (HexLiteral)theEObject;
        T result = caseHexLiteral(hexLiteral);
        if (result == null) result = caseNumber(hexLiteral);
        if (result == null) result = caseLiteral(hexLiteral);
        if (result == null) result = caseExpression(hexLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.DECIMAL_LITERAL:
      {
        DecimalLiteral decimalLiteral = (DecimalLiteral)theEObject;
        T result = caseDecimalLiteral(decimalLiteral);
        if (result == null) result = caseNumber(decimalLiteral);
        if (result == null) result = caseLiteral(decimalLiteral);
        if (result == null) result = caseExpression(decimalLiteral);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.TYPE_CAST:
      {
        TypeCast typeCast = (TypeCast)theEObject;
        T result = caseTypeCast(typeCast);
        if (result == null) result = caseExpression(typeCast);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.NOW:
      {
        Now now = (Now)theEObject;
        T result = caseNow(now);
        if (result == null) result = caseNumber(now);
        if (result == null) result = caseLiteral(now);
        if (result == null) result = caseExpression(now);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SPECIAL_VARIABLES:
      {
        SpecialVariables specialVariables = (SpecialVariables)theEObject;
        T result = caseSpecialVariables(specialVariables);
        if (result == null) result = caseLiteral(specialVariables);
        if (result == null) result = caseExpression(specialVariables);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SPECIAL_VARIABLES_TYPE_ENUM:
      {
        SpecialVariablesTypeEnum specialVariablesTypeEnum = (SpecialVariablesTypeEnum)theEObject;
        T result = caseSpecialVariablesTypeEnum(specialVariablesTypeEnum);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.VAR_VARIABLE_TYPE_DECLARATION:
      {
        VarVariableTypeDeclaration varVariableTypeDeclaration = (VarVariableTypeDeclaration)theEObject;
        T result = caseVarVariableTypeDeclaration(varVariableTypeDeclaration);
        if (result == null) result = caseSimpleStatement(varVariableTypeDeclaration);
        if (result == null) result = caseSimpleStatement2(varVariableTypeDeclaration);
        if (result == null) result = caseStatement(varVariableTypeDeclaration);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BLOCK:
      {
        Block block = (Block)theEObject;
        T result = caseBlock(block);
        if (result == null) result = caseBody(block);
        if (result == null) result = caseStatement(block);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.CONTINUE:
      {
        Continue continue_ = (Continue)theEObject;
        T result = caseContinue(continue_);
        if (result == null) result = caseContinueStatement(continue_);
        if (result == null) result = caseStatement(continue_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ASSIGNMENT:
      {
        Assignment assignment = (Assignment)theEObject;
        T result = caseAssignment(assignment);
        if (result == null) result = caseExpression(assignment);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.VARIABLE_DECLARATION_EXPRESSION:
      {
        VariableDeclarationExpression variableDeclarationExpression = (VariableDeclarationExpression)theEObject;
        T result = caseVariableDeclarationExpression(variableDeclarationExpression);
        if (result == null) result = caseExpression(variableDeclarationExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.OR:
      {
        Or or = (Or)theEObject;
        T result = caseOr(or);
        if (result == null) result = caseExpression(or);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.AND:
      {
        And and = (And)theEObject;
        T result = caseAnd(and);
        if (result == null) result = caseExpression(and);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.EQUALITY:
      {
        Equality equality = (Equality)theEObject;
        T result = caseEquality(equality);
        if (result == null) result = caseExpression(equality);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.COMPARISON:
      {
        Comparison comparison = (Comparison)theEObject;
        T result = caseComparison(comparison);
        if (result == null) result = caseExpression(comparison);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BIT_OR:
      {
        BitOr bitOr = (BitOr)theEObject;
        T result = caseBitOr(bitOr);
        if (result == null) result = caseExpression(bitOr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BIT_XOR:
      {
        BitXor bitXor = (BitXor)theEObject;
        T result = caseBitXor(bitXor);
        if (result == null) result = caseExpression(bitXor);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.BIT_AND:
      {
        BitAnd bitAnd = (BitAnd)theEObject;
        T result = caseBitAnd(bitAnd);
        if (result == null) result = caseExpression(bitAnd);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.SHIFT:
      {
        Shift shift = (Shift)theEObject;
        T result = caseShift(shift);
        if (result == null) result = caseExpression(shift);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.ADD_SUB:
      {
        AddSub addSub = (AddSub)theEObject;
        T result = caseAddSub(addSub);
        if (result == null) result = caseExpression(addSub);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.MUL_DIV_MOD:
      {
        MulDivMod mulDivMod = (MulDivMod)theEObject;
        T result = caseMulDivMod(mulDivMod);
        if (result == null) result = caseExpression(mulDivMod);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.EXPONENT:
      {
        Exponent exponent = (Exponent)theEObject;
        T result = caseExponent(exponent);
        if (result == null) result = caseExpression(exponent);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case MyGrammarPackage.POST_INC_DEC_EXPRESSION:
      {
        PostIncDecExpression postIncDecExpression = (PostIncDecExpression)theEObject;
        T result = casePostIncDecExpression(postIncDecExpression);
        if (result == null) result = caseExpression(postIncDecExpression);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solidity</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solidity</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolidity(Solidity object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Import Directive</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Import Directive</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImportDirective(ImportDirective object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Symbol Alias</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Symbol Alias</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSymbolAlias(SymbolAlias object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract Or Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract Or Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContractOrLibrary(ContractOrLibrary object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Contract</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Contract</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContract(Contract object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Library</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Library</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLibrary(Library object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Definition Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Definition Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDefinitionBody(DefinitionBody object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Inheritance Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Inheritance Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseInheritanceSpecifier(InheritanceSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call List Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call List Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCallListArguments(FunctionCallListArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCallArguments(FunctionCallArguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Call Arg</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Call Arg</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionCallArg(FunctionCallArg object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDefinition(FunctionDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Function Definition Optional Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Function Definition Optional Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFunctionDefinitionOptionalElement(FunctionDefinitionOptionalElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConst(Const object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Visibility Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Visibility Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVisibilitySpecifier(VisibilitySpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Struct Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Struct Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStructDefinition(StructDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Definition</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Definition</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumDefinition(EnumDefinition object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Enum Value</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Enum Value</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEnumValue(EnumValue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariable(Variable object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStatement(Statement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standard Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standard Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandardVariableDeclaration(StandardVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarVariableDeclaration(VarVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Variable Tuple Variable Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Variable Tuple Variable Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarVariableTupleVariableDeclaration(VarVariableTupleVariableDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration Optional Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration Optional Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclarationOptionalElement(VariableDeclarationOptionalElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Indexed Specifer</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Indexed Specifer</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndexedSpecifer(IndexedSpecifer object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Constant Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Constant Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConstantSpecifier(ConstantSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Location Specifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Location Specifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLocationSpecifier(LocationSpecifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseType(Type object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standard Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standard Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandardType(StandardType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Standard Type Without Qualified Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Standard Type Without Qualified Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStandardTypeWithoutQualifiedIdentifier(StandardTypeWithoutQualifiedIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Elementary Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Elementary Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseElementaryType(ElementaryType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mapping</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mapping</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMapping(Mapping object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Array Dimensions</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Array Dimensions</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArrayDimensions(ArrayDimensions object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTuple(Tuple object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tuple Separator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tuple Separator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTupleSeparator(TupleSeparator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleStatement(SimpleStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Statement2</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Statement2</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleStatement2(SimpleStatement2 object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpressionStatement(ExpressionStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qualified Identifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qualified Identifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualifiedIdentifier(QualifiedIdentifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Qualifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Qualifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseQualifier(Qualifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Field</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Field</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseField(Field object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Index</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Index</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIndex(Index object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Arguments</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Arguments</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseArguments(Arguments object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modifier</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modifier</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModifier(Modifier object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Event</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Event</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEvent(Event object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modifier Invocation</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modifier Invocation</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModifierInvocation(ModifierInvocation object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseParameterList(ParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Returns Parameter List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Returns Parameter List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnsParameterList(ReturnsParameterList object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Parameter Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Parameter Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnParameterDeclaration(ReturnParameterDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Delete Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Delete Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeleteStatement(DeleteStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIfStatement(IfStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>While Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseWhileStatement(WhileStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>For Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseForStatement(ForStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Body</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Body</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBody(Body object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Continue Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Continue Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContinueStatement(ContinueStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Break Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Break Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBreakStatement(BreakStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Return Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseReturnStatement(ReturnStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Throw Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Throw Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseThrowStatement(ThrowStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Place Holder Statement</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Place Holder Statement</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePlaceHolderStatement(PlaceHolderStatement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpression(Expression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Special Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Special Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecialExpression(SpecialExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Not Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Not Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNotExpression(NotExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pre Inc Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pre Inc Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreIncExpression(PreIncExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pre Dec Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pre Dec Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePreDecExpression(PreDecExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Binary Not Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Binary Not Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBinaryNotExpression(BinaryNotExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sign Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sign Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSignExpression(SignExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>New Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>New Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNewExpression(NewExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLiteral(Literal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Gasleft Function</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Gasleft Function</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseGasleftFunction(GasleftFunction object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Const</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Const</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBooleanConst(BooleanConst object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumber(org.unicam.tryGrammar.myGrammar.Number object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Number Dimensionless</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Number Dimensionless</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNumberDimensionless(NumberDimensionless object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ether</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ether</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEther(Ether object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Time</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Time</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTime(Time object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>String Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseStringLiteral(StringLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Hex Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Hex Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseHexLiteral(HexLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Decimal Literal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Decimal Literal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDecimalLiteral(DecimalLiteral object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Type Cast</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Type Cast</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTypeCast(TypeCast object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Now</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Now</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNow(Now object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Special Variables</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Special Variables</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecialVariables(SpecialVariables object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Special Variables Type Enum</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Special Variables Type Enum</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSpecialVariablesTypeEnum(SpecialVariablesTypeEnum object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Var Variable Type Declaration</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Var Variable Type Declaration</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVarVariableTypeDeclaration(VarVariableTypeDeclaration object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Block</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Block</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBlock(Block object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Continue</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Continue</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseContinue(Continue object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Assignment</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAssignment(Assignment object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variable Declaration Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variable Declaration Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariableDeclarationExpression(VariableDeclarationExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOr(Or object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAnd(And object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equality</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equality</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEquality(Equality object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Comparison</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseComparison(Comparison object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Or</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Or</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitOr(BitOr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit Xor</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit Xor</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitXor(BitXor object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bit And</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bit And</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBitAnd(BitAnd object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Shift</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Shift</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseShift(Shift object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Add Sub</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Add Sub</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAddSub(AddSub object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Mul Div Mod</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Mul Div Mod</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMulDivMod(MulDivMod object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Exponent</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Exponent</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExponent(Exponent object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Post Inc Dec Expression</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Post Inc Dec Expression</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePostIncDecExpression(PostIncDecExpression object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //MyGrammarSwitch
