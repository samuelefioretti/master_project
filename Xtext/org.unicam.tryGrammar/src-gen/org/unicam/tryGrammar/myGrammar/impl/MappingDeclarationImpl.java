/**
 * generated by Xtext 2.19.0
 */
package org.unicam.tryGrammar.myGrammar.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.unicam.tryGrammar.myGrammar.Mapping;
import org.unicam.tryGrammar.myGrammar.MappingDeclaration;
import org.unicam.tryGrammar.myGrammar.MyGrammarPackage;
import org.unicam.tryGrammar.myGrammar.VisibilityEnum;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mapping Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unicam.tryGrammar.myGrammar.impl.MappingDeclarationImpl#getLocation <em>Location</em>}</li>
 *   <li>{@link org.unicam.tryGrammar.myGrammar.impl.MappingDeclarationImpl#getVisibility <em>Visibility</em>}</li>
 *   <li>{@link org.unicam.tryGrammar.myGrammar.impl.MappingDeclarationImpl#getUnnamedMappingDeclaration <em>Unnamed Mapping Declaration</em>}</li>
 *   <li>{@link org.unicam.tryGrammar.myGrammar.impl.MappingDeclarationImpl#getName <em>Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MappingDeclarationImpl extends FunctionParameterDeclarationImpl implements MappingDeclaration
{
  /**
   * The default value of the '{@link #getLocation() <em>Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocation()
   * @generated
   * @ordered
   */
  protected static final String LOCATION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLocation() <em>Location</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocation()
   * @generated
   * @ordered
   */
  protected String location = LOCATION_EDEFAULT;

  /**
   * The default value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected static final VisibilityEnum VISIBILITY_EDEFAULT = VisibilityEnum.PUBLIC;

  /**
   * The cached value of the '{@link #getVisibility() <em>Visibility</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisibility()
   * @generated
   * @ordered
   */
  protected VisibilityEnum visibility = VISIBILITY_EDEFAULT;

  /**
   * The cached value of the '{@link #getUnnamedMappingDeclaration() <em>Unnamed Mapping Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUnnamedMappingDeclaration()
   * @generated
   * @ordered
   */
  protected Mapping unnamedMappingDeclaration;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyGrammarPackage.eINSTANCE.getMappingDeclaration();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLocation()
  {
    return location;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLocation(String newLocation)
  {
    String oldLocation = location;
    location = newLocation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyGrammarPackage.MAPPING_DECLARATION__LOCATION, oldLocation, location));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VisibilityEnum getVisibility()
  {
    return visibility;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisibility(VisibilityEnum newVisibility)
  {
    VisibilityEnum oldVisibility = visibility;
    visibility = newVisibility == null ? VISIBILITY_EDEFAULT : newVisibility;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyGrammarPackage.MAPPING_DECLARATION__VISIBILITY, oldVisibility, visibility));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Mapping getUnnamedMappingDeclaration()
  {
    return unnamedMappingDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUnnamedMappingDeclaration(Mapping newUnnamedMappingDeclaration, NotificationChain msgs)
  {
    Mapping oldUnnamedMappingDeclaration = unnamedMappingDeclaration;
    unnamedMappingDeclaration = newUnnamedMappingDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION, oldUnnamedMappingDeclaration, newUnnamedMappingDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setUnnamedMappingDeclaration(Mapping newUnnamedMappingDeclaration)
  {
    if (newUnnamedMappingDeclaration != unnamedMappingDeclaration)
    {
      NotificationChain msgs = null;
      if (unnamedMappingDeclaration != null)
        msgs = ((InternalEObject)unnamedMappingDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION, null, msgs);
      if (newUnnamedMappingDeclaration != null)
        msgs = ((InternalEObject)newUnnamedMappingDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION, null, msgs);
      msgs = basicSetUnnamedMappingDeclaration(newUnnamedMappingDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION, newUnnamedMappingDeclaration, newUnnamedMappingDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyGrammarPackage.MAPPING_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION:
        return basicSetUnnamedMappingDeclaration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyGrammarPackage.MAPPING_DECLARATION__LOCATION:
        return getLocation();
      case MyGrammarPackage.MAPPING_DECLARATION__VISIBILITY:
        return getVisibility();
      case MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION:
        return getUnnamedMappingDeclaration();
      case MyGrammarPackage.MAPPING_DECLARATION__NAME:
        return getName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyGrammarPackage.MAPPING_DECLARATION__LOCATION:
        setLocation((String)newValue);
        return;
      case MyGrammarPackage.MAPPING_DECLARATION__VISIBILITY:
        setVisibility((VisibilityEnum)newValue);
        return;
      case MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION:
        setUnnamedMappingDeclaration((Mapping)newValue);
        return;
      case MyGrammarPackage.MAPPING_DECLARATION__NAME:
        setName((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyGrammarPackage.MAPPING_DECLARATION__LOCATION:
        setLocation(LOCATION_EDEFAULT);
        return;
      case MyGrammarPackage.MAPPING_DECLARATION__VISIBILITY:
        setVisibility(VISIBILITY_EDEFAULT);
        return;
      case MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION:
        setUnnamedMappingDeclaration((Mapping)null);
        return;
      case MyGrammarPackage.MAPPING_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyGrammarPackage.MAPPING_DECLARATION__LOCATION:
        return LOCATION_EDEFAULT == null ? location != null : !LOCATION_EDEFAULT.equals(location);
      case MyGrammarPackage.MAPPING_DECLARATION__VISIBILITY:
        return visibility != VISIBILITY_EDEFAULT;
      case MyGrammarPackage.MAPPING_DECLARATION__UNNAMED_MAPPING_DECLARATION:
        return unnamedMappingDeclaration != null;
      case MyGrammarPackage.MAPPING_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (location: ");
    result.append(location);
    result.append(", visibility: ");
    result.append(visibility);
    result.append(", name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //MappingDeclarationImpl
