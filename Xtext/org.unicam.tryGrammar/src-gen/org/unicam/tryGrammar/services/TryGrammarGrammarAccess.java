/*
 * generated by Xtext 2.19.0
 */
package org.unicam.tryGrammar.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TryGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SolidityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Solidity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cImportDirectiveAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cImportDirectiveImportDirectiveParserRuleCall_0_0 = (RuleCall)cImportDirectiveAssignment_0.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cContractContractParserRuleCall_1_0 = (RuleCall)cContractAssignment_1.eContents().get(0);
		private final Assignment cLibraryAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLibraryLibraryParserRuleCall_2_0 = (RuleCall)cLibraryAssignment_2.eContents().get(0);
		
		//Solidity:
		//	(importDirective+=ImportDirective | contract+=Contract | library+=Library)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(importDirective+=ImportDirective | contract+=Contract | library+=Library)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//importDirective+=ImportDirective
		public Assignment getImportDirectiveAssignment_0() { return cImportDirectiveAssignment_0; }
		
		//ImportDirective
		public RuleCall getImportDirectiveImportDirectiveParserRuleCall_0_0() { return cImportDirectiveImportDirectiveParserRuleCall_0_0; }
		
		//contract+=Contract
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }
		
		//Contract
		public RuleCall getContractContractParserRuleCall_1_0() { return cContractContractParserRuleCall_1_0; }
		
		//library+=Library
		public Assignment getLibraryAssignment_2() { return cLibraryAssignment_2; }
		
		//Library
		public RuleCall getLibraryLibraryParserRuleCall_2_0() { return cLibraryLibraryParserRuleCall_2_0; }
	}
	public class ImportDirectiveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ImportDirective");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cImportKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cImportURIAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cImportURISTRINGTerminalRuleCall_0_1_0 = (RuleCall)cImportURIAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cImportKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cAsKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUnitAliasAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cUnitAliasIDTerminalRuleCall_1_3_0 = (RuleCall)cUnitAliasAssignment_1_3.eContents().get(0);
		private final Keyword cFromKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Assignment cImportURIAssignment_1_5 = (Assignment)cGroup_1.eContents().get(5);
		private final RuleCall cImportURISTRINGTerminalRuleCall_1_5_0 = (RuleCall)cImportURIAssignment_1_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_6 = (Keyword)cGroup_1.eContents().get(6);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cImportKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cSymbolAliasesAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSymbolAliasesSymbolAliasParserRuleCall_2_2_0 = (RuleCall)cSymbolAliasesAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cSymbolAliasesAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cSymbolAliasesSymbolAliasParserRuleCall_2_3_1_0 = (RuleCall)cSymbolAliasesAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cFromKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final Assignment cImportURIAssignment_2_6 = (Assignment)cGroup_2.eContents().get(6);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_6_0 = (RuleCall)cImportURIAssignment_2_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_7 = (Keyword)cGroup_2.eContents().get(7);
		
		//ImportDirective:
		//	"import" importURI=STRING ";" |
		//	"import" "*" "as" unitAlias=ID "from" importURI=STRING ";" |
		//	"import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"import" importURI=STRING ";" | "import" "*" "as" unitAlias=ID "from" importURI=STRING ";" | "import" "{"
		//symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"import" importURI=STRING ";"
		public Group getGroup_0() { return cGroup_0; }
		
		//"import"
		public Keyword getImportKeyword_0_0() { return cImportKeyword_0_0; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_0_1() { return cImportURIAssignment_0_1; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_0_1_0() { return cImportURISTRINGTerminalRuleCall_0_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_0_2() { return cSemicolonKeyword_0_2; }
		
		//"import" "*" "as" unitAlias=ID "from" importURI=STRING ";"
		public Group getGroup_1() { return cGroup_1; }
		
		//"import"
		public Keyword getImportKeyword_1_0() { return cImportKeyword_1_0; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//"as"
		public Keyword getAsKeyword_1_2() { return cAsKeyword_1_2; }
		
		//unitAlias=ID
		public Assignment getUnitAliasAssignment_1_3() { return cUnitAliasAssignment_1_3; }
		
		//ID
		public RuleCall getUnitAliasIDTerminalRuleCall_1_3_0() { return cUnitAliasIDTerminalRuleCall_1_3_0; }
		
		//"from"
		public Keyword getFromKeyword_1_4() { return cFromKeyword_1_4; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_1_5() { return cImportURIAssignment_1_5; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_1_5_0() { return cImportURISTRINGTerminalRuleCall_1_5_0; }
		
		//";"
		public Keyword getSemicolonKeyword_1_6() { return cSemicolonKeyword_1_6; }
		
		//"import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";"
		public Group getGroup_2() { return cGroup_2; }
		
		//"import"
		public Keyword getImportKeyword_2_0() { return cImportKeyword_2_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }
		
		//symbolAliases+=SymbolAlias
		public Assignment getSymbolAliasesAssignment_2_2() { return cSymbolAliasesAssignment_2_2; }
		
		//SymbolAlias
		public RuleCall getSymbolAliasesSymbolAliasParserRuleCall_2_2_0() { return cSymbolAliasesSymbolAliasParserRuleCall_2_2_0; }
		
		//("," symbolAliases+=SymbolAlias)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//symbolAliases+=SymbolAlias
		public Assignment getSymbolAliasesAssignment_2_3_1() { return cSymbolAliasesAssignment_2_3_1; }
		
		//SymbolAlias
		public RuleCall getSymbolAliasesSymbolAliasParserRuleCall_2_3_1_0() { return cSymbolAliasesSymbolAliasParserRuleCall_2_3_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2_4() { return cRightCurlyBracketKeyword_2_4; }
		
		//"from"
		public Keyword getFromKeyword_2_5() { return cFromKeyword_2_5; }
		
		//importURI=STRING
		public Assignment getImportURIAssignment_2_6() { return cImportURIAssignment_2_6; }
		
		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_6_0() { return cImportURISTRINGTerminalRuleCall_2_6_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_7() { return cSemicolonKeyword_2_7; }
	}
	public class SymbolAliasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SymbolAlias");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSymbolIDTerminalRuleCall_0_0 = (RuleCall)cSymbolAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliasAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliasIDTerminalRuleCall_2_0 = (RuleCall)cAliasAssignment_2.eContents().get(0);
		
		//SymbolAlias:
		//	symbol=ID "as" alias=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//symbol=ID "as" alias=ID
		public Group getGroup() { return cGroup; }
		
		//symbol=ID
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }
		
		//ID
		public RuleCall getSymbolIDTerminalRuleCall_0_0() { return cSymbolIDTerminalRuleCall_0_0; }
		
		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }
		
		//alias=ID
		public Assignment getAliasAssignment_2() { return cAliasAssignment_2; }
		
		//ID
		public RuleCall getAliasIDTerminalRuleCall_2_0() { return cAliasIDTerminalRuleCall_2_0; }
	}
	public class ContractOrLibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ContractOrLibrary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cContractParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLibraryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ContractOrLibrary:
		//	Contract | Library;
		@Override public ParserRule getRule() { return rule; }
		
		//Contract | Library
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Contract
		public RuleCall getContractParserRuleCall_0() { return cContractParserRuleCall_0; }
		
		//Library
		public RuleCall getLibraryParserRuleCall_1() { return cLibraryParserRuleCall_1; }
	}
	public class ContractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Contract");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContractKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInheritanceSpecifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0 = (RuleCall)cInheritanceSpecifiersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInheritanceSpecifiersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0 = (RuleCall)cInheritanceSpecifiersAssignment_2_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyDefinitionBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Contract:
		//	"contract" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
		//	inheritanceSpecifiers+=InheritanceSpecifier)*)?
		//	body=DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//"contract" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
		//inheritanceSpecifiers+=InheritanceSpecifier)*)? body=DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//"contract"
		public Keyword getContractKeyword_0() { return cContractKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("is" inheritanceSpecifiers+=InheritanceSpecifier ("," inheritanceSpecifiers+=InheritanceSpecifier)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//inheritanceSpecifiers+=InheritanceSpecifier
		public Assignment getInheritanceSpecifiersAssignment_2_1() { return cInheritanceSpecifiersAssignment_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0() { return cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0; }
		
		//("," inheritanceSpecifiers+=InheritanceSpecifier)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//inheritanceSpecifiers+=InheritanceSpecifier
		public Assignment getInheritanceSpecifiersAssignment_2_2_1() { return cInheritanceSpecifiersAssignment_2_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0() { return cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0; }
		
		//body=DefinitionBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//DefinitionBody
		public RuleCall getBodyDefinitionBodyParserRuleCall_3_0() { return cBodyDefinitionBodyParserRuleCall_3_0; }
	}
	public class LibraryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Library");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLibraryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cInheritanceSpecifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0 = (RuleCall)cInheritanceSpecifiersAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInheritanceSpecifiersAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0 = (RuleCall)cInheritanceSpecifiersAssignment_2_2_1.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyDefinitionBodyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Library:
		//	"library" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
		//	inheritanceSpecifiers+=InheritanceSpecifier)*)?
		//	body=DefinitionBody;
		@Override public ParserRule getRule() { return rule; }
		
		//"library" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier ("," inheritanceSpecifiers+=InheritanceSpecifier)*)?
		//body=DefinitionBody
		public Group getGroup() { return cGroup; }
		
		//"library"
		public Keyword getLibraryKeyword_0() { return cLibraryKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//("is" inheritanceSpecifiers+=InheritanceSpecifier ("," inheritanceSpecifiers+=InheritanceSpecifier)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }
		
		//inheritanceSpecifiers+=InheritanceSpecifier
		public Assignment getInheritanceSpecifiersAssignment_2_1() { return cInheritanceSpecifiersAssignment_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0() { return cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_1_0; }
		
		//("," inheritanceSpecifiers+=InheritanceSpecifier)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//inheritanceSpecifiers+=InheritanceSpecifier
		public Assignment getInheritanceSpecifiersAssignment_2_2_1() { return cInheritanceSpecifiersAssignment_2_2_1; }
		
		//InheritanceSpecifier
		public RuleCall getInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0() { return cInheritanceSpecifiersInheritanceSpecifierParserRuleCall_2_2_1_0; }
		
		//body=DefinitionBody
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }
		
		//DefinitionBody
		public RuleCall getBodyDefinitionBodyParserRuleCall_3_0() { return cBodyDefinitionBodyParserRuleCall_3_0; }
	}
	public class DefinitionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.DefinitionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefinitionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFunctionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFunctionsFunctionDefinitionParserRuleCall_2_0_0 = (RuleCall)cFunctionsAssignment_2_0.eContents().get(0);
		private final Assignment cStructsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cStructsStructDefinitionParserRuleCall_2_1_0 = (RuleCall)cStructsAssignment_2_1.eContents().get(0);
		private final Assignment cEnumsAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final RuleCall cEnumsEnumDefinitionParserRuleCall_2_2_0 = (RuleCall)cEnumsAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Assignment cVariablesAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_2_3_0_0 = (RuleCall)cVariablesAssignment_2_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3_1 = (Keyword)cGroup_2_3.eContents().get(1);
		private final Assignment cModifiersAssignment_2_4 = (Assignment)cAlternatives_2.eContents().get(4);
		private final RuleCall cModifiersModifierParserRuleCall_2_4_0 = (RuleCall)cModifiersAssignment_2_4.eContents().get(0);
		private final Assignment cEventsAssignment_2_5 = (Assignment)cAlternatives_2.eContents().get(5);
		private final RuleCall cEventsEventParserRuleCall_2_5_0 = (RuleCall)cEventsAssignment_2_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DefinitionBody:
		//	{DefinitionBody} "{" (functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition |
		//	variables+=VariableDeclaration ";" | modifiers+=Modifier | events+=Event)*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//{DefinitionBody} "{" (functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition |
		//variables+=VariableDeclaration ";" | modifiers+=Modifier | events+=Event)* "}"
		public Group getGroup() { return cGroup; }
		
		//{DefinitionBody}
		public Action getDefinitionBodyAction_0() { return cDefinitionBodyAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition | variables+=VariableDeclaration ";"
		//| modifiers+=Modifier | events+=Event)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//functions+=FunctionDefinition
		public Assignment getFunctionsAssignment_2_0() { return cFunctionsAssignment_2_0; }
		
		//FunctionDefinition
		public RuleCall getFunctionsFunctionDefinitionParserRuleCall_2_0_0() { return cFunctionsFunctionDefinitionParserRuleCall_2_0_0; }
		
		//structs+=StructDefinition
		public Assignment getStructsAssignment_2_1() { return cStructsAssignment_2_1; }
		
		//StructDefinition
		public RuleCall getStructsStructDefinitionParserRuleCall_2_1_0() { return cStructsStructDefinitionParserRuleCall_2_1_0; }
		
		//enums+=EnumDefinition
		public Assignment getEnumsAssignment_2_2() { return cEnumsAssignment_2_2; }
		
		//EnumDefinition
		public RuleCall getEnumsEnumDefinitionParserRuleCall_2_2_0() { return cEnumsEnumDefinitionParserRuleCall_2_2_0; }
		
		//variables+=VariableDeclaration ";"
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_2_3_0() { return cVariablesAssignment_2_3_0; }
		
		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_2_3_0_0() { return cVariablesVariableDeclarationParserRuleCall_2_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2_3_1() { return cSemicolonKeyword_2_3_1; }
		
		//modifiers+=Modifier
		public Assignment getModifiersAssignment_2_4() { return cModifiersAssignment_2_4; }
		
		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_2_4_0() { return cModifiersModifierParserRuleCall_2_4_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_2_5() { return cEventsAssignment_2_5; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_2_5_0() { return cEventsEventParserRuleCall_2_5_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class InheritanceSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.InheritanceSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSuperTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cSuperTypeContractOrLibraryCrossReference_0_0 = (CrossReference)cSuperTypeAssignment_0.eContents().get(0);
		private final RuleCall cSuperTypeContractOrLibraryIDTerminalRuleCall_0_0_1 = (RuleCall)cSuperTypeContractOrLibraryCrossReference_0_0.eContents().get(1);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsFunctionCallListArgumentsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//InheritanceSpecifier:
		//	superType=[ContractOrLibrary] args=FunctionCallListArguments?;
		@Override public ParserRule getRule() { return rule; }
		
		//superType=[ContractOrLibrary] args=FunctionCallListArguments?
		public Group getGroup() { return cGroup; }
		
		//superType=[ContractOrLibrary]
		public Assignment getSuperTypeAssignment_0() { return cSuperTypeAssignment_0; }
		
		//[ContractOrLibrary]
		public CrossReference getSuperTypeContractOrLibraryCrossReference_0_0() { return cSuperTypeContractOrLibraryCrossReference_0_0; }
		
		//ID
		public RuleCall getSuperTypeContractOrLibraryIDTerminalRuleCall_0_0_1() { return cSuperTypeContractOrLibraryIDTerminalRuleCall_0_0_1; }
		
		//args=FunctionCallListArguments?
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//FunctionCallListArguments
		public RuleCall getArgsFunctionCallListArgumentsParserRuleCall_1_0() { return cArgsFunctionCallListArgumentsParserRuleCall_1_0; }
	}
	public class FunctionCallListArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.FunctionCallListArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFunctionCallListArgumentsAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCallListArguments:
		//	"(" {FunctionCallListArguments} (arguments+=Expression ("," arguments+=Expression)*)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {FunctionCallListArguments} (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{FunctionCallListArguments}
		public Action getFunctionCallListArgumentsAction_1() { return cFunctionCallListArgumentsAction_1; }
		
		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }
		
		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }
		
		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class FunctionCallArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.FunctionCallArguments");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Action cFunctionCallArgumentsAction_0_2 = (Action)cGroup_0.eContents().get(2);
		private final Group cGroup_0_3 = (Group)cGroup_0.eContents().get(3);
		private final Assignment cArgsAssignment_0_3_0 = (Assignment)cGroup_0_3.eContents().get(0);
		private final RuleCall cArgsFunctionCallArgParserRuleCall_0_3_0_0 = (RuleCall)cArgsAssignment_0_3_0.eContents().get(0);
		private final Group cGroup_0_3_1 = (Group)cGroup_0_3.eContents().get(1);
		private final Keyword cCommaKeyword_0_3_1_0 = (Keyword)cGroup_0_3_1.eContents().get(0);
		private final Assignment cArgsAssignment_0_3_1_1 = (Assignment)cGroup_0_3_1.eContents().get(1);
		private final RuleCall cArgsFunctionCallArgParserRuleCall_0_3_1_1_0 = (RuleCall)cArgsAssignment_0_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final RuleCall cFunctionCallListArgumentsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// call({arg1: 1, arg2: 2})
		//FunctionCallArguments:
		//	"("
		//	"{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)?
		//	"}"
		//	")" | FunctionCallListArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")" |
		//FunctionCallListArguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"(" "{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)? "}" ")"
		public Group getGroup_0() { return cGroup_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }
		
		//{FunctionCallArguments}
		public Action getFunctionCallArgumentsAction_0_2() { return cFunctionCallArgumentsAction_0_2; }
		
		//(args+=FunctionCallArg ("," args+=FunctionCallArg)*)?
		public Group getGroup_0_3() { return cGroup_0_3; }
		
		//args+=FunctionCallArg
		public Assignment getArgsAssignment_0_3_0() { return cArgsAssignment_0_3_0; }
		
		//FunctionCallArg
		public RuleCall getArgsFunctionCallArgParserRuleCall_0_3_0_0() { return cArgsFunctionCallArgParserRuleCall_0_3_0_0; }
		
		//("," args+=FunctionCallArg)*
		public Group getGroup_0_3_1() { return cGroup_0_3_1; }
		
		//","
		public Keyword getCommaKeyword_0_3_1_0() { return cCommaKeyword_0_3_1_0; }
		
		//args+=FunctionCallArg
		public Assignment getArgsAssignment_0_3_1_1() { return cArgsAssignment_0_3_1_1; }
		
		//FunctionCallArg
		public RuleCall getArgsFunctionCallArgParserRuleCall_0_3_1_1_0() { return cArgsFunctionCallArgParserRuleCall_0_3_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_0_4() { return cRightCurlyBracketKeyword_0_4; }
		
		//")"
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//FunctionCallListArguments
		public RuleCall getFunctionCallListArgumentsParserRuleCall_1() { return cFunctionCallListArgumentsParserRuleCall_1; }
	}
	public class FunctionCallArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.FunctionCallArg");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_2_0 = (RuleCall)cExprAssignment_2.eContents().get(0);
		
		//FunctionCallArg:
		//	name=ID ":" expr=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" expr=Expression
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_2() { return cExprAssignment_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_2_0() { return cExprExpressionParserRuleCall_2_0; }
	}
	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFunctionDefinitionAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cParametersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersParameterListParserRuleCall_3_0 = (RuleCall)cParametersAssignment_3.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_4_0 = (RuleCall)cOptionalElementsAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cReturnsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cReturnParametersAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cReturnParametersReturnsParameterListParserRuleCall_5_1_0 = (RuleCall)cReturnParametersAssignment_5_1.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cBlockAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_6_0_0 = (RuleCall)cBlockAssignment_6_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//// Anonymous function allowed when "name" is not specified.
		//FunctionDefinition:
		//	"function" {FunctionDefinition} name=ID? parameters=ParameterList
		//	optionalElements+=FunctionDefinitionOptionalElement* ("returns" returnParameters=ReturnsParameterList)? (block=Block
		//	|
		//	";");
		@Override public ParserRule getRule() { return rule; }
		
		//"function" {FunctionDefinition} name=ID? parameters=ParameterList optionalElements+=FunctionDefinitionOptionalElement*
		//("returns" returnParameters=ReturnsParameterList)? (block=Block | ";")
		public Group getGroup() { return cGroup; }
		
		//"function"
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//{FunctionDefinition}
		public Action getFunctionDefinitionAction_1() { return cFunctionDefinitionAction_1; }
		
		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//parameters=ParameterList
		public Assignment getParametersAssignment_3() { return cParametersAssignment_3; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_3_0() { return cParametersParameterListParserRuleCall_3_0; }
		
		//optionalElements+=FunctionDefinitionOptionalElement*
		public Assignment getOptionalElementsAssignment_4() { return cOptionalElementsAssignment_4; }
		
		//FunctionDefinitionOptionalElement
		public RuleCall getOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_4_0() { return cOptionalElementsFunctionDefinitionOptionalElementParserRuleCall_4_0; }
		
		//("returns" returnParameters=ReturnsParameterList)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"returns"
		public Keyword getReturnsKeyword_5_0() { return cReturnsKeyword_5_0; }
		
		//returnParameters=ReturnsParameterList
		public Assignment getReturnParametersAssignment_5_1() { return cReturnParametersAssignment_5_1; }
		
		//ReturnsParameterList
		public RuleCall getReturnParametersReturnsParameterListParserRuleCall_5_1_0() { return cReturnParametersReturnsParameterListParserRuleCall_5_1_0; }
		
		//(block=Block | ";")
		public Alternatives getAlternatives_6() { return cAlternatives_6; }
		
		//block=Block
		public Assignment getBlockAssignment_6_0() { return cBlockAssignment_6_0; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_6_0_0() { return cBlockBlockParserRuleCall_6_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_6_1() { return cSemicolonKeyword_6_1; }
	}
	public class FunctionDefinitionOptionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.FunctionDefinitionOptionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cModifierInvocationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVisibilitySpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//FunctionDefinitionOptionalElement:
		//	Const | ModifierInvocation | VisibilitySpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//Const | ModifierInvocation | VisibilitySpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Const
		public RuleCall getConstParserRuleCall_0() { return cConstParserRuleCall_0; }
		
		//ModifierInvocation
		public RuleCall getModifierInvocationParserRuleCall_1() { return cModifierInvocationParserRuleCall_1; }
		
		//VisibilitySpecifier
		public RuleCall getVisibilitySpecifierParserRuleCall_2() { return cVisibilitySpecifierParserRuleCall_2; }
	}
	public class ConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Const");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstAction_1 = (Action)cGroup.eContents().get(1);
		
		//Const:
		//	"constant" {Const};
		@Override public ParserRule getRule() { return rule; }
		
		//"constant" {Const}
		public Group getGroup() { return cGroup; }
		
		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//{Const}
		public Action getConstAction_1() { return cConstAction_1; }
	}
	public class VisibilitySpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.VisibilitySpecifier");
		private final Assignment cVisibilityAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVisibilityVisibilityEnumEnumRuleCall_0 = (RuleCall)cVisibilityAssignment.eContents().get(0);
		
		//VisibilitySpecifier:
		//	visibility=VisibilityEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//visibility=VisibilityEnum
		public Assignment getVisibilityAssignment() { return cVisibilityAssignment; }
		
		//VisibilityEnum
		public RuleCall getVisibilityVisibilityEnumEnumRuleCall_0() { return cVisibilityVisibilityEnumEnumRuleCall_0; }
	}
	public class StructDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.StructDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMembersVariableDeclarationParserRuleCall_3_0_0 = (RuleCall)cMembersAssignment_3_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StructDefinition:
		//	"struct" name=ID "{" (members+=VariableDeclaration ";")*
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" name=ID "{" (members+=VariableDeclaration ";")* "}"
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(members+=VariableDeclaration ";")*
		public Group getGroup_3() { return cGroup_3; }
		
		//members+=VariableDeclaration
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }
		
		//VariableDeclaration
		public RuleCall getMembersVariableDeclarationParserRuleCall_3_0_0() { return cMembersVariableDeclarationParserRuleCall_3_0_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.EnumDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cMembersAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cMembersEnumValueParserRuleCall_3_0_0 = (RuleCall)cMembersAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cMembersAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cMembersEnumValueParserRuleCall_3_1_1_0 = (RuleCall)cMembersAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDefinition:
		//	"enum" name=ID "{" (members+=EnumValue ("," members+=EnumValue)*)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"enum" name=ID "{" (members+=EnumValue ("," members+=EnumValue)*)? "}"
		public Group getGroup() { return cGroup; }
		
		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(members+=EnumValue ("," members+=EnumValue)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//members+=EnumValue
		public Assignment getMembersAssignment_3_0() { return cMembersAssignment_3_0; }
		
		//EnumValue
		public RuleCall getMembersEnumValueParserRuleCall_3_0_0() { return cMembersEnumValueParserRuleCall_3_0_0; }
		
		//("," members+=EnumValue)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//members+=EnumValue
		public Assignment getMembersAssignment_3_1_1() { return cMembersAssignment_3_1_1; }
		
		//EnumValue
		public RuleCall getMembersEnumValueParserRuleCall_3_1_1_0() { return cMembersEnumValueParserRuleCall_3_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class EnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.EnumValue");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EnumValue:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Variable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Variable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarVariableDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVarVariableTupleVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// Variable Declarations
		//VariableDeclaration Statement:
		//	StandardVariableDeclaration | VarVariableDeclaration | VarVariableTupleVariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardVariableDeclaration | VarVariableDeclaration | VarVariableTupleVariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardVariableDeclaration
		public RuleCall getStandardVariableDeclarationParserRuleCall_0() { return cStandardVariableDeclarationParserRuleCall_0; }
		
		//VarVariableDeclaration
		public RuleCall getVarVariableDeclarationParserRuleCall_1() { return cVarVariableDeclarationParserRuleCall_1; }
		
		//VarVariableTupleVariableDeclaration
		public RuleCall getVarVariableTupleVariableDeclarationParserRuleCall_2() { return cVarVariableTupleVariableDeclarationParserRuleCall_2; }
	}
	public class StandardVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.StandardVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeStandardTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_1_0 = (RuleCall)cOptionalElementsAssignment_1.eContents().get(0);
		private final Assignment cVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_2_0 = (RuleCall)cVariableAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cExpressionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_3_1_0 = (RuleCall)cExpressionAssignment_3_1.eContents().get(0);
		
		//StandardVariableDeclaration:
		//	type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//	expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//type=StandardType
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//StandardType
		public RuleCall getTypeStandardTypeParserRuleCall_0_0() { return cTypeStandardTypeParserRuleCall_0_0; }
		
		//optionalElements+=VariableDeclarationOptionalElement*
		public Assignment getOptionalElementsAssignment_1() { return cOptionalElementsAssignment_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_1_0() { return cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_2() { return cVariableAssignment_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_2_0() { return cVariableVariableParserRuleCall_2_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_3() { return cGroup_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3_1() { return cExpressionAssignment_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_1_0() { return cExpressionExpressionParserRuleCall_3_1_0; }
	}
	public class VarVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.VarVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarTypeVarTypeParserRuleCall_0_0 = (RuleCall)cVarTypeAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//VarVariableDeclaration:
		//	varType=VarType variable=Variable ("=" expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//varType=VarType variable=Variable ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//varType=VarType
		public Assignment getVarTypeAssignment_0() { return cVarTypeAssignment_0; }
		
		//VarType
		public RuleCall getVarTypeVarTypeParserRuleCall_0_0() { return cVarTypeVarTypeParserRuleCall_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class VarVariableTupleVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.VarVariableTupleVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVarTypeVarTypeParserRuleCall_0_0 = (RuleCall)cVarTypeAssignment_0.eContents().get(0);
		private final Assignment cTupleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_1_0 = (RuleCall)cTupleAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		
		//VarVariableTupleVariableDeclaration:
		//	varType=VarType tuple=Tuple ("=" expression=Expression)?;
		@Override public ParserRule getRule() { return rule; }
		
		//varType=VarType tuple=Tuple ("=" expression=Expression)?
		public Group getGroup() { return cGroup; }
		
		//varType=VarType
		public Assignment getVarTypeAssignment_0() { return cVarTypeAssignment_0; }
		
		//VarType
		public RuleCall getVarTypeVarTypeParserRuleCall_0_0() { return cVarTypeVarTypeParserRuleCall_0_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_1() { return cTupleAssignment_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_0() { return cTupleTupleParserRuleCall_1_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_2_0() { return cEqualsSignKeyword_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }
	}
	public class VariableDeclarationOptionalElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.VariableDeclarationOptionalElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVisibilitySpecifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexedSpeciferParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstantSpecifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLocationSpecifierParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//VariableDeclarationOptionalElement:
		//	VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier;
		@Override public ParserRule getRule() { return rule; }
		
		//VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VisibilitySpecifier
		public RuleCall getVisibilitySpecifierParserRuleCall_0() { return cVisibilitySpecifierParserRuleCall_0; }
		
		//IndexedSpecifer
		public RuleCall getIndexedSpeciferParserRuleCall_1() { return cIndexedSpeciferParserRuleCall_1; }
		
		//ConstantSpecifier
		public RuleCall getConstantSpecifierParserRuleCall_2() { return cConstantSpecifierParserRuleCall_2; }
		
		//LocationSpecifier
		public RuleCall getLocationSpecifierParserRuleCall_3() { return cLocationSpecifierParserRuleCall_3; }
	}
	public class IndexedSpeciferElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.IndexedSpecifer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIndexedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIndexedSpeciferAction_1 = (Action)cGroup.eContents().get(1);
		
		//IndexedSpecifer:
		//	"indexed" {IndexedSpecifer};
		@Override public ParserRule getRule() { return rule; }
		
		//"indexed" {IndexedSpecifer}
		public Group getGroup() { return cGroup; }
		
		//"indexed"
		public Keyword getIndexedKeyword_0() { return cIndexedKeyword_0; }
		
		//{IndexedSpecifer}
		public Action getIndexedSpeciferAction_1() { return cIndexedSpeciferAction_1; }
	}
	public class ConstantSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ConstantSpecifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cConstantSpecifierAction_1 = (Action)cGroup.eContents().get(1);
		
		//ConstantSpecifier:
		//	"constant" {ConstantSpecifier};
		@Override public ParserRule getRule() { return rule; }
		
		//"constant" {ConstantSpecifier}
		public Group getGroup() { return cGroup; }
		
		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }
		
		//{ConstantSpecifier}
		public Action getConstantSpecifierAction_1() { return cConstantSpecifierAction_1; }
	}
	public class LocationSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.LocationSpecifier");
		private final Assignment cLocationAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLocationLocationSpecifierEnumEnumRuleCall_0 = (RuleCall)cLocationAssignment.eContents().get(0);
		
		//LocationSpecifier:
		//	location=LocationSpecifierEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//location=LocationSpecifierEnum
		public Assignment getLocationAssignment() { return cLocationAssignment; }
		
		//LocationSpecifierEnum
		public RuleCall getLocationLocationSpecifierEnumEnumRuleCall_0() { return cLocationLocationSpecifierEnumEnumRuleCall_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStandardTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Assignment cIsVarTypeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIsVarTypeVarTypeParserRuleCall_1_0 = (RuleCall)cIsVarTypeAssignment_1.eContents().get(0);
		
		//// Types
		//Type:
		//	StandardType | isVarType?=VarType;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardType | isVarType?=VarType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardType
		public RuleCall getStandardTypeParserRuleCall_0() { return cStandardTypeParserRuleCall_0; }
		
		//isVarType?=VarType
		public Assignment getIsVarTypeAssignment_1() { return cIsVarTypeAssignment_1; }
		
		//VarType
		public RuleCall getIsVarTypeVarTypeParserRuleCall_1_0() { return cIsVarTypeVarTypeParserRuleCall_1_0; }
	}
	public class StandardTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.StandardType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDimensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionsParserRuleCall_0_1_0 = (RuleCall)cDimensionAssignment_0_1.eContents().get(0);
		private final RuleCall cMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cQualifiedIdentifierParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//StandardType:
		//	ElementaryType dimension=ArrayDimensions? | Mapping | QualifiedIdentifier;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementaryType dimension=ArrayDimensions? | Mapping | QualifiedIdentifier
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementaryType dimension=ArrayDimensions?
		public Group getGroup_0() { return cGroup_0; }
		
		//ElementaryType
		public RuleCall getElementaryTypeParserRuleCall_0_0() { return cElementaryTypeParserRuleCall_0_0; }
		
		//dimension=ArrayDimensions?
		public Assignment getDimensionAssignment_0_1() { return cDimensionAssignment_0_1; }
		
		//ArrayDimensions
		public RuleCall getDimensionArrayDimensionsParserRuleCall_0_1_0() { return cDimensionArrayDimensionsParserRuleCall_0_1_0; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_1() { return cMappingParserRuleCall_1; }
		
		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_2() { return cQualifiedIdentifierParserRuleCall_2; }
	}
	public class StandardTypeWithoutQualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.StandardTypeWithoutQualifiedIdentifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cElementaryTypeParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Assignment cDimensionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDimensionArrayDimensionsParserRuleCall_0_1_0 = (RuleCall)cDimensionAssignment_0_1.eContents().get(0);
		private final RuleCall cMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StandardTypeWithoutQualifiedIdentifier:
		//	ElementaryType dimension=ArrayDimensions? | Mapping;
		@Override public ParserRule getRule() { return rule; }
		
		//ElementaryType dimension=ArrayDimensions? | Mapping
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ElementaryType dimension=ArrayDimensions?
		public Group getGroup_0() { return cGroup_0; }
		
		//ElementaryType
		public RuleCall getElementaryTypeParserRuleCall_0_0() { return cElementaryTypeParserRuleCall_0_0; }
		
		//dimension=ArrayDimensions?
		public Assignment getDimensionAssignment_0_1() { return cDimensionAssignment_0_1; }
		
		//ArrayDimensions
		public RuleCall getDimensionArrayDimensionsParserRuleCall_0_1_0() { return cDimensionArrayDimensionsParserRuleCall_0_1_0; }
		
		//Mapping
		public RuleCall getMappingParserRuleCall_1() { return cMappingParserRuleCall_1; }
	}
	public class ElementaryTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ElementaryType");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameElementaryTypeNameEnumEnumRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ElementaryType:
		//	name=ElementaryTypeNameEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ElementaryTypeNameEnum
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ElementaryTypeNameEnum
		public RuleCall getNameElementaryTypeNameEnumEnumRuleCall_0() { return cNameElementaryTypeNameEnumEnumRuleCall_0; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cKeyTypeElementaryTypeNameEnumEnumRuleCall_2_0 = (RuleCall)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueTypeTypeParserRuleCall_4_0 = (RuleCall)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mapping:
		//	"mapping" "("
		//	keyType=ElementaryTypeNameEnum "=>" valueType=Type
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"mapping" "(" keyType=ElementaryTypeNameEnum "=>" valueType=Type ")"
		public Group getGroup() { return cGroup; }
		
		//"mapping"
		public Keyword getMappingKeyword_0() { return cMappingKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//keyType=ElementaryTypeNameEnum
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }
		
		//ElementaryTypeNameEnum
		public RuleCall getKeyTypeElementaryTypeNameEnumEnumRuleCall_2_0() { return cKeyTypeElementaryTypeNameEnumEnumRuleCall_2_0; }
		
		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }
		
		//valueType=Type
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }
		
		//Type
		public RuleCall getValueTypeTypeParserRuleCall_4_0() { return cValueTypeTypeParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ArrayDimensionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ArrayDimensions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cArrayDimensionsAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_4_1_0 = (RuleCall)cValueAssignment_4_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ArrayDimensions:
		//	"[" {ArrayDimensions} value+=Expression? "]" ("[" value+=Expression? "]")*;
		@Override public ParserRule getRule() { return rule; }
		
		//"[" {ArrayDimensions} value+=Expression? "]" ("[" value+=Expression? "]")*
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{ArrayDimensions}
		public Action getArrayDimensionsAction_1() { return cArrayDimensionsAction_1; }
		
		//value+=Expression?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
		
		//("[" value+=Expression? "]")*
		public Group getGroup_4() { return cGroup_4; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }
		
		//value+=Expression?
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_1_0() { return cValueExpressionParserRuleCall_4_1_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_4_2() { return cRightSquareBracketKeyword_4_2; }
	}
	public class VarTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.VarType");
		private final Keyword cVarKeyword = (Keyword)rule.eContents().get(1);
		
		//VarType:
		//	"var";
		@Override public ParserRule getRule() { return rule; }
		
		//"var"
		public Keyword getVarKeyword() { return cVarKeyword; }
	}
	public class TupleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Tuple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cMembersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cMembersExpressionParserRuleCall_2_0_0 = (RuleCall)cMembersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cMembersAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cMembersTupleSeparatorParserRuleCall_2_1_0_0 = (RuleCall)cMembersAssignment_2_1_0.eContents().get(0);
		private final Assignment cMembersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_2_1_1_0 = (RuleCall)cMembersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// Tuples
		//Tuple:
		//	"(" {Tuple} (members+=Expression? (members+=TupleSeparator members+=Expression?)+)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {Tuple} (members+=Expression? (members+=TupleSeparator members+=Expression?)+)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{Tuple}
		public Action getTupleAction_1() { return cTupleAction_1; }
		
		//(members+=Expression? (members+=TupleSeparator members+=Expression?)+)?
		public Group getGroup_2() { return cGroup_2; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_2_0() { return cMembersAssignment_2_0; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_2_0_0() { return cMembersExpressionParserRuleCall_2_0_0; }
		
		//(members+=TupleSeparator members+=Expression?)+
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//members+=TupleSeparator
		public Assignment getMembersAssignment_2_1_0() { return cMembersAssignment_2_1_0; }
		
		//TupleSeparator
		public RuleCall getMembersTupleSeparatorParserRuleCall_2_1_0_0() { return cMembersTupleSeparatorParserRuleCall_2_1_0_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_2_1_1() { return cMembersAssignment_2_1_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_2_1_1_0() { return cMembersExpressionParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TupleSeparatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.TupleSeparator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cTupleSeparatorAction_1 = (Action)cGroup.eContents().get(1);
		
		//TupleSeparator:
		//	"," {TupleSeparator};
		@Override public ParserRule getRule() { return rule; }
		
		//"," {TupleSeparator}
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//{TupleSeparator}
		public Action getTupleSeparatorAction_1() { return cTupleSeparatorAction_1; }
	}
	public class SimpleStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SimpleStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final Group cGroup_0_0_1 = (Group)cGroup_0_0.eContents().get(1);
		private final Action cStandardVariableDeclarationTypeAction_0_0_1_0 = (Action)cGroup_0_0_1.eContents().get(0);
		private final Assignment cPtionalElementsAssignment_0_0_1_1 = (Assignment)cGroup_0_0_1.eContents().get(1);
		private final RuleCall cPtionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0 = (RuleCall)cPtionalElementsAssignment_0_0_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_0_1_2 = (Assignment)cGroup_0_0_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_0_0_1_2_0 = (RuleCall)cVariableAssignment_0_0_1_2.eContents().get(0);
		private final Group cGroup_0_0_1_3 = (Group)cGroup_0_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_0_1_3_0 = (Keyword)cGroup_0_0_1_3.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0_1_3_1 = (Assignment)cGroup_0_0_1_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0_1_3_1_0 = (RuleCall)cExpressionAssignment_0_0_1_3_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cVarTypeParserRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final Alternatives cAlternatives_0_1_1 = (Alternatives)cGroup_0_1.eContents().get(1);
		private final Group cGroup_0_1_1_0 = (Group)cAlternatives_0_1_1.eContents().get(0);
		private final Action cVarVariableTypeDeclarationAction_0_1_1_0_0 = (Action)cGroup_0_1_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_1_0_1 = (Assignment)cGroup_0_1_1_0.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_0_1_1_0_1_0 = (RuleCall)cVariableAssignment_0_1_1_0_1.eContents().get(0);
		private final Group cGroup_0_1_1_0_2 = (Group)cGroup_0_1_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_0_1_1_0_2_0 = (Keyword)cGroup_0_1_1_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1_0_2_1 = (Assignment)cGroup_0_1_1_0_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_0_2_1_0 = (RuleCall)cExpressionAssignment_0_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_0_1_1_1 = (Group)cAlternatives_0_1_1.eContents().get(1);
		private final Action cVarVariableTupleVariableDeclarationAction_0_1_1_1_0 = (Action)cGroup_0_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_0_1_1_1_1 = (Assignment)cGroup_0_1_1_1.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_0_1_1_1_1_0 = (RuleCall)cTupleAssignment_0_1_1_1_1.eContents().get(0);
		private final Group cGroup_0_1_1_1_2 = (Group)cGroup_0_1_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_0_1_1_1_2_0 = (Keyword)cGroup_0_1_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1_1_2_1 = (Assignment)cGroup_0_1_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_1_1_2_1_0 = (RuleCall)cExpressionAssignment_0_1_1_1_2_1.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Assignment cSemicolonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cSemicolonSemicolonKeyword_1_0 = (Keyword)cSemicolonAssignment_1.eContents().get(0);
		
		//// SimpleStatement
		////---------------------
		////SimpleStatement:
		////     SimpleStatement2 ";"
		////;
		//SimpleStatement:
		//	(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//	ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement) semicolon?=";";
		@Override public ParserRule getRule() { return rule; }
		
		//(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression)) | ExpressionStatement) semicolon?=";"
		public Group getGroup() { return cGroup; }
		
		//(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression)) | ExpressionStatement)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?)
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//StandardTypeWithoutQualifiedIdentifier
		public RuleCall getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0() { return cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0_0; }
		
		//({StandardVariableDeclaration.type=current} ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//expression=Expression)?)
		public Group getGroup_0_0_1() { return cGroup_0_0_1; }
		
		//{StandardVariableDeclaration.type=current}
		public Action getStandardVariableDeclarationTypeAction_0_0_1_0() { return cStandardVariableDeclarationTypeAction_0_0_1_0; }
		
		//ptionalElements+=VariableDeclarationOptionalElement*
		public Assignment getPtionalElementsAssignment_0_0_1_1() { return cPtionalElementsAssignment_0_0_1_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getPtionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0() { return cPtionalElementsVariableDeclarationOptionalElementParserRuleCall_0_0_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_0_1_2() { return cVariableAssignment_0_0_1_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_0_1_2_0() { return cVariableVariableParserRuleCall_0_0_1_2_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_0_0_1_3() { return cGroup_0_0_1_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_1_3_0() { return cEqualsSignKeyword_0_0_1_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_0_1_3_1() { return cExpressionAssignment_0_0_1_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0_1_3_1_0() { return cExpressionExpressionParserRuleCall_0_0_1_3_1_0; }
		
		//VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression))
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//VarType
		public RuleCall getVarTypeParserRuleCall_0_1_0() { return cVarTypeParserRuleCall_0_1_0; }
		
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression))
		public Alternatives getAlternatives_0_1_1() { return cAlternatives_0_1_1; }
		
		//{VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression)
		public Group getGroup_0_1_1_0() { return cGroup_0_1_1_0; }
		
		//{VarVariableTypeDeclaration}
		public Action getVarVariableTypeDeclarationAction_0_1_1_0_0() { return cVarVariableTypeDeclarationAction_0_1_1_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_1_1_0_1() { return cVariableAssignment_0_1_1_0_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_1_0_1_0() { return cVariableVariableParserRuleCall_0_1_1_0_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_0_1_1_0_2() { return cGroup_0_1_1_0_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1_0_2_0() { return cEqualsSignKeyword_0_1_1_0_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1_0_2_1() { return cExpressionAssignment_0_1_1_0_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_0_2_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_0_2_1_0; }
		
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression)
		public Group getGroup_0_1_1_1() { return cGroup_0_1_1_1; }
		
		//{VarVariableTupleVariableDeclaration}
		public Action getVarVariableTupleVariableDeclarationAction_0_1_1_1_0() { return cVarVariableTupleVariableDeclarationAction_0_1_1_1_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_0_1_1_1_1() { return cTupleAssignment_0_1_1_1_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_0_1_1_1_1_0() { return cTupleTupleParserRuleCall_0_1_1_1_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_0_1_1_1_2() { return cGroup_0_1_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1_1_2_0() { return cEqualsSignKeyword_0_1_1_1_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_1_1_2_1() { return cExpressionAssignment_0_1_1_1_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_0_1_1_1_2_1_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0_2() { return cExpressionStatementParserRuleCall_0_2; }
		
		//semicolon?=";"
		public Assignment getSemicolonAssignment_1() { return cSemicolonAssignment_1; }
		
		//";"
		public Keyword getSemicolonSemicolonKeyword_1_0() { return cSemicolonSemicolonKeyword_1_0; }
	}
	public class SimpleStatement2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SimpleStatement2");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cStandardVariableDeclarationTypeAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOptionalElementsAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0 = (RuleCall)cOptionalElementsAssignment_0_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cVariableVariableParserRuleCall_0_1_2_0 = (RuleCall)cVariableAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_0_1_3 = (Group)cGroup_0_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_0_1_3_0 = (Keyword)cGroup_0_1_3.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_3_1 = (Assignment)cGroup_0_1_3.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0_1_3_1_0 = (RuleCall)cExpressionAssignment_0_1_3_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVarTypeParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cVarVariableTypeDeclarationAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Assignment cVariableAssignment_1_1_0_1 = (Assignment)cGroup_1_1_0.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_1_0_1_0 = (RuleCall)cVariableAssignment_1_1_0_1.eContents().get(0);
		private final Group cGroup_1_1_0_2 = (Group)cGroup_1_1_0.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_0_2_0 = (Keyword)cGroup_1_1_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_0_2_1 = (Assignment)cGroup_1_1_0_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_0_2_1_0 = (RuleCall)cExpressionAssignment_1_1_0_2_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cVarVariableTupleVariableDeclarationAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Assignment cTupleAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cTupleTupleParserRuleCall_1_1_1_1_0 = (RuleCall)cTupleAssignment_1_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1_2_1 = (Assignment)cGroup_1_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_1_2_1.eContents().get(0);
		private final RuleCall cExpressionStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SimpleStatement2:
		//	StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression)) | ExpressionStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
		//optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?)
		public Group getGroup_0() { return cGroup_0; }
		
		//StandardTypeWithoutQualifiedIdentifier
		public RuleCall getStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0() { return cStandardTypeWithoutQualifiedIdentifierParserRuleCall_0_0; }
		
		//({StandardVariableDeclaration.type=current} optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
		//expression=Expression)?)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//{StandardVariableDeclaration.type=current}
		public Action getStandardVariableDeclarationTypeAction_0_1_0() { return cStandardVariableDeclarationTypeAction_0_1_0; }
		
		//optionalElements+=VariableDeclarationOptionalElement*
		public Assignment getOptionalElementsAssignment_0_1_1() { return cOptionalElementsAssignment_0_1_1; }
		
		//VariableDeclarationOptionalElement
		public RuleCall getOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0() { return cOptionalElementsVariableDeclarationOptionalElementParserRuleCall_0_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_0_1_2() { return cVariableAssignment_0_1_2; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_0_1_2_0() { return cVariableVariableParserRuleCall_0_1_2_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_0_1_3() { return cGroup_0_1_3; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_3_0() { return cEqualsSignKeyword_0_1_3_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_1_3_1() { return cExpressionAssignment_0_1_3_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_1_3_1_0() { return cExpressionExpressionParserRuleCall_0_1_3_1_0; }
		
		//VarType ({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) |
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression))
		public Group getGroup_1() { return cGroup_1; }
		
		//VarType
		public RuleCall getVarTypeParserRuleCall_1_0() { return cVarTypeParserRuleCall_1_0; }
		
		//({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
		//tuple=Tuple ("=" expression=Expression))
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//{VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression)
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }
		
		//{VarVariableTypeDeclaration}
		public Action getVarVariableTypeDeclarationAction_1_1_0_0() { return cVarVariableTypeDeclarationAction_1_1_0_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_1_0_1() { return cVariableAssignment_1_1_0_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_0_1_0() { return cVariableVariableParserRuleCall_1_1_0_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_1_1_0_2() { return cGroup_1_1_0_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_0_2_0() { return cEqualsSignKeyword_1_1_0_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1_0_2_1() { return cExpressionAssignment_1_1_0_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_0_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_0_2_1_0; }
		
		//{VarVariableTupleVariableDeclaration} tuple=Tuple ("=" expression=Expression)
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//{VarVariableTupleVariableDeclaration}
		public Action getVarVariableTupleVariableDeclarationAction_1_1_1_0() { return cVarVariableTupleVariableDeclarationAction_1_1_1_0; }
		
		//tuple=Tuple
		public Assignment getTupleAssignment_1_1_1_1() { return cTupleAssignment_1_1_1_1; }
		
		//Tuple
		public RuleCall getTupleTupleParserRuleCall_1_1_1_1_0() { return cTupleTupleParserRuleCall_1_1_1_1_0; }
		
		//("=" expression=Expression)
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_1_2_0() { return cEqualsSignKeyword_1_1_1_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1_1_2_1() { return cExpressionAssignment_1_1_1_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_2_1_0; }
		
		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_2() { return cExpressionStatementParserRuleCall_2; }
	}
	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ExpressionStatement");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ExpressionStatement:
		//	expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=Expression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0() { return cExpressionExpressionParserRuleCall_0; }
	}
	public class QualifiedIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.QualifiedIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cQualifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cQualifiersQualifierParserRuleCall_1_0 = (RuleCall)cQualifiersAssignment_1.eContents().get(0);
		
		//QualifiedIdentifier:
		//	identifier=ID qualifiers+=Qualifier*;
		@Override public ParserRule getRule() { return rule; }
		
		//identifier=ID qualifiers+=Qualifier*
		public Group getGroup() { return cGroup; }
		
		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }
		
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }
		
		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_1() { return cQualifiersAssignment_1; }
		
		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_1_0() { return cQualifiersQualifierParserRuleCall_1_0; }
	}
	public class QualifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Qualifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cArgumentsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Qualifier:
		//	Field | Index | Arguments;
		@Override public ParserRule getRule() { return rule; }
		
		//Field | Index | Arguments
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Field
		public RuleCall getFieldParserRuleCall_0() { return cFieldParserRuleCall_0; }
		
		//Index
		public RuleCall getIndexParserRuleCall_1() { return cIndexParserRuleCall_1; }
		
		//Arguments
		public RuleCall getArgumentsParserRuleCall_2() { return cArgumentsParserRuleCall_2; }
	}
	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Field");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldIDTerminalRuleCall_1_0 = (RuleCall)cFieldAssignment_1.eContents().get(0);
		
		//Field:
		//	"." field=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"." field=ID
		public Group getGroup() { return cGroup; }
		
		//"."
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//field=ID
		public Assignment getFieldAssignment_1() { return cFieldAssignment_1; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_1_0() { return cFieldIDTerminalRuleCall_1_0; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIndexAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Index:
		//	"[" {Index} value=Expression? "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" {Index} value=Expression? "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//{Index}
		public Action getIndexAction_1() { return cIndexAction_1; }
		
		//value=Expression?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Arguments");
		private final Assignment cArgumentsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cArgumentsFunctionCallArgumentsParserRuleCall_0 = (RuleCall)cArgumentsAssignment.eContents().get(0);
		
		//Arguments:
		//	arguments=FunctionCallArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//arguments=FunctionCallArguments
		public Assignment getArgumentsAssignment() { return cArgumentsAssignment; }
		
		//FunctionCallArguments
		public RuleCall getArgumentsFunctionCallArgumentsParserRuleCall_0() { return cArgumentsFunctionCallArgumentsParserRuleCall_0; }
	}
	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Modifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModifierKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		
		//Modifier:
		//	"modifier" name=ID parameters=ParameterList? block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//"modifier" name=ID parameters=ParameterList? block=Block
		public Group getGroup() { return cGroup; }
		
		//"modifier"
		public Keyword getModifierKeyword_0() { return cModifierKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//block=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEventKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterListParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Assignment cIsAnonymousAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cIsAnonymousAnonymousKeyword_3_0 = (Keyword)cIsAnonymousAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Event:
		//	"event" name=ID parameters=ParameterList? isAnonymous?="anonymous"? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"event" name=ID parameters=ParameterList? isAnonymous?="anonymous"? ";"
		public Group getGroup() { return cGroup; }
		
		//"event"
		public Keyword getEventKeyword_0() { return cEventKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//parameters=ParameterList?
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }
		
		//ParameterList
		public RuleCall getParametersParameterListParserRuleCall_2_0() { return cParametersParameterListParserRuleCall_2_0; }
		
		//isAnonymous?="anonymous"?
		public Assignment getIsAnonymousAssignment_3() { return cIsAnonymousAssignment_3; }
		
		//"anonymous"
		public Keyword getIsAnonymousAnonymousKeyword_3_0() { return cIsAnonymousAnonymousKeyword_3_0; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ModifierInvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ModifierInvocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameModifierCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameModifierIDTerminalRuleCall_0_0_1 = (RuleCall)cNameModifierCrossReference_0_0.eContents().get(1);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsFunctionCallListArgumentsParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		
		//ModifierInvocation:
		//	name=[Modifier] args=FunctionCallListArguments?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=[Modifier] args=FunctionCallListArguments?
		public Group getGroup() { return cGroup; }
		
		//name=[Modifier]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[Modifier]
		public CrossReference getNameModifierCrossReference_0_0() { return cNameModifierCrossReference_0_0; }
		
		//ID
		public RuleCall getNameModifierIDTerminalRuleCall_0_0_1() { return cNameModifierIDTerminalRuleCall_0_0_1; }
		
		//args=FunctionCallListArguments?
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }
		
		//FunctionCallListArguments
		public RuleCall getArgsFunctionCallListArgumentsParserRuleCall_1_0() { return cArgsFunctionCallListArgumentsParserRuleCall_1_0; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersVariableDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ParameterList:
		//	"(" {ParameterList} (parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {ParameterList} (parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{ParameterList}
		public Action getParameterListAction_1() { return cParameterListAction_1; }
		
		//(parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_2_0_0() { return cParametersVariableDeclarationParserRuleCall_2_0_0; }
		
		//("," parameters+=VariableDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=VariableDeclaration
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//VariableDeclaration
		public RuleCall getParametersVariableDeclarationParserRuleCall_2_1_1_0() { return cParametersVariableDeclarationParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReturnsParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ReturnsParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReturnsParameterListAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParametersReturnParameterDeclarationParserRuleCall_2_0_0 = (RuleCall)cParametersAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParametersReturnParameterDeclarationParserRuleCall_2_1_1_0 = (RuleCall)cParametersAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnsParameterList:
		//	"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//{ReturnsParameterList}
		public Action getReturnsParameterListAction_1() { return cReturnsParameterListAction_1; }
		
		//(parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//parameters+=ReturnParameterDeclaration
		public Assignment getParametersAssignment_2_0() { return cParametersAssignment_2_0; }
		
		//ReturnParameterDeclaration
		public RuleCall getParametersReturnParameterDeclarationParserRuleCall_2_0_0() { return cParametersReturnParameterDeclarationParserRuleCall_2_0_0; }
		
		//("," parameters+=ReturnParameterDeclaration)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//parameters+=ReturnParameterDeclaration
		public Assignment getParametersAssignment_2_1_1() { return cParametersAssignment_2_1_1; }
		
		//ReturnParameterDeclaration
		public RuleCall getParametersReturnParameterDeclarationParserRuleCall_2_1_1_0() { return cParametersReturnParameterDeclarationParserRuleCall_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class ReturnParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ReturnParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeRefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeRefTypeParserRuleCall_0_0 = (RuleCall)cTypeRefAssignment_0.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		
		//ReturnParameterDeclaration:
		//	typeRef=Type variable=Variable?;
		@Override public ParserRule getRule() { return rule; }
		
		//typeRef=Type variable=Variable?
		public Group getGroup() { return cGroup; }
		
		//typeRef=Type
		public Assignment getTypeRefAssignment_0() { return cTypeRefAssignment_0; }
		
		//Type
		public RuleCall getTypeRefTypeParserRuleCall_0_0() { return cTypeRefTypeParserRuleCall_0_0; }
		
		//variable=Variable?
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_0() { return cVariableVariableParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIfStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWhileStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPlaceHolderStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cAlternatives.eContents().get(5);
		private final RuleCall cContinueStatementParserRuleCall_5_0 = (RuleCall)cAlternatives_5.eContents().get(0);
		private final RuleCall cBreakStatementParserRuleCall_5_1 = (RuleCall)cAlternatives_5.eContents().get(1);
		private final RuleCall cReturnStatementParserRuleCall_5_2 = (RuleCall)cAlternatives_5.eContents().get(2);
		private final RuleCall cThrowStatementParserRuleCall_5_3 = (RuleCall)cAlternatives_5.eContents().get(3);
		private final RuleCall cDeleteStatementParserRuleCall_5_4 = (RuleCall)cAlternatives_5.eContents().get(4);
		private final RuleCall cSimpleStatementParserRuleCall_5_5 = (RuleCall)cAlternatives_5.eContents().get(5);
		
		//Statement:
		//	IfStatement | WhileStatement | ForStatement | Block | PlaceHolderStatement | (ContinueStatement | BreakStatement |
		//	ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement);
		@Override public ParserRule getRule() { return rule; }
		
		//IfStatement | WhileStatement | ForStatement | Block | PlaceHolderStatement | (ContinueStatement | BreakStatement |
		//ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IfStatement
		public RuleCall getIfStatementParserRuleCall_0() { return cIfStatementParserRuleCall_0; }
		
		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_1() { return cWhileStatementParserRuleCall_1; }
		
		//ForStatement
		public RuleCall getForStatementParserRuleCall_2() { return cForStatementParserRuleCall_2; }
		
		//Block
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }
		
		//PlaceHolderStatement
		public RuleCall getPlaceHolderStatementParserRuleCall_4() { return cPlaceHolderStatementParserRuleCall_4; }
		
		//(ContinueStatement | BreakStatement | ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_5_0() { return cContinueStatementParserRuleCall_5_0; }
		
		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_5_1() { return cBreakStatementParserRuleCall_5_1; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_5_2() { return cReturnStatementParserRuleCall_5_2; }
		
		//ThrowStatement
		public RuleCall getThrowStatementParserRuleCall_5_3() { return cThrowStatementParserRuleCall_5_3; }
		
		//DeleteStatement
		public RuleCall getDeleteStatementParserRuleCall_5_4() { return cDeleteStatementParserRuleCall_5_4; }
		
		//SimpleStatement
		public RuleCall getSimpleStatementParserRuleCall_5_5() { return cSimpleStatementParserRuleCall_5_5; }
	}
	public class DeleteStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.DeleteStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariableQualifiedIdentifierParserRuleCall_1_0 = (RuleCall)cVariableAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteStatement:
		//	"delete" variable=QualifiedIdentifier ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"delete" variable=QualifiedIdentifier ";"
		public Group getGroup() { return cGroup; }
		
		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }
		
		//variable=QualifiedIdentifier
		public Assignment getVariableAssignment_1() { return cVariableAssignment_1; }
		
		//QualifiedIdentifier
		public RuleCall getVariableQualifiedIdentifierParserRuleCall_1_0() { return cVariableQualifiedIdentifierParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTrueBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTrueBodyStatementParserRuleCall_4_0 = (RuleCall)cTrueBodyAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cFalseBodyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cFalseBodyStatementParserRuleCall_5_1_0 = (RuleCall)cFalseBodyAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	"if" "(" condition=Expression ")"
		//	trueBody=Statement (=> "else" falseBody=Statement)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" "(" condition=Expression ")" trueBody=Statement (=> "else" falseBody=Statement)?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//trueBody=Statement
		public Assignment getTrueBodyAssignment_4() { return cTrueBodyAssignment_4; }
		
		//Statement
		public RuleCall getTrueBodyStatementParserRuleCall_4_0() { return cTrueBodyStatementParserRuleCall_4_0; }
		
		//(=> "else" falseBody=Statement)?
		public Group getGroup_5() { return cGroup_5; }
		
		//=> "else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }
		
		//falseBody=Statement
		public Assignment getFalseBodyAssignment_5_1() { return cFalseBodyAssignment_5_1; }
		
		//Statement
		public RuleCall getFalseBodyStatementParserRuleCall_5_1_0() { return cFalseBodyStatementParserRuleCall_5_1_0; }
	}
	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cConditionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConditionExpressionParserRuleCall_2_0 = (RuleCall)cConditionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//WhileStatement:
		//	"while" "(" condition=Expression ")"
		//	body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"while" "(" condition=Expression ")" body=Statement
		public Group getGroup() { return cGroup; }
		
		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//condition=Expression
		public Assignment getConditionAssignment_2() { return cConditionAssignment_2; }
		
		//Expression
		public RuleCall getConditionExpressionParserRuleCall_2_0() { return cConditionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}
	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cInitExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitExpressionSimpleStatement2ParserRuleCall_2_0 = (RuleCall)cInitExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionExpressionExpressionParserRuleCall_4_0 = (RuleCall)cConditionExpressionAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLoopExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLoopExpressionExpressionStatementParserRuleCall_6_0 = (RuleCall)cLoopExpressionAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyStatementParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=Expression? ";"
		//	loopExpression=ExpressionStatement? ")"
		//	body=Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=Expression? ";"
		//loopExpression=ExpressionStatement? ")" body=Statement
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//initExpression=SimpleStatement2?
		public Assignment getInitExpressionAssignment_2() { return cInitExpressionAssignment_2; }
		
		//SimpleStatement2
		public RuleCall getInitExpressionSimpleStatement2ParserRuleCall_2_0() { return cInitExpressionSimpleStatement2ParserRuleCall_2_0; }
		
		//=> ";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//conditionExpression=Expression?
		public Assignment getConditionExpressionAssignment_4() { return cConditionExpressionAssignment_4; }
		
		//Expression
		public RuleCall getConditionExpressionExpressionParserRuleCall_4_0() { return cConditionExpressionExpressionParserRuleCall_4_0; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
		
		//loopExpression=ExpressionStatement?
		public Assignment getLoopExpressionAssignment_6() { return cLoopExpressionAssignment_6; }
		
		//ExpressionStatement
		public RuleCall getLoopExpressionExpressionStatementParserRuleCall_6_0() { return cLoopExpressionExpressionStatementParserRuleCall_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//body=Statement
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Statement
		public RuleCall getBodyStatementParserRuleCall_8_0() { return cBodyStatementParserRuleCall_8_0; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementsStatementParserRuleCall_2_0_0 = (RuleCall)cStatementsAssignment_2_0.eContents().get(0);
		private final Assignment cStatementsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_2_1_0 = (RuleCall)cStatementsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	"{" {Block} (statements+=Statement statements+=Statement*)?
		//	"}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" {Block} (statements+=Statement statements+=Statement*)? "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//{Block}
		public Action getBlockAction_1() { return cBlockAction_1; }
		
		//(statements+=Statement statements+=Statement*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//statements+=Statement
		public Assignment getStatementsAssignment_2_0() { return cStatementsAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0_0() { return cStatementsStatementParserRuleCall_2_0_0; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment_2_1() { return cStatementsAssignment_2_1; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_1_0() { return cStatementsStatementParserRuleCall_2_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cContinueAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStatement:
		//	"continue" {Continue} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" {Continue} ";"
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//{Continue}
		public Action getContinueAction_1() { return cContinueAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cBreakStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement:
		//	"break" {BreakStatement} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"break" {BreakStatement} ";"
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//{BreakStatement}
		public Action getBreakStatementAction_1() { return cBreakStatementAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cReturnStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement:
		//	"return" {ReturnStatement} expression=Expression? ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"return" {ReturnStatement} expression=Expression? ";"
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//{ReturnStatement}
		public Action getReturnStatementAction_1() { return cReturnStatementAction_1; }
		
		//expression=Expression?
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ThrowStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ThrowStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThrowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cThrowStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ThrowStatement:
		//	"throw" {ThrowStatement} ";";
		@Override public ParserRule getRule() { return rule; }
		
		//"throw" {ThrowStatement} ";"
		public Group getGroup() { return cGroup; }
		
		//"throw"
		public Keyword getThrowKeyword_0() { return cThrowKeyword_0; }
		
		//{ThrowStatement}
		public Action getThrowStatementAction_1() { return cThrowStatementAction_1; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class PlaceHolderStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.PlaceHolderStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cPlaceHolderStatementAction_1 = (Action)cGroup.eContents().get(1);
		
		//// Only allowed in a Modifier DAF
		//PlaceHolderStatement:
		//	"_" {PlaceHolderStatement};
		@Override public ParserRule getRule() { return rule; }
		
		//"_" {PlaceHolderStatement}
		public Group getGroup() { return cGroup; }
		
		//"_"
		public Keyword get_Keyword_0() { return c_Keyword_0; }
		
		//{PlaceHolderStatement}
		public Action getPlaceHolderStatementAction_1() { return cPlaceHolderStatementAction_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Expression");
		private final RuleCall cAssignmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	Assignment;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall() { return cAssignmentParserRuleCall; }
	}
	public class SpecialExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SpecialExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecialExpressionTypeEnumEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Assignment cFieldOrMethodAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldOrMethodFieldParserRuleCall_1_0 = (RuleCall)cFieldOrMethodAssignment_1.eContents().get(0);
		private final Assignment cQualifiersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cQualifiersAlternatives_2_0 = (Alternatives)cQualifiersAssignment_2.eContents().get(0);
		private final RuleCall cQualifiersIndexParserRuleCall_2_0_0 = (RuleCall)cQualifiersAlternatives_2_0.eContents().get(0);
		private final RuleCall cQualifiersArgumentsParserRuleCall_2_0_1 = (RuleCall)cQualifiersAlternatives_2_0.eContents().get(1);
		
		//SpecialExpression:
		//	type=SpecialExpressionTypeEnum fieldOrMethod=Field? qualifiers+=(Index | Arguments)*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=SpecialExpressionTypeEnum fieldOrMethod=Field? qualifiers+=(Index | Arguments)*
		public Group getGroup() { return cGroup; }
		
		//type=SpecialExpressionTypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//SpecialExpressionTypeEnum
		public RuleCall getTypeSpecialExpressionTypeEnumEnumRuleCall_0_0() { return cTypeSpecialExpressionTypeEnumEnumRuleCall_0_0; }
		
		//fieldOrMethod=Field?
		public Assignment getFieldOrMethodAssignment_1() { return cFieldOrMethodAssignment_1; }
		
		//Field
		public RuleCall getFieldOrMethodFieldParserRuleCall_1_0() { return cFieldOrMethodFieldParserRuleCall_1_0; }
		
		//qualifiers+=(Index | Arguments)*
		public Assignment getQualifiersAssignment_2() { return cQualifiersAssignment_2; }
		
		//(Index | Arguments)
		public Alternatives getQualifiersAlternatives_2_0() { return cQualifiersAlternatives_2_0; }
		
		//Index
		public RuleCall getQualifiersIndexParserRuleCall_2_0_0() { return cQualifiersIndexParserRuleCall_2_0_0; }
		
		//Arguments
		public RuleCall getQualifiersArgumentsParserRuleCall_2_0_1() { return cQualifiersArgumentsParserRuleCall_2_0_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBinaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cAssignmentLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cAssignmentOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAssignmentOpAssignmentOpEnumEnumRuleCall_1_0_1_0 = (RuleCall)cAssignmentOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_2_0 = (RuleCall)cExpressionAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cVariableDeclarationExpressionTypeAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cVariableAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cVariableVariableParserRuleCall_1_1_1_0 = (RuleCall)cVariableAssignment_1_1_1.eContents().get(0);
		private final Group cGroup_1_1_2 = (Group)cGroup_1_1.eContents().get(2);
		private final Keyword cEqualsSignKeyword_1_1_2_0 = (Keyword)cGroup_1_1_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_2_1 = (Assignment)cGroup_1_1_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_2_1_0 = (RuleCall)cExpressionAssignment_1_1_2_1.eContents().get(0);
		
		//// Right associative
		//Assignment Expression:
		//	BinaryExpression ({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression
		//	| {VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?;
		@Override public ParserRule getRule() { return rule; }
		
		//BinaryExpression ({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression |
		//{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?
		public Group getGroup() { return cGroup; }
		
		//BinaryExpression
		public RuleCall getBinaryExpressionParserRuleCall_0() { return cBinaryExpressionParserRuleCall_0; }
		
		//({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression |
		//{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Assignment.left=current}
		public Action getAssignmentLeftAction_1_0_0() { return cAssignmentLeftAction_1_0_0; }
		
		//assignmentOp=AssignmentOpEnum
		public Assignment getAssignmentOpAssignment_1_0_1() { return cAssignmentOpAssignment_1_0_1; }
		
		//AssignmentOpEnum
		public RuleCall getAssignmentOpAssignmentOpEnumEnumRuleCall_1_0_1_0() { return cAssignmentOpAssignmentOpEnumEnumRuleCall_1_0_1_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_0_2() { return cExpressionAssignment_1_0_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_2_0() { return cExpressionExpressionParserRuleCall_1_0_2_0; }
		
		//{VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{VariableDeclarationExpression.type=current}
		public Action getVariableDeclarationExpressionTypeAction_1_1_0() { return cVariableDeclarationExpressionTypeAction_1_1_0; }
		
		//variable=Variable
		public Assignment getVariableAssignment_1_1_1() { return cVariableAssignment_1_1_1; }
		
		//Variable
		public RuleCall getVariableVariableParserRuleCall_1_1_1_0() { return cVariableVariableParserRuleCall_1_1_1_0; }
		
		//("=" expression=Expression)?
		public Group getGroup_1_1_2() { return cGroup_1_1_2; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_1_2_0() { return cEqualsSignKeyword_1_1_2_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_1_2_1() { return cExpressionAssignment_1_1_2_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_2_1_0() { return cExpressionExpressionParserRuleCall_1_1_2_1_0; }
	}
	public class BinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BinaryExpression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BinaryExpression Expression:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 4, Left associative
		//Or Expression:
		//	And ({Or.left=current} "||" right=And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//And ({Or.left=current} "||" right=And)*
		public Group getGroup() { return cGroup; }
		
		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }
		
		//({Or.left=current} "||" right=And)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 5, Left associative
		//And Expression:
		//	Equality ({And.left=current} "&&" right=Equality)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Equality ({And.left=current} "&&" right=Equality)*
		public Group getGroup() { return cGroup; }
		
		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }
		
		//({And.left=current} "&&" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}
	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cEqualityOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEqualityOpEqualityOpEnumEnumRuleCall_1_1_0 = (RuleCall)cEqualityOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 6, Left associative
		//Equality Expression:
		//	Comparison ({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }
		
		//equalityOp=EqualityOpEnum
		public Assignment getEqualityOpAssignment_1_1() { return cEqualityOpAssignment_1_1; }
		
		//EqualityOpEnum
		public RuleCall getEqualityOpEqualityOpEnumEnumRuleCall_1_1_0() { return cEqualityOpEqualityOpEnumEnumRuleCall_1_1_0; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cComparisonOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cComparisonOpComparisonOpEnumEnumRuleCall_1_1_0 = (RuleCall)cComparisonOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitOrParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 7, Left associative
		//Comparison Expression:
		//	BitOr ({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitOr ({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*
		public Group getGroup() { return cGroup; }
		
		//BitOr
		public RuleCall getBitOrParserRuleCall_0() { return cBitOrParserRuleCall_0; }
		
		//({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }
		
		//comparisonOp=ComparisonOpEnum
		public Assignment getComparisonOpAssignment_1_1() { return cComparisonOpAssignment_1_1; }
		
		//ComparisonOpEnum
		public RuleCall getComparisonOpComparisonOpEnumEnumRuleCall_1_1_0() { return cComparisonOpComparisonOpEnumEnumRuleCall_1_1_0; }
		
		//right=BitOr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitOr
		public RuleCall getRightBitOrParserRuleCall_1_2_0() { return cRightBitOrParserRuleCall_1_2_0; }
	}
	public class BitOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BitOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitXorParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitXorParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 8, Left associative
		//BitOr Expression:
		//	BitXor ({BitOr.left=current} "|" right=BitXor)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitXor ({BitOr.left=current} "|" right=BitXor)*
		public Group getGroup() { return cGroup; }
		
		//BitXor
		public RuleCall getBitXorParserRuleCall_0() { return cBitXorParserRuleCall_0; }
		
		//({BitOr.left=current} "|" right=BitXor)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitOr.left=current}
		public Action getBitOrLeftAction_1_0() { return cBitOrLeftAction_1_0; }
		
		//"|"
		public Keyword getVerticalLineKeyword_1_1() { return cVerticalLineKeyword_1_1; }
		
		//right=BitXor
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitXor
		public RuleCall getRightBitXorParserRuleCall_1_2_0() { return cRightBitXorParserRuleCall_1_2_0; }
	}
	public class BitXorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BitXor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBitAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitXorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cCircumflexAccentKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightBitAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 9, Left associativ
		//BitXor Expression:
		//	BitAnd ({BitXor.left=current} "^" right=BitAnd)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BitAnd ({BitXor.left=current} "^" right=BitAnd)*
		public Group getGroup() { return cGroup; }
		
		//BitAnd
		public RuleCall getBitAndParserRuleCall_0() { return cBitAndParserRuleCall_0; }
		
		//({BitXor.left=current} "^" right=BitAnd)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitXor.left=current}
		public Action getBitXorLeftAction_1_0() { return cBitXorLeftAction_1_0; }
		
		//"^"
		public Keyword getCircumflexAccentKeyword_1_1() { return cCircumflexAccentKeyword_1_1; }
		
		//right=BitAnd
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//BitAnd
		public RuleCall getRightBitAndParserRuleCall_1_2_0() { return cRightBitAndParserRuleCall_1_2_0; }
	}
	public class BitAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BitAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cShiftParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBitAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightShiftParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 10, Left associative
		//BitAnd Expression:
		//	Shift ({BitAnd.left=current} "&" right=Shift)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Shift ({BitAnd.left=current} "&" right=Shift)*
		public Group getGroup() { return cGroup; }
		
		//Shift
		public RuleCall getShiftParserRuleCall_0() { return cShiftParserRuleCall_0; }
		
		//({BitAnd.left=current} "&" right=Shift)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{BitAnd.left=current}
		public Action getBitAndLeftAction_1_0() { return cBitAndLeftAction_1_0; }
		
		//"&"
		public Keyword getAmpersandKeyword_1_1() { return cAmpersandKeyword_1_1; }
		
		//right=Shift
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Shift
		public RuleCall getRightShiftParserRuleCall_1_2_0() { return cRightShiftParserRuleCall_1_2_0; }
	}
	public class ShiftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Shift");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAddSubParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cShiftLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cShiftOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cShiftOpShiftOpEnumEnumRuleCall_1_1_0 = (RuleCall)cShiftOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAddSubParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 11, Left associative
		//Shift Expression:
		//	AddSub ({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AddSub ({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*
		public Group getGroup() { return cGroup; }
		
		//AddSub
		public RuleCall getAddSubParserRuleCall_0() { return cAddSubParserRuleCall_0; }
		
		//({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Shift.left=current}
		public Action getShiftLeftAction_1_0() { return cShiftLeftAction_1_0; }
		
		//shiftOp=ShiftOpEnum
		public Assignment getShiftOpAssignment_1_1() { return cShiftOpAssignment_1_1; }
		
		//ShiftOpEnum
		public RuleCall getShiftOpShiftOpEnumEnumRuleCall_1_1_0() { return cShiftOpShiftOpEnumEnumRuleCall_1_1_0; }
		
		//right=AddSub
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AddSub
		public RuleCall getRightAddSubParserRuleCall_1_2_0() { return cRightAddSubParserRuleCall_1_2_0; }
	}
	public class AddSubElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.AddSub");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulDivModParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Action cAddSubLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Assignment cAdditionOpAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cAdditionOpAdditionOpEnumEnumRuleCall_1_0_1_0 = (RuleCall)cAdditionOpAssignment_1_0_1.eContents().get(0);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightMulDivModParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		
		//// Precedence: 12, Left associative
		//AddSub Expression:
		//	MulDivMod => ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MulDivMod => ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*
		public Group getGroup() { return cGroup; }
		
		//MulDivMod
		public RuleCall getMulDivModParserRuleCall_0() { return cMulDivModParserRuleCall_0; }
		
		//=> ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{AddSub.left=current}
		public Action getAddSubLeftAction_1_0_0() { return cAddSubLeftAction_1_0_0; }
		
		//additionOp=AdditionOpEnum
		public Assignment getAdditionOpAssignment_1_0_1() { return cAdditionOpAssignment_1_0_1; }
		
		//AdditionOpEnum
		public RuleCall getAdditionOpAdditionOpEnumEnumRuleCall_1_0_1_0() { return cAdditionOpAdditionOpEnumEnumRuleCall_1_0_1_0; }
		
		//right=MulDivMod
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//MulDivMod
		public RuleCall getRightMulDivModParserRuleCall_1_0_2_0() { return cRightMulDivModParserRuleCall_1_0_2_0; }
	}
	public class MulDivModElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.MulDivMod");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExponentParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulDivModLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cMultipliciativeOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultipliciativeOpMulDivModOpEnumEnumRuleCall_1_1_0 = (RuleCall)cMultipliciativeOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExponentParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 13, Left associative
		//MulDivMod Expression:
		//	Exponent ({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Exponent ({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*
		public Group getGroup() { return cGroup; }
		
		//Exponent
		public RuleCall getExponentParserRuleCall_0() { return cExponentParserRuleCall_0; }
		
		//({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{MulDivMod.left=current}
		public Action getMulDivModLeftAction_1_0() { return cMulDivModLeftAction_1_0; }
		
		//multipliciativeOp=MulDivModOpEnum
		public Assignment getMultipliciativeOpAssignment_1_1() { return cMultipliciativeOpAssignment_1_1; }
		
		//MulDivModOpEnum
		public RuleCall getMultipliciativeOpMulDivModOpEnumEnumRuleCall_1_1_0() { return cMultipliciativeOpMulDivModOpEnumEnumRuleCall_1_1_0; }
		
		//right=Exponent
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Exponent
		public RuleCall getRightExponentParserRuleCall_1_2_0() { return cRightExponentParserRuleCall_1_2_0; }
	}
	public class ExponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Exponent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExponentLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// Precedence: 14, Left associative
		//Exponent Expression:
		//	UnaryExpression ({Exponent.left=current} "**" right=UnaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpression ({Exponent.left=current} "**" right=UnaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpression
		public RuleCall getUnaryExpressionParserRuleCall_0() { return cUnaryExpressionParserRuleCall_0; }
		
		//({Exponent.left=current} "**" right=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Exponent.left=current}
		public Action getExponentLeftAction_1_0() { return cExponentLeftAction_1_0; }
		
		//"**"
		public Keyword getAsteriskAsteriskKeyword_1_1() { return cAsteriskAsteriskKeyword_1_1; }
		
		//right=UnaryExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryExpression
		public RuleCall getRightUnaryExpressionParserRuleCall_1_2_0() { return cRightUnaryExpressionParserRuleCall_1_2_0; }
	}
	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNotExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryNotExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNewExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPreExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//UnaryExpression Expression:
		//	NotExpression | BinaryNotExpression | SignExpression | NewExpression | PreExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//NotExpression | BinaryNotExpression | SignExpression | NewExpression | PreExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_0() { return cNotExpressionParserRuleCall_0; }
		
		//BinaryNotExpression
		public RuleCall getBinaryNotExpressionParserRuleCall_1() { return cBinaryNotExpressionParserRuleCall_1; }
		
		//SignExpression
		public RuleCall getSignExpressionParserRuleCall_2() { return cSignExpressionParserRuleCall_2; }
		
		//NewExpression
		public RuleCall getNewExpressionParserRuleCall_3() { return cNewExpressionParserRuleCall_3; }
		
		//PreExpression
		public RuleCall getPreExpressionParserRuleCall_4() { return cPreExpressionParserRuleCall_4; }
	}
	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//NotExpression:
		//	"!" expression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"!" expression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class PreIncExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.PreIncExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionPostIncDecExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//PreIncExpression:
		//	expression=PostIncDecExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=PostIncDecExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//PostIncDecExpression
		public RuleCall getExpressionPostIncDecExpressionParserRuleCall_0() { return cExpressionPostIncDecExpressionParserRuleCall_0; }
	}
	public class PreDecExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.PreDecExpression");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionPostIncDecExpressionParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//PreDecExpression:
		//	expression=PostIncDecExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//expression=PostIncDecExpression
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }
		
		//PostIncDecExpression
		public RuleCall getExpressionPostIncDecExpressionParserRuleCall_0() { return cExpressionPostIncDecExpressionParserRuleCall_0; }
	}
	public class BinaryNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BinaryNotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//BinaryNotExpression:
		//	"~" expression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"~" expression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class SignExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SignExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSignOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cSignOpAlternatives_0_0 = (Alternatives)cSignOpAssignment_0.eContents().get(0);
		private final Keyword cSignOpPlusSignKeyword_0_0_0 = (Keyword)cSignOpAlternatives_0_0.eContents().get(0);
		private final Keyword cSignOpHyphenMinusKeyword_0_0_1 = (Keyword)cSignOpAlternatives_0_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//SignExpression:
		//	signOp=("+" |
		//	"-") expression=UnaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//signOp=("+" | "-") expression=UnaryExpression
		public Group getGroup() { return cGroup; }
		
		//signOp=("+" | "-")
		public Assignment getSignOpAssignment_0() { return cSignOpAssignment_0; }
		
		//("+" | "-")
		public Alternatives getSignOpAlternatives_0_0() { return cSignOpAlternatives_0_0; }
		
		//"+"
		public Keyword getSignOpPlusSignKeyword_0_0_0() { return cSignOpPlusSignKeyword_0_0_0; }
		
		//"-"
		public Keyword getSignOpHyphenMinusKeyword_0_0_1() { return cSignOpHyphenMinusKeyword_0_0_1; }
		
		//expression=UnaryExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_0; }
	}
	public class NewExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.NewExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cContractContractOrLibraryCrossReference_1_0 = (CrossReference)cContractAssignment_1.eContents().get(0);
		private final RuleCall cContractContractOrLibraryIDTerminalRuleCall_1_0_1 = (RuleCall)cContractContractOrLibraryCrossReference_1_0.eContents().get(1);
		private final Assignment cArgsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgsFunctionCallListArgumentsParserRuleCall_2_0 = (RuleCall)cArgsAssignment_2.eContents().get(0);
		
		//NewExpression:
		//	"new" contract=[ContractOrLibrary] args=FunctionCallListArguments;
		@Override public ParserRule getRule() { return rule; }
		
		//"new" contract=[ContractOrLibrary] args=FunctionCallListArguments
		public Group getGroup() { return cGroup; }
		
		//"new"
		public Keyword getNewKeyword_0() { return cNewKeyword_0; }
		
		//contract=[ContractOrLibrary]
		public Assignment getContractAssignment_1() { return cContractAssignment_1; }
		
		//[ContractOrLibrary]
		public CrossReference getContractContractOrLibraryCrossReference_1_0() { return cContractContractOrLibraryCrossReference_1_0; }
		
		//ID
		public RuleCall getContractContractOrLibraryIDTerminalRuleCall_1_0_1() { return cContractContractOrLibraryIDTerminalRuleCall_1_0_1; }
		
		//args=FunctionCallListArguments
		public Assignment getArgsAssignment_2() { return cArgsAssignment_2; }
		
		//FunctionCallListArguments
		public RuleCall getArgsFunctionCallListArgumentsParserRuleCall_2_0() { return cArgsFunctionCallListArgumentsParserRuleCall_2_0; }
	}
	public class PreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.PreExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPostIncDecExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPostIncDecExpressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Action cPreIncExpressionExpressionAction_1_2 = (Action)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cHyphenMinusHyphenMinusKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cPostIncDecExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Action cPreDecExpressionExpressionAction_2_2 = (Action)cGroup_2.eContents().get(2);
		
		//PreExpression Expression:
		//	PostIncDecExpression | "++" PostIncDecExpression {PreIncExpression.expression=current} | "--" PostIncDecExpression
		//	{PreDecExpression.expression=current};
		@Override public ParserRule getRule() { return rule; }
		
		//PostIncDecExpression | "++" PostIncDecExpression {PreIncExpression.expression=current} | "--" PostIncDecExpression
		//{PreDecExpression.expression=current}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PostIncDecExpression
		public RuleCall getPostIncDecExpressionParserRuleCall_0() { return cPostIncDecExpressionParserRuleCall_0; }
		
		//"++" PostIncDecExpression {PreIncExpression.expression=current}
		public Group getGroup_1() { return cGroup_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_0() { return cPlusSignPlusSignKeyword_1_0; }
		
		//PostIncDecExpression
		public RuleCall getPostIncDecExpressionParserRuleCall_1_1() { return cPostIncDecExpressionParserRuleCall_1_1; }
		
		//{PreIncExpression.expression=current}
		public Action getPreIncExpressionExpressionAction_1_2() { return cPreIncExpressionExpressionAction_1_2; }
		
		//"--" PostIncDecExpression {PreDecExpression.expression=current}
		public Group getGroup_2() { return cGroup_2; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_2_0() { return cHyphenMinusHyphenMinusKeyword_2_0; }
		
		//PostIncDecExpression
		public RuleCall getPostIncDecExpressionParserRuleCall_2_1() { return cPostIncDecExpressionParserRuleCall_2_1; }
		
		//{PreDecExpression.expression=current}
		public Action getPreDecExpressionExpressionAction_2_2() { return cPreDecExpressionExpressionAction_2_2; }
	}
	public class PostIncDecExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.PostIncDecExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPostIncDecExpressionExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cPostOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPostOpIncDecOpEnumEnumRuleCall_1_1_0 = (RuleCall)cPostOpAssignment_1_1.eContents().get(0);
		
		//PostIncDecExpression Expression:
		//	PrimaryExpression ({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{PostIncDecExpression.expression=current}
		public Action getPostIncDecExpressionExpressionAction_1_0() { return cPostIncDecExpressionExpressionAction_1_0; }
		
		//postOp=IncDecOpEnum
		public Assignment getPostOpAssignment_1_1() { return cPostOpAssignment_1_1; }
		
		//IncDecOpEnum
		public RuleCall getPostOpIncDecOpEnumEnumRuleCall_1_1_0() { return cPostOpIncDecOpEnumEnumRuleCall_1_1_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTypeCastParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Action cTupleMembersAction_4_2_0 = (Action)cGroup_4_2.eContents().get(0);
		private final Group cGroup_4_2_1 = (Group)cGroup_4_2.eContents().get(1);
		private final Assignment cMembersAssignment_4_2_1_0 = (Assignment)cGroup_4_2_1.eContents().get(0);
		private final RuleCall cMembersTupleSeparatorParserRuleCall_4_2_1_0_0 = (RuleCall)cMembersAssignment_4_2_1_0.eContents().get(0);
		private final Assignment cMembersAssignment_4_2_1_1 = (Assignment)cGroup_4_2_1.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_4_2_1_1_0 = (RuleCall)cMembersAssignment_4_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cTupleSeparatorParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Action cTupleMembersAction_5_2_0 = (Action)cGroup_5_2.eContents().get(0);
		private final Assignment cMembersAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_5_2_1_0 = (RuleCall)cMembersAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_2_2 = (Group)cGroup_5_2.eContents().get(2);
		private final Assignment cMembersAssignment_5_2_2_0 = (Assignment)cGroup_5_2_2.eContents().get(0);
		private final RuleCall cMembersTupleSeparatorParserRuleCall_5_2_2_0_0 = (RuleCall)cMembersAssignment_5_2_2_0.eContents().get(0);
		private final Assignment cMembersAssignment_5_2_2_1 = (Assignment)cGroup_5_2_2.eContents().get(1);
		private final RuleCall cMembersExpressionParserRuleCall_5_2_2_1_0 = (RuleCall)cMembersAssignment_5_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Action cTupleAction_6_2 = (Action)cGroup_6.eContents().get(2);
		
		//PrimaryExpression Expression:
		//	SpecialExpression | QualifiedIdentifier | Literal | TypeCast |
		//	"("
		//	Expression ({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)?
		//	")" |
		//	"("
		//	TupleSeparator ({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*)
		//	")" |
		//	"(" ")" {Tuple};
		@Override public ParserRule getRule() { return rule; }
		
		//SpecialExpression | QualifiedIdentifier | Literal | TypeCast | "(" Expression ({Tuple.members+=current}
		//(members+=TupleSeparator members+=Expression?)+)? ")" | "(" TupleSeparator ({Tuple.members+=current}
		//members+=Expression? (members+=TupleSeparator members+=Expression?)*) ")" | "(" ")" {Tuple}
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpecialExpression
		public RuleCall getSpecialExpressionParserRuleCall_0() { return cSpecialExpressionParserRuleCall_0; }
		
		//QualifiedIdentifier
		public RuleCall getQualifiedIdentifierParserRuleCall_1() { return cQualifiedIdentifierParserRuleCall_1; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }
		
		//TypeCast
		public RuleCall getTypeCastParserRuleCall_3() { return cTypeCastParserRuleCall_3; }
		
		//"(" Expression ({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)? ")"
		public Group getGroup_4() { return cGroup_4; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_4_1() { return cExpressionParserRuleCall_4_1; }
		
		//({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)?
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//{Tuple.members+=current}
		public Action getTupleMembersAction_4_2_0() { return cTupleMembersAction_4_2_0; }
		
		//(members+=TupleSeparator members+=Expression?)+
		public Group getGroup_4_2_1() { return cGroup_4_2_1; }
		
		//members+=TupleSeparator
		public Assignment getMembersAssignment_4_2_1_0() { return cMembersAssignment_4_2_1_0; }
		
		//TupleSeparator
		public RuleCall getMembersTupleSeparatorParserRuleCall_4_2_1_0_0() { return cMembersTupleSeparatorParserRuleCall_4_2_1_0_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_4_2_1_1() { return cMembersAssignment_4_2_1_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_4_2_1_1_0() { return cMembersExpressionParserRuleCall_4_2_1_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//"(" TupleSeparator ({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*) ")"
		public Group getGroup_5() { return cGroup_5; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//TupleSeparator
		public RuleCall getTupleSeparatorParserRuleCall_5_1() { return cTupleSeparatorParserRuleCall_5_1; }
		
		//({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*)
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//{Tuple.members+=current}
		public Action getTupleMembersAction_5_2_0() { return cTupleMembersAction_5_2_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_5_2_1() { return cMembersAssignment_5_2_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_5_2_1_0() { return cMembersExpressionParserRuleCall_5_2_1_0; }
		
		//(members+=TupleSeparator members+=Expression?)*
		public Group getGroup_5_2_2() { return cGroup_5_2_2; }
		
		//members+=TupleSeparator
		public Assignment getMembersAssignment_5_2_2_0() { return cMembersAssignment_5_2_2_0; }
		
		//TupleSeparator
		public RuleCall getMembersTupleSeparatorParserRuleCall_5_2_2_0_0() { return cMembersTupleSeparatorParserRuleCall_5_2_2_0_0; }
		
		//members+=Expression?
		public Assignment getMembersAssignment_5_2_2_1() { return cMembersAssignment_5_2_2_1; }
		
		//Expression
		public RuleCall getMembersExpressionParserRuleCall_5_2_2_1_0() { return cMembersExpressionParserRuleCall_5_2_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//"(" ")" {Tuple}
		public Group getGroup_6() { return cGroup_6; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_6_0() { return cLeftParenthesisKeyword_6_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6_1() { return cRightParenthesisKeyword_6_1; }
		
		//{Tuple}
		public Action getTupleAction_6_2() { return cTupleAction_6_2; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSpecialVariablesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanConstParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Literal:
		//	SpecialVariables | BooleanConst | Number | StringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//SpecialVariables | BooleanConst | Number | StringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SpecialVariables
		public RuleCall getSpecialVariablesParserRuleCall_0() { return cSpecialVariablesParserRuleCall_0; }
		
		//BooleanConst
		public RuleCall getBooleanConstParserRuleCall_1() { return cBooleanConstParserRuleCall_1; }
		
		//Number
		public RuleCall getNumberParserRuleCall_2() { return cNumberParserRuleCall_2; }
		
		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_3() { return cStringLiteralParserRuleCall_3; }
	}
	public class BooleanConstElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BooleanConst");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBooleanLiteralEnumEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanConst:
		//	value=BooleanLiteralEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=BooleanLiteralEnum
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//BooleanLiteralEnum
		public RuleCall getValueBooleanLiteralEnumEnumRuleCall_0() { return cValueBooleanLiteralEnumEnumRuleCall_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Number");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberDimensionlessParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEtherParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNowParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTimeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Number:
		//	NumberDimensionless | Ether | Now | Time;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberDimensionless | Ether | Now | Time
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberDimensionless
		public RuleCall getNumberDimensionlessParserRuleCall_0() { return cNumberDimensionlessParserRuleCall_0; }
		
		//Ether
		public RuleCall getEtherParserRuleCall_1() { return cEtherParserRuleCall_1; }
		
		//Now
		public RuleCall getNowParserRuleCall_2() { return cNowParserRuleCall_2; }
		
		//Time
		public RuleCall getTimeParserRuleCall_3() { return cTimeParserRuleCall_3; }
	}
	public class NumberDimensionlessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.NumberDimensionless");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberDimensionless:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class EtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Ether");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cEtherAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEtherEtherSubDenominationEnumEnumRuleCall_1_0 = (RuleCall)cEtherAssignment_1.eContents().get(0);
		
		//Ether:
		//	value=INT ether=EtherSubDenominationEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT ether=EtherSubDenominationEnum
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//ether=EtherSubDenominationEnum
		public Assignment getEtherAssignment_1() { return cEtherAssignment_1; }
		
		//EtherSubDenominationEnum
		public RuleCall getEtherEtherSubDenominationEnumEnumRuleCall_1_0() { return cEtherEtherSubDenominationEnumEnumRuleCall_1_0; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueINTTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cTimeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeTimeSubdenominationEnumEnumRuleCall_1_0 = (RuleCall)cTimeAssignment_1.eContents().get(0);
		
		//Time:
		//	value=INT time=TimeSubdenominationEnum;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT time=TimeSubdenominationEnum
		public Group getGroup() { return cGroup; }
		
		//value=INT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0_0() { return cValueINTTerminalRuleCall_0_0; }
		
		//time=TimeSubdenominationEnum
		public Assignment getTimeAssignment_1() { return cTimeAssignment_1; }
		
		//TimeSubdenominationEnum
		public RuleCall getTimeTimeSubdenominationEnumEnumRuleCall_1_0() { return cTimeTimeSubdenominationEnumEnumRuleCall_1_0; }
	}
	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class TypeCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.TypeCast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueElementaryTypeNameEnumEnumRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TypeCast:
		//	value=ElementaryTypeNameEnum "("
		//	expression=Expression
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//value=ElementaryTypeNameEnum "(" expression=Expression ")"
		public Group getGroup() { return cGroup; }
		
		//value=ElementaryTypeNameEnum
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ElementaryTypeNameEnum
		public RuleCall getValueElementaryTypeNameEnumEnumRuleCall_0_0() { return cValueElementaryTypeNameEnumEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class NowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.Now");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNowAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNowKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Now:
		//	{Now} "now";
		@Override public ParserRule getRule() { return rule; }
		
		//{Now} "now"
		public Group getGroup() { return cGroup; }
		
		//{Now}
		public Action getNowAction_0() { return cNowAction_0; }
		
		//"now"
		public Keyword getNowKeyword_1() { return cNowKeyword_1; }
	}
	public class SpecialVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SpecialVariables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeSpecialVariablesTypeEnumEnumRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldIDTerminalRuleCall_2_0 = (RuleCall)cFieldAssignment_2.eContents().get(0);
		private final Assignment cQualifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQualifiersQualifierParserRuleCall_3_0 = (RuleCall)cQualifiersAssignment_3.eContents().get(0);
		
		//SpecialVariables:
		//	type=SpecialVariablesTypeEnum "." field=ID qualifiers+=Qualifier*;
		@Override public ParserRule getRule() { return rule; }
		
		//type=SpecialVariablesTypeEnum "." field=ID qualifiers+=Qualifier*
		public Group getGroup() { return cGroup; }
		
		//type=SpecialVariablesTypeEnum
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//SpecialVariablesTypeEnum
		public RuleCall getTypeSpecialVariablesTypeEnumEnumRuleCall_0_0() { return cTypeSpecialVariablesTypeEnumEnumRuleCall_0_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//field=ID
		public Assignment getFieldAssignment_2() { return cFieldAssignment_2; }
		
		//ID
		public RuleCall getFieldIDTerminalRuleCall_2_0() { return cFieldIDTerminalRuleCall_2_0; }
		
		//qualifiers+=Qualifier*
		public Assignment getQualifiersAssignment_3() { return cQualifiersAssignment_3; }
		
		//Qualifier
		public RuleCall getQualifiersQualifierParserRuleCall_3_0() { return cQualifiersQualifierParserRuleCall_3_0; }
	}
	
	public class ElementaryTypeNameEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ElementaryTypeNameEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTIntKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINT16EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINT16Int16Keyword_1_0 = (Keyword)cINT16EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINT24EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINT24Int24Keyword_2_0 = (Keyword)cINT24EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINT32EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINT32Int32Keyword_3_0 = (Keyword)cINT32EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINT40EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINT40Int40Keyword_4_0 = (Keyword)cINT40EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cINT48EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cINT48Int48Keyword_5_0 = (Keyword)cINT48EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINT56EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINT56Int56Keyword_6_0 = (Keyword)cINT56EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cINT64EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cINT64Int64Keyword_7_0 = (Keyword)cINT64EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cINT72EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cINT72Int72Keyword_8_0 = (Keyword)cINT72EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cINT80EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cINT80Int80Keyword_9_0 = (Keyword)cINT80EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cINT88EnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cINT88Int88Keyword_10_0 = (Keyword)cINT88EnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cINT96EnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cINT96Int96Keyword_11_0 = (Keyword)cINT96EnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cINT104EnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cINT104Int104Keyword_12_0 = (Keyword)cINT104EnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cINT112EnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cINT112Int112Keyword_13_0 = (Keyword)cINT112EnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cINT120EnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cINT120Int120Keyword_14_0 = (Keyword)cINT120EnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cINT128EnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cINT128Int128Keyword_15_0 = (Keyword)cINT128EnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cINT136EnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cINT136Int136Keyword_16_0 = (Keyword)cINT136EnumLiteralDeclaration_16.eContents().get(0);
		private final EnumLiteralDeclaration cINT144EnumLiteralDeclaration_17 = (EnumLiteralDeclaration)cAlternatives.eContents().get(17);
		private final Keyword cINT144Int144Keyword_17_0 = (Keyword)cINT144EnumLiteralDeclaration_17.eContents().get(0);
		private final EnumLiteralDeclaration cINT152EnumLiteralDeclaration_18 = (EnumLiteralDeclaration)cAlternatives.eContents().get(18);
		private final Keyword cINT152Int152Keyword_18_0 = (Keyword)cINT152EnumLiteralDeclaration_18.eContents().get(0);
		private final EnumLiteralDeclaration cINT160EnumLiteralDeclaration_19 = (EnumLiteralDeclaration)cAlternatives.eContents().get(19);
		private final Keyword cINT160Int160Keyword_19_0 = (Keyword)cINT160EnumLiteralDeclaration_19.eContents().get(0);
		private final EnumLiteralDeclaration cINT168EnumLiteralDeclaration_20 = (EnumLiteralDeclaration)cAlternatives.eContents().get(20);
		private final Keyword cINT168Int168Keyword_20_0 = (Keyword)cINT168EnumLiteralDeclaration_20.eContents().get(0);
		private final EnumLiteralDeclaration cINT178EnumLiteralDeclaration_21 = (EnumLiteralDeclaration)cAlternatives.eContents().get(21);
		private final Keyword cINT178Int178Keyword_21_0 = (Keyword)cINT178EnumLiteralDeclaration_21.eContents().get(0);
		private final EnumLiteralDeclaration cINT184EnumLiteralDeclaration_22 = (EnumLiteralDeclaration)cAlternatives.eContents().get(22);
		private final Keyword cINT184Int184Keyword_22_0 = (Keyword)cINT184EnumLiteralDeclaration_22.eContents().get(0);
		private final EnumLiteralDeclaration cINT192EnumLiteralDeclaration_23 = (EnumLiteralDeclaration)cAlternatives.eContents().get(23);
		private final Keyword cINT192Int192Keyword_23_0 = (Keyword)cINT192EnumLiteralDeclaration_23.eContents().get(0);
		private final EnumLiteralDeclaration cINT200EnumLiteralDeclaration_24 = (EnumLiteralDeclaration)cAlternatives.eContents().get(24);
		private final Keyword cINT200Int200Keyword_24_0 = (Keyword)cINT200EnumLiteralDeclaration_24.eContents().get(0);
		private final EnumLiteralDeclaration cINT208EnumLiteralDeclaration_25 = (EnumLiteralDeclaration)cAlternatives.eContents().get(25);
		private final Keyword cINT208Int208Keyword_25_0 = (Keyword)cINT208EnumLiteralDeclaration_25.eContents().get(0);
		private final EnumLiteralDeclaration cINT216EnumLiteralDeclaration_26 = (EnumLiteralDeclaration)cAlternatives.eContents().get(26);
		private final Keyword cINT216Int216Keyword_26_0 = (Keyword)cINT216EnumLiteralDeclaration_26.eContents().get(0);
		private final EnumLiteralDeclaration cINT224EnumLiteralDeclaration_27 = (EnumLiteralDeclaration)cAlternatives.eContents().get(27);
		private final Keyword cINT224Int224Keyword_27_0 = (Keyword)cINT224EnumLiteralDeclaration_27.eContents().get(0);
		private final EnumLiteralDeclaration cINT232EnumLiteralDeclaration_28 = (EnumLiteralDeclaration)cAlternatives.eContents().get(28);
		private final Keyword cINT232Int232Keyword_28_0 = (Keyword)cINT232EnumLiteralDeclaration_28.eContents().get(0);
		private final EnumLiteralDeclaration cINT240EnumLiteralDeclaration_29 = (EnumLiteralDeclaration)cAlternatives.eContents().get(29);
		private final Keyword cINT240Int240Keyword_29_0 = (Keyword)cINT240EnumLiteralDeclaration_29.eContents().get(0);
		private final EnumLiteralDeclaration cINT248EnumLiteralDeclaration_30 = (EnumLiteralDeclaration)cAlternatives.eContents().get(30);
		private final Keyword cINT248Int248Keyword_30_0 = (Keyword)cINT248EnumLiteralDeclaration_30.eContents().get(0);
		private final EnumLiteralDeclaration cINT256EnumLiteralDeclaration_31 = (EnumLiteralDeclaration)cAlternatives.eContents().get(31);
		private final Keyword cINT256Int256Keyword_31_0 = (Keyword)cINT256EnumLiteralDeclaration_31.eContents().get(0);
		private final EnumLiteralDeclaration cUINTEnumLiteralDeclaration_32 = (EnumLiteralDeclaration)cAlternatives.eContents().get(32);
		private final Keyword cUINTUintKeyword_32_0 = (Keyword)cUINTEnumLiteralDeclaration_32.eContents().get(0);
		private final EnumLiteralDeclaration cUINT8EnumLiteralDeclaration_33 = (EnumLiteralDeclaration)cAlternatives.eContents().get(33);
		private final Keyword cUINT8Uint8Keyword_33_0 = (Keyword)cUINT8EnumLiteralDeclaration_33.eContents().get(0);
		private final EnumLiteralDeclaration cUINT16EnumLiteralDeclaration_34 = (EnumLiteralDeclaration)cAlternatives.eContents().get(34);
		private final Keyword cUINT16Uint16Keyword_34_0 = (Keyword)cUINT16EnumLiteralDeclaration_34.eContents().get(0);
		private final EnumLiteralDeclaration cUNIT24EnumLiteralDeclaration_35 = (EnumLiteralDeclaration)cAlternatives.eContents().get(35);
		private final Keyword cUNIT24Uint24Keyword_35_0 = (Keyword)cUNIT24EnumLiteralDeclaration_35.eContents().get(0);
		private final EnumLiteralDeclaration cUINT32EnumLiteralDeclaration_36 = (EnumLiteralDeclaration)cAlternatives.eContents().get(36);
		private final Keyword cUINT32Uint32Keyword_36_0 = (Keyword)cUINT32EnumLiteralDeclaration_36.eContents().get(0);
		private final EnumLiteralDeclaration cUINT40EnumLiteralDeclaration_37 = (EnumLiteralDeclaration)cAlternatives.eContents().get(37);
		private final Keyword cUINT40Uint40Keyword_37_0 = (Keyword)cUINT40EnumLiteralDeclaration_37.eContents().get(0);
		private final EnumLiteralDeclaration cUINT48EnumLiteralDeclaration_38 = (EnumLiteralDeclaration)cAlternatives.eContents().get(38);
		private final Keyword cUINT48Uint48Keyword_38_0 = (Keyword)cUINT48EnumLiteralDeclaration_38.eContents().get(0);
		private final EnumLiteralDeclaration cUNIT56EnumLiteralDeclaration_39 = (EnumLiteralDeclaration)cAlternatives.eContents().get(39);
		private final Keyword cUNIT56Uint56Keyword_39_0 = (Keyword)cUNIT56EnumLiteralDeclaration_39.eContents().get(0);
		private final EnumLiteralDeclaration cUINT64EnumLiteralDeclaration_40 = (EnumLiteralDeclaration)cAlternatives.eContents().get(40);
		private final Keyword cUINT64Uint64Keyword_40_0 = (Keyword)cUINT64EnumLiteralDeclaration_40.eContents().get(0);
		private final EnumLiteralDeclaration cUINT72EnumLiteralDeclaration_41 = (EnumLiteralDeclaration)cAlternatives.eContents().get(41);
		private final Keyword cUINT72Uint72Keyword_41_0 = (Keyword)cUINT72EnumLiteralDeclaration_41.eContents().get(0);
		private final EnumLiteralDeclaration cUINT80EnumLiteralDeclaration_42 = (EnumLiteralDeclaration)cAlternatives.eContents().get(42);
		private final Keyword cUINT80Uint80Keyword_42_0 = (Keyword)cUINT80EnumLiteralDeclaration_42.eContents().get(0);
		private final EnumLiteralDeclaration cUINT88EnumLiteralDeclaration_43 = (EnumLiteralDeclaration)cAlternatives.eContents().get(43);
		private final Keyword cUINT88Uint88Keyword_43_0 = (Keyword)cUINT88EnumLiteralDeclaration_43.eContents().get(0);
		private final EnumLiteralDeclaration cUINT96EnumLiteralDeclaration_44 = (EnumLiteralDeclaration)cAlternatives.eContents().get(44);
		private final Keyword cUINT96Uint96Keyword_44_0 = (Keyword)cUINT96EnumLiteralDeclaration_44.eContents().get(0);
		private final EnumLiteralDeclaration cUINT104EnumLiteralDeclaration_45 = (EnumLiteralDeclaration)cAlternatives.eContents().get(45);
		private final Keyword cUINT104Uint104Keyword_45_0 = (Keyword)cUINT104EnumLiteralDeclaration_45.eContents().get(0);
		private final EnumLiteralDeclaration cUINT112EnumLiteralDeclaration_46 = (EnumLiteralDeclaration)cAlternatives.eContents().get(46);
		private final Keyword cUINT112Uint112Keyword_46_0 = (Keyword)cUINT112EnumLiteralDeclaration_46.eContents().get(0);
		private final EnumLiteralDeclaration cUINT120EnumLiteralDeclaration_47 = (EnumLiteralDeclaration)cAlternatives.eContents().get(47);
		private final Keyword cUINT120Uint120Keyword_47_0 = (Keyword)cUINT120EnumLiteralDeclaration_47.eContents().get(0);
		private final EnumLiteralDeclaration cUINT128EnumLiteralDeclaration_48 = (EnumLiteralDeclaration)cAlternatives.eContents().get(48);
		private final Keyword cUINT128Uint128Keyword_48_0 = (Keyword)cUINT128EnumLiteralDeclaration_48.eContents().get(0);
		private final EnumLiteralDeclaration cUINT136EnumLiteralDeclaration_49 = (EnumLiteralDeclaration)cAlternatives.eContents().get(49);
		private final Keyword cUINT136Uint136Keyword_49_0 = (Keyword)cUINT136EnumLiteralDeclaration_49.eContents().get(0);
		private final EnumLiteralDeclaration cUINT144EnumLiteralDeclaration_50 = (EnumLiteralDeclaration)cAlternatives.eContents().get(50);
		private final Keyword cUINT144Uint144Keyword_50_0 = (Keyword)cUINT144EnumLiteralDeclaration_50.eContents().get(0);
		private final EnumLiteralDeclaration cUINT152EnumLiteralDeclaration_51 = (EnumLiteralDeclaration)cAlternatives.eContents().get(51);
		private final Keyword cUINT152Uint152Keyword_51_0 = (Keyword)cUINT152EnumLiteralDeclaration_51.eContents().get(0);
		private final EnumLiteralDeclaration cUINT160EnumLiteralDeclaration_52 = (EnumLiteralDeclaration)cAlternatives.eContents().get(52);
		private final Keyword cUINT160Uint160Keyword_52_0 = (Keyword)cUINT160EnumLiteralDeclaration_52.eContents().get(0);
		private final EnumLiteralDeclaration cUINT168EnumLiteralDeclaration_53 = (EnumLiteralDeclaration)cAlternatives.eContents().get(53);
		private final Keyword cUINT168Uint168Keyword_53_0 = (Keyword)cUINT168EnumLiteralDeclaration_53.eContents().get(0);
		private final EnumLiteralDeclaration cUINT178EnumLiteralDeclaration_54 = (EnumLiteralDeclaration)cAlternatives.eContents().get(54);
		private final Keyword cUINT178Uint178Keyword_54_0 = (Keyword)cUINT178EnumLiteralDeclaration_54.eContents().get(0);
		private final EnumLiteralDeclaration cUINT184EnumLiteralDeclaration_55 = (EnumLiteralDeclaration)cAlternatives.eContents().get(55);
		private final Keyword cUINT184Uint184Keyword_55_0 = (Keyword)cUINT184EnumLiteralDeclaration_55.eContents().get(0);
		private final EnumLiteralDeclaration cUINT192EnumLiteralDeclaration_56 = (EnumLiteralDeclaration)cAlternatives.eContents().get(56);
		private final Keyword cUINT192Uint192Keyword_56_0 = (Keyword)cUINT192EnumLiteralDeclaration_56.eContents().get(0);
		private final EnumLiteralDeclaration cUINT200EnumLiteralDeclaration_57 = (EnumLiteralDeclaration)cAlternatives.eContents().get(57);
		private final Keyword cUINT200Uint200Keyword_57_0 = (Keyword)cUINT200EnumLiteralDeclaration_57.eContents().get(0);
		private final EnumLiteralDeclaration cUINT208EnumLiteralDeclaration_58 = (EnumLiteralDeclaration)cAlternatives.eContents().get(58);
		private final Keyword cUINT208Uint208Keyword_58_0 = (Keyword)cUINT208EnumLiteralDeclaration_58.eContents().get(0);
		private final EnumLiteralDeclaration cUINT216EnumLiteralDeclaration_59 = (EnumLiteralDeclaration)cAlternatives.eContents().get(59);
		private final Keyword cUINT216Uint216Keyword_59_0 = (Keyword)cUINT216EnumLiteralDeclaration_59.eContents().get(0);
		private final EnumLiteralDeclaration cUINT244EnumLiteralDeclaration_60 = (EnumLiteralDeclaration)cAlternatives.eContents().get(60);
		private final Keyword cUINT244Uint224Keyword_60_0 = (Keyword)cUINT244EnumLiteralDeclaration_60.eContents().get(0);
		private final EnumLiteralDeclaration cUINT232EnumLiteralDeclaration_61 = (EnumLiteralDeclaration)cAlternatives.eContents().get(61);
		private final Keyword cUINT232Uint232Keyword_61_0 = (Keyword)cUINT232EnumLiteralDeclaration_61.eContents().get(0);
		private final EnumLiteralDeclaration cUINT240EnumLiteralDeclaration_62 = (EnumLiteralDeclaration)cAlternatives.eContents().get(62);
		private final Keyword cUINT240Uint240Keyword_62_0 = (Keyword)cUINT240EnumLiteralDeclaration_62.eContents().get(0);
		private final EnumLiteralDeclaration cUINT248EnumLiteralDeclaration_63 = (EnumLiteralDeclaration)cAlternatives.eContents().get(63);
		private final Keyword cUINT248Uint248Keyword_63_0 = (Keyword)cUINT248EnumLiteralDeclaration_63.eContents().get(0);
		private final EnumLiteralDeclaration cUINT256EnumLiteralDeclaration_64 = (EnumLiteralDeclaration)cAlternatives.eContents().get(64);
		private final Keyword cUINT256Uint256Keyword_64_0 = (Keyword)cUINT256EnumLiteralDeclaration_64.eContents().get(0);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_65 = (EnumLiteralDeclaration)cAlternatives.eContents().get(65);
		private final Keyword cBYTEByteKeyword_65_0 = (Keyword)cBYTEEnumLiteralDeclaration_65.eContents().get(0);
		private final EnumLiteralDeclaration cBYTESEnumLiteralDeclaration_66 = (EnumLiteralDeclaration)cAlternatives.eContents().get(66);
		private final Keyword cBYTESBytesKeyword_66_0 = (Keyword)cBYTESEnumLiteralDeclaration_66.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES1EnumLiteralDeclaration_67 = (EnumLiteralDeclaration)cAlternatives.eContents().get(67);
		private final Keyword cBYTES1Bytes1Keyword_67_0 = (Keyword)cBYTES1EnumLiteralDeclaration_67.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES2EnumLiteralDeclaration_68 = (EnumLiteralDeclaration)cAlternatives.eContents().get(68);
		private final Keyword cBYTES2Bytes2Keyword_68_0 = (Keyword)cBYTES2EnumLiteralDeclaration_68.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES3EnumLiteralDeclaration_69 = (EnumLiteralDeclaration)cAlternatives.eContents().get(69);
		private final Keyword cBYTES3Bytes3Keyword_69_0 = (Keyword)cBYTES3EnumLiteralDeclaration_69.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES4EnumLiteralDeclaration_70 = (EnumLiteralDeclaration)cAlternatives.eContents().get(70);
		private final Keyword cBYTES4Bytes4Keyword_70_0 = (Keyword)cBYTES4EnumLiteralDeclaration_70.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES5EnumLiteralDeclaration_71 = (EnumLiteralDeclaration)cAlternatives.eContents().get(71);
		private final Keyword cBYTES5Bytes5Keyword_71_0 = (Keyword)cBYTES5EnumLiteralDeclaration_71.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES6EnumLiteralDeclaration_72 = (EnumLiteralDeclaration)cAlternatives.eContents().get(72);
		private final Keyword cBYTES6Bytes6Keyword_72_0 = (Keyword)cBYTES6EnumLiteralDeclaration_72.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES7EnumLiteralDeclaration_73 = (EnumLiteralDeclaration)cAlternatives.eContents().get(73);
		private final Keyword cBYTES7Bytes7Keyword_73_0 = (Keyword)cBYTES7EnumLiteralDeclaration_73.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES8EnumLiteralDeclaration_74 = (EnumLiteralDeclaration)cAlternatives.eContents().get(74);
		private final Keyword cBYTES8Bytes8Keyword_74_0 = (Keyword)cBYTES8EnumLiteralDeclaration_74.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES9EnumLiteralDeclaration_75 = (EnumLiteralDeclaration)cAlternatives.eContents().get(75);
		private final Keyword cBYTES9Bytes9Keyword_75_0 = (Keyword)cBYTES9EnumLiteralDeclaration_75.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES10EnumLiteralDeclaration_76 = (EnumLiteralDeclaration)cAlternatives.eContents().get(76);
		private final Keyword cBYTES10Bytes10Keyword_76_0 = (Keyword)cBYTES10EnumLiteralDeclaration_76.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES11EnumLiteralDeclaration_77 = (EnumLiteralDeclaration)cAlternatives.eContents().get(77);
		private final Keyword cBYTES11Bytes11Keyword_77_0 = (Keyword)cBYTES11EnumLiteralDeclaration_77.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES12EnumLiteralDeclaration_78 = (EnumLiteralDeclaration)cAlternatives.eContents().get(78);
		private final Keyword cBYTES12Bytes12Keyword_78_0 = (Keyword)cBYTES12EnumLiteralDeclaration_78.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES13EnumLiteralDeclaration_79 = (EnumLiteralDeclaration)cAlternatives.eContents().get(79);
		private final Keyword cBYTES13Bytes13Keyword_79_0 = (Keyword)cBYTES13EnumLiteralDeclaration_79.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES14EnumLiteralDeclaration_80 = (EnumLiteralDeclaration)cAlternatives.eContents().get(80);
		private final Keyword cBYTES14Bytes14Keyword_80_0 = (Keyword)cBYTES14EnumLiteralDeclaration_80.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES15EnumLiteralDeclaration_81 = (EnumLiteralDeclaration)cAlternatives.eContents().get(81);
		private final Keyword cBYTES15Bytes15Keyword_81_0 = (Keyword)cBYTES15EnumLiteralDeclaration_81.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES16EnumLiteralDeclaration_82 = (EnumLiteralDeclaration)cAlternatives.eContents().get(82);
		private final Keyword cBYTES16Bytes16Keyword_82_0 = (Keyword)cBYTES16EnumLiteralDeclaration_82.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES17EnumLiteralDeclaration_83 = (EnumLiteralDeclaration)cAlternatives.eContents().get(83);
		private final Keyword cBYTES17Bytes17Keyword_83_0 = (Keyword)cBYTES17EnumLiteralDeclaration_83.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES18EnumLiteralDeclaration_84 = (EnumLiteralDeclaration)cAlternatives.eContents().get(84);
		private final Keyword cBYTES18Bytes18Keyword_84_0 = (Keyword)cBYTES18EnumLiteralDeclaration_84.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES19EnumLiteralDeclaration_85 = (EnumLiteralDeclaration)cAlternatives.eContents().get(85);
		private final Keyword cBYTES19Bytes19Keyword_85_0 = (Keyword)cBYTES19EnumLiteralDeclaration_85.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES20EnumLiteralDeclaration_86 = (EnumLiteralDeclaration)cAlternatives.eContents().get(86);
		private final Keyword cBYTES20Bytes20Keyword_86_0 = (Keyword)cBYTES20EnumLiteralDeclaration_86.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES21EnumLiteralDeclaration_87 = (EnumLiteralDeclaration)cAlternatives.eContents().get(87);
		private final Keyword cBYTES21Bytes21Keyword_87_0 = (Keyword)cBYTES21EnumLiteralDeclaration_87.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES22EnumLiteralDeclaration_88 = (EnumLiteralDeclaration)cAlternatives.eContents().get(88);
		private final Keyword cBYTES22Bytes22Keyword_88_0 = (Keyword)cBYTES22EnumLiteralDeclaration_88.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES23EnumLiteralDeclaration_89 = (EnumLiteralDeclaration)cAlternatives.eContents().get(89);
		private final Keyword cBYTES23Bytes23Keyword_89_0 = (Keyword)cBYTES23EnumLiteralDeclaration_89.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES24EnumLiteralDeclaration_90 = (EnumLiteralDeclaration)cAlternatives.eContents().get(90);
		private final Keyword cBYTES24Bytes24Keyword_90_0 = (Keyword)cBYTES24EnumLiteralDeclaration_90.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES25EnumLiteralDeclaration_91 = (EnumLiteralDeclaration)cAlternatives.eContents().get(91);
		private final Keyword cBYTES25Bytes25Keyword_91_0 = (Keyword)cBYTES25EnumLiteralDeclaration_91.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES26EnumLiteralDeclaration_92 = (EnumLiteralDeclaration)cAlternatives.eContents().get(92);
		private final Keyword cBYTES26Bytes26Keyword_92_0 = (Keyword)cBYTES26EnumLiteralDeclaration_92.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES27EnumLiteralDeclaration_93 = (EnumLiteralDeclaration)cAlternatives.eContents().get(93);
		private final Keyword cBYTES27Bytes27Keyword_93_0 = (Keyword)cBYTES27EnumLiteralDeclaration_93.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES28EnumLiteralDeclaration_94 = (EnumLiteralDeclaration)cAlternatives.eContents().get(94);
		private final Keyword cBYTES28Bytes28Keyword_94_0 = (Keyword)cBYTES28EnumLiteralDeclaration_94.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES29EnumLiteralDeclaration_95 = (EnumLiteralDeclaration)cAlternatives.eContents().get(95);
		private final Keyword cBYTES29Bytes29Keyword_95_0 = (Keyword)cBYTES29EnumLiteralDeclaration_95.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES30EnumLiteralDeclaration_96 = (EnumLiteralDeclaration)cAlternatives.eContents().get(96);
		private final Keyword cBYTES30Bytes30Keyword_96_0 = (Keyword)cBYTES30EnumLiteralDeclaration_96.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES31EnumLiteralDeclaration_97 = (EnumLiteralDeclaration)cAlternatives.eContents().get(97);
		private final Keyword cBYTES31Bytes31Keyword_97_0 = (Keyword)cBYTES31EnumLiteralDeclaration_97.eContents().get(0);
		private final EnumLiteralDeclaration cBYTES32EnumLiteralDeclaration_98 = (EnumLiteralDeclaration)cAlternatives.eContents().get(98);
		private final Keyword cBYTES32Bytes32Keyword_98_0 = (Keyword)cBYTES32EnumLiteralDeclaration_98.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_99 = (EnumLiteralDeclaration)cAlternatives.eContents().get(99);
		private final Keyword cSTRINGStringKeyword_99_0 = (Keyword)cSTRINGEnumLiteralDeclaration_99.eContents().get(0);
		private final EnumLiteralDeclaration cADDRESSEnumLiteralDeclaration_100 = (EnumLiteralDeclaration)cAlternatives.eContents().get(100);
		private final Keyword cADDRESSAddressKeyword_100_0 = (Keyword)cADDRESSEnumLiteralDeclaration_100.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_101 = (EnumLiteralDeclaration)cAlternatives.eContents().get(101);
		private final Keyword cBOOLBoolKeyword_101_0 = (Keyword)cBOOLEnumLiteralDeclaration_101.eContents().get(0);
		private final EnumLiteralDeclaration cREALEnumLiteralDeclaration_102 = (EnumLiteralDeclaration)cAlternatives.eContents().get(102);
		private final Keyword cREALRealKeyword_102_0 = (Keyword)cREALEnumLiteralDeclaration_102.eContents().get(0);
		private final EnumLiteralDeclaration cUREALEnumLiteralDeclaration_103 = (EnumLiteralDeclaration)cAlternatives.eContents().get(103);
		private final Keyword cUREALUrealKeyword_103_0 = (Keyword)cUREALEnumLiteralDeclaration_103.eContents().get(0);
		
		//enum ElementaryTypeNameEnum: // INT
		//	INT="int" | INT16="int16" | INT24="int24" | INT32="int32" | INT40="int40" | INT48="int48" | INT56="int56" |
		//	INT64="int64" | INT72="int72" | INT80="int80" | INT88="int88" | INT96="int96" | INT104="int104" | INT112="int112" |
		//	INT120="int120" | INT128="int128" | INT136="int136" | INT144="int144" | INT152="int152" | INT160="int160" |
		//	INT168="int168" | INT178="int178" | INT184="int184" | INT192="int192" | INT200="int200" | INT208="int208" |
		//	INT216="int216" | INT224="int224" | INT232="int232" | INT240="int240" | INT248="int248" | INT256="int256" | // UINT
		//	UINT="uint" | UINT8="uint8" | UINT16="uint16" | UNIT24="uint24" | UINT32="uint32" | UINT40="uint40" | UINT48="uint48" |
		//	UNIT56="uint56" | UINT64="uint64" | UINT72="uint72" | UINT80="uint80" | UINT88="uint88" | UINT96="uint96" |
		//	UINT104="uint104" | UINT112="uint112" | UINT120="uint120" | UINT128="uint128" | UINT136="uint136" | UINT144="uint144"
		//	| UINT152="uint152" | UINT160="uint160" | UINT168="uint168" | UINT178="uint178" | UINT184="uint184" |
		//	UINT192="uint192" | UINT200="uint200" | UINT208="uint208" | UINT216="uint216" | UINT244="uint224" | UINT232="uint232"
		//	| UINT240="uint240" | UINT248="uint248" | UINT256="uint256" | // BYT
		//	BYTE="byte" | BYTES="bytes" | BYTES1="bytes1" | BYTES2="bytes2" | BYTES3="bytes3" | BYTES4="bytes4" | BYTES5="bytes5" |
		//	BYTES6="bytes6" | BYTES7="bytes7" | BYTES8="bytes8" | BYTES9="bytes9" | BYTES10="bytes10" | BYTES11="bytes11" |
		//	BYTES12="bytes12" | BYTES13="bytes13" | BYTES14="bytes14" | BYTES15="bytes15" | BYTES16="bytes16" | BYTES17="bytes17"
		//	| BYTES18="bytes18" | BYTES19="bytes19" | BYTES20="bytes20" | BYTES21="bytes21" | BYTES22="bytes22" |
		//	BYTES23="bytes23" | BYTES24="bytes24" | BYTES25="bytes25" | BYTES26="bytes26" | BYTES27="bytes27" | BYTES28="bytes28"
		//	| BYTES29="bytes29" | BYTES30="bytes30" | BYTES31="bytes31" | BYTES32="bytes32" | // Other
		//	STRING="string" | ADDRESS="address" | BOOL="bool" | REAL="real" | UREAL="ureal";
		public EnumRule getRule() { return rule; }
		
		//// INT
		//INT="int" | INT16="int16" | INT24="int24" | INT32="int32" | INT40="int40" | INT48="int48" | INT56="int56" |
		//INT64="int64" | INT72="int72" | INT80="int80" | INT88="int88" | INT96="int96" | INT104="int104" | INT112="int112" |
		//INT120="int120" | INT128="int128" | INT136="int136" | INT144="int144" | INT152="int152" | INT160="int160" |
		//INT168="int168" | INT178="int178" | INT184="int184" | INT192="int192" | INT200="int200" | INT208="int208" |
		//INT216="int216" | INT224="int224" | INT232="int232" | INT240="int240" | INT248="int248" | INT256="int256" | // UINT
		//UINT="uint" | UINT8="uint8" | UINT16="uint16" | UNIT24="uint24" | UINT32="uint32" | UINT40="uint40" | UINT48="uint48" |
		//UNIT56="uint56" | UINT64="uint64" | UINT72="uint72" | UINT80="uint80" | UINT88="uint88" | UINT96="uint96" |
		//UINT104="uint104" | UINT112="uint112" | UINT120="uint120" | UINT128="uint128" | UINT136="uint136" | UINT144="uint144"
		//| UINT152="uint152" | UINT160="uint160" | UINT168="uint168" | UINT178="uint178" | UINT184="uint184" |
		//UINT192="uint192" | UINT200="uint200" | UINT208="uint208" | UINT216="uint216" | UINT244="uint224" | UINT232="uint232"
		//| UINT240="uint240" | UINT248="uint248" | UINT256="uint256" | // BYT
		//BYTE="byte" | BYTES="bytes" | BYTES1="bytes1" | BYTES2="bytes2" | BYTES3="bytes3" | BYTES4="bytes4" | BYTES5="bytes5" |
		//BYTES6="bytes6" | BYTES7="bytes7" | BYTES8="bytes8" | BYTES9="bytes9" | BYTES10="bytes10" | BYTES11="bytes11" |
		//BYTES12="bytes12" | BYTES13="bytes13" | BYTES14="bytes14" | BYTES15="bytes15" | BYTES16="bytes16" | BYTES17="bytes17"
		//| BYTES18="bytes18" | BYTES19="bytes19" | BYTES20="bytes20" | BYTES21="bytes21" | BYTES22="bytes22" |
		//BYTES23="bytes23" | BYTES24="bytes24" | BYTES25="bytes25" | BYTES26="bytes26" | BYTES27="bytes27" | BYTES28="bytes28"
		//| BYTES29="bytes29" | BYTES30="bytes30" | BYTES31="bytes31" | BYTES32="bytes32" | // Other
		//STRING="string" | ADDRESS="address" | BOOL="bool" | REAL="real" | UREAL="ureal"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// INT
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }
		
		//"int"
		public Keyword getINTIntKeyword_0_0() { return cINTIntKeyword_0_0; }
		
		//INT16="int16"
		public EnumLiteralDeclaration getINT16EnumLiteralDeclaration_1() { return cINT16EnumLiteralDeclaration_1; }
		
		//"int16"
		public Keyword getINT16Int16Keyword_1_0() { return cINT16Int16Keyword_1_0; }
		
		//INT24="int24"
		public EnumLiteralDeclaration getINT24EnumLiteralDeclaration_2() { return cINT24EnumLiteralDeclaration_2; }
		
		//"int24"
		public Keyword getINT24Int24Keyword_2_0() { return cINT24Int24Keyword_2_0; }
		
		//INT32="int32"
		public EnumLiteralDeclaration getINT32EnumLiteralDeclaration_3() { return cINT32EnumLiteralDeclaration_3; }
		
		//"int32"
		public Keyword getINT32Int32Keyword_3_0() { return cINT32Int32Keyword_3_0; }
		
		//INT40="int40"
		public EnumLiteralDeclaration getINT40EnumLiteralDeclaration_4() { return cINT40EnumLiteralDeclaration_4; }
		
		//"int40"
		public Keyword getINT40Int40Keyword_4_0() { return cINT40Int40Keyword_4_0; }
		
		//INT48="int48"
		public EnumLiteralDeclaration getINT48EnumLiteralDeclaration_5() { return cINT48EnumLiteralDeclaration_5; }
		
		//"int48"
		public Keyword getINT48Int48Keyword_5_0() { return cINT48Int48Keyword_5_0; }
		
		//INT56="int56"
		public EnumLiteralDeclaration getINT56EnumLiteralDeclaration_6() { return cINT56EnumLiteralDeclaration_6; }
		
		//"int56"
		public Keyword getINT56Int56Keyword_6_0() { return cINT56Int56Keyword_6_0; }
		
		//INT64="int64"
		public EnumLiteralDeclaration getINT64EnumLiteralDeclaration_7() { return cINT64EnumLiteralDeclaration_7; }
		
		//"int64"
		public Keyword getINT64Int64Keyword_7_0() { return cINT64Int64Keyword_7_0; }
		
		//INT72="int72"
		public EnumLiteralDeclaration getINT72EnumLiteralDeclaration_8() { return cINT72EnumLiteralDeclaration_8; }
		
		//"int72"
		public Keyword getINT72Int72Keyword_8_0() { return cINT72Int72Keyword_8_0; }
		
		//INT80="int80"
		public EnumLiteralDeclaration getINT80EnumLiteralDeclaration_9() { return cINT80EnumLiteralDeclaration_9; }
		
		//"int80"
		public Keyword getINT80Int80Keyword_9_0() { return cINT80Int80Keyword_9_0; }
		
		//INT88="int88"
		public EnumLiteralDeclaration getINT88EnumLiteralDeclaration_10() { return cINT88EnumLiteralDeclaration_10; }
		
		//"int88"
		public Keyword getINT88Int88Keyword_10_0() { return cINT88Int88Keyword_10_0; }
		
		//INT96="int96"
		public EnumLiteralDeclaration getINT96EnumLiteralDeclaration_11() { return cINT96EnumLiteralDeclaration_11; }
		
		//"int96"
		public Keyword getINT96Int96Keyword_11_0() { return cINT96Int96Keyword_11_0; }
		
		//INT104="int104"
		public EnumLiteralDeclaration getINT104EnumLiteralDeclaration_12() { return cINT104EnumLiteralDeclaration_12; }
		
		//"int104"
		public Keyword getINT104Int104Keyword_12_0() { return cINT104Int104Keyword_12_0; }
		
		//INT112="int112"
		public EnumLiteralDeclaration getINT112EnumLiteralDeclaration_13() { return cINT112EnumLiteralDeclaration_13; }
		
		//"int112"
		public Keyword getINT112Int112Keyword_13_0() { return cINT112Int112Keyword_13_0; }
		
		//INT120="int120"
		public EnumLiteralDeclaration getINT120EnumLiteralDeclaration_14() { return cINT120EnumLiteralDeclaration_14; }
		
		//"int120"
		public Keyword getINT120Int120Keyword_14_0() { return cINT120Int120Keyword_14_0; }
		
		//INT128="int128"
		public EnumLiteralDeclaration getINT128EnumLiteralDeclaration_15() { return cINT128EnumLiteralDeclaration_15; }
		
		//"int128"
		public Keyword getINT128Int128Keyword_15_0() { return cINT128Int128Keyword_15_0; }
		
		//INT136="int136"
		public EnumLiteralDeclaration getINT136EnumLiteralDeclaration_16() { return cINT136EnumLiteralDeclaration_16; }
		
		//"int136"
		public Keyword getINT136Int136Keyword_16_0() { return cINT136Int136Keyword_16_0; }
		
		//INT144="int144"
		public EnumLiteralDeclaration getINT144EnumLiteralDeclaration_17() { return cINT144EnumLiteralDeclaration_17; }
		
		//"int144"
		public Keyword getINT144Int144Keyword_17_0() { return cINT144Int144Keyword_17_0; }
		
		//INT152="int152"
		public EnumLiteralDeclaration getINT152EnumLiteralDeclaration_18() { return cINT152EnumLiteralDeclaration_18; }
		
		//"int152"
		public Keyword getINT152Int152Keyword_18_0() { return cINT152Int152Keyword_18_0; }
		
		//INT160="int160"
		public EnumLiteralDeclaration getINT160EnumLiteralDeclaration_19() { return cINT160EnumLiteralDeclaration_19; }
		
		//"int160"
		public Keyword getINT160Int160Keyword_19_0() { return cINT160Int160Keyword_19_0; }
		
		//INT168="int168"
		public EnumLiteralDeclaration getINT168EnumLiteralDeclaration_20() { return cINT168EnumLiteralDeclaration_20; }
		
		//"int168"
		public Keyword getINT168Int168Keyword_20_0() { return cINT168Int168Keyword_20_0; }
		
		//INT178="int178"
		public EnumLiteralDeclaration getINT178EnumLiteralDeclaration_21() { return cINT178EnumLiteralDeclaration_21; }
		
		//"int178"
		public Keyword getINT178Int178Keyword_21_0() { return cINT178Int178Keyword_21_0; }
		
		//INT184="int184"
		public EnumLiteralDeclaration getINT184EnumLiteralDeclaration_22() { return cINT184EnumLiteralDeclaration_22; }
		
		//"int184"
		public Keyword getINT184Int184Keyword_22_0() { return cINT184Int184Keyword_22_0; }
		
		//INT192="int192"
		public EnumLiteralDeclaration getINT192EnumLiteralDeclaration_23() { return cINT192EnumLiteralDeclaration_23; }
		
		//"int192"
		public Keyword getINT192Int192Keyword_23_0() { return cINT192Int192Keyword_23_0; }
		
		//INT200="int200"
		public EnumLiteralDeclaration getINT200EnumLiteralDeclaration_24() { return cINT200EnumLiteralDeclaration_24; }
		
		//"int200"
		public Keyword getINT200Int200Keyword_24_0() { return cINT200Int200Keyword_24_0; }
		
		//INT208="int208"
		public EnumLiteralDeclaration getINT208EnumLiteralDeclaration_25() { return cINT208EnumLiteralDeclaration_25; }
		
		//"int208"
		public Keyword getINT208Int208Keyword_25_0() { return cINT208Int208Keyword_25_0; }
		
		//INT216="int216"
		public EnumLiteralDeclaration getINT216EnumLiteralDeclaration_26() { return cINT216EnumLiteralDeclaration_26; }
		
		//"int216"
		public Keyword getINT216Int216Keyword_26_0() { return cINT216Int216Keyword_26_0; }
		
		//INT224="int224"
		public EnumLiteralDeclaration getINT224EnumLiteralDeclaration_27() { return cINT224EnumLiteralDeclaration_27; }
		
		//"int224"
		public Keyword getINT224Int224Keyword_27_0() { return cINT224Int224Keyword_27_0; }
		
		//INT232="int232"
		public EnumLiteralDeclaration getINT232EnumLiteralDeclaration_28() { return cINT232EnumLiteralDeclaration_28; }
		
		//"int232"
		public Keyword getINT232Int232Keyword_28_0() { return cINT232Int232Keyword_28_0; }
		
		//INT240="int240"
		public EnumLiteralDeclaration getINT240EnumLiteralDeclaration_29() { return cINT240EnumLiteralDeclaration_29; }
		
		//"int240"
		public Keyword getINT240Int240Keyword_29_0() { return cINT240Int240Keyword_29_0; }
		
		//INT248="int248"
		public EnumLiteralDeclaration getINT248EnumLiteralDeclaration_30() { return cINT248EnumLiteralDeclaration_30; }
		
		//"int248"
		public Keyword getINT248Int248Keyword_30_0() { return cINT248Int248Keyword_30_0; }
		
		//INT256="int256"
		public EnumLiteralDeclaration getINT256EnumLiteralDeclaration_31() { return cINT256EnumLiteralDeclaration_31; }
		
		//"int256"
		public Keyword getINT256Int256Keyword_31_0() { return cINT256Int256Keyword_31_0; }
		
		//// UINT
		//UINT="uint"
		public EnumLiteralDeclaration getUINTEnumLiteralDeclaration_32() { return cUINTEnumLiteralDeclaration_32; }
		
		//"uint"
		public Keyword getUINTUintKeyword_32_0() { return cUINTUintKeyword_32_0; }
		
		//UINT8="uint8"
		public EnumLiteralDeclaration getUINT8EnumLiteralDeclaration_33() { return cUINT8EnumLiteralDeclaration_33; }
		
		//"uint8"
		public Keyword getUINT8Uint8Keyword_33_0() { return cUINT8Uint8Keyword_33_0; }
		
		//UINT16="uint16"
		public EnumLiteralDeclaration getUINT16EnumLiteralDeclaration_34() { return cUINT16EnumLiteralDeclaration_34; }
		
		//"uint16"
		public Keyword getUINT16Uint16Keyword_34_0() { return cUINT16Uint16Keyword_34_0; }
		
		//UNIT24="uint24"
		public EnumLiteralDeclaration getUNIT24EnumLiteralDeclaration_35() { return cUNIT24EnumLiteralDeclaration_35; }
		
		//"uint24"
		public Keyword getUNIT24Uint24Keyword_35_0() { return cUNIT24Uint24Keyword_35_0; }
		
		//UINT32="uint32"
		public EnumLiteralDeclaration getUINT32EnumLiteralDeclaration_36() { return cUINT32EnumLiteralDeclaration_36; }
		
		//"uint32"
		public Keyword getUINT32Uint32Keyword_36_0() { return cUINT32Uint32Keyword_36_0; }
		
		//UINT40="uint40"
		public EnumLiteralDeclaration getUINT40EnumLiteralDeclaration_37() { return cUINT40EnumLiteralDeclaration_37; }
		
		//"uint40"
		public Keyword getUINT40Uint40Keyword_37_0() { return cUINT40Uint40Keyword_37_0; }
		
		//UINT48="uint48"
		public EnumLiteralDeclaration getUINT48EnumLiteralDeclaration_38() { return cUINT48EnumLiteralDeclaration_38; }
		
		//"uint48"
		public Keyword getUINT48Uint48Keyword_38_0() { return cUINT48Uint48Keyword_38_0; }
		
		//UNIT56="uint56"
		public EnumLiteralDeclaration getUNIT56EnumLiteralDeclaration_39() { return cUNIT56EnumLiteralDeclaration_39; }
		
		//"uint56"
		public Keyword getUNIT56Uint56Keyword_39_0() { return cUNIT56Uint56Keyword_39_0; }
		
		//UINT64="uint64"
		public EnumLiteralDeclaration getUINT64EnumLiteralDeclaration_40() { return cUINT64EnumLiteralDeclaration_40; }
		
		//"uint64"
		public Keyword getUINT64Uint64Keyword_40_0() { return cUINT64Uint64Keyword_40_0; }
		
		//UINT72="uint72"
		public EnumLiteralDeclaration getUINT72EnumLiteralDeclaration_41() { return cUINT72EnumLiteralDeclaration_41; }
		
		//"uint72"
		public Keyword getUINT72Uint72Keyword_41_0() { return cUINT72Uint72Keyword_41_0; }
		
		//UINT80="uint80"
		public EnumLiteralDeclaration getUINT80EnumLiteralDeclaration_42() { return cUINT80EnumLiteralDeclaration_42; }
		
		//"uint80"
		public Keyword getUINT80Uint80Keyword_42_0() { return cUINT80Uint80Keyword_42_0; }
		
		//UINT88="uint88"
		public EnumLiteralDeclaration getUINT88EnumLiteralDeclaration_43() { return cUINT88EnumLiteralDeclaration_43; }
		
		//"uint88"
		public Keyword getUINT88Uint88Keyword_43_0() { return cUINT88Uint88Keyword_43_0; }
		
		//UINT96="uint96"
		public EnumLiteralDeclaration getUINT96EnumLiteralDeclaration_44() { return cUINT96EnumLiteralDeclaration_44; }
		
		//"uint96"
		public Keyword getUINT96Uint96Keyword_44_0() { return cUINT96Uint96Keyword_44_0; }
		
		//UINT104="uint104"
		public EnumLiteralDeclaration getUINT104EnumLiteralDeclaration_45() { return cUINT104EnumLiteralDeclaration_45; }
		
		//"uint104"
		public Keyword getUINT104Uint104Keyword_45_0() { return cUINT104Uint104Keyword_45_0; }
		
		//UINT112="uint112"
		public EnumLiteralDeclaration getUINT112EnumLiteralDeclaration_46() { return cUINT112EnumLiteralDeclaration_46; }
		
		//"uint112"
		public Keyword getUINT112Uint112Keyword_46_0() { return cUINT112Uint112Keyword_46_0; }
		
		//UINT120="uint120"
		public EnumLiteralDeclaration getUINT120EnumLiteralDeclaration_47() { return cUINT120EnumLiteralDeclaration_47; }
		
		//"uint120"
		public Keyword getUINT120Uint120Keyword_47_0() { return cUINT120Uint120Keyword_47_0; }
		
		//UINT128="uint128"
		public EnumLiteralDeclaration getUINT128EnumLiteralDeclaration_48() { return cUINT128EnumLiteralDeclaration_48; }
		
		//"uint128"
		public Keyword getUINT128Uint128Keyword_48_0() { return cUINT128Uint128Keyword_48_0; }
		
		//UINT136="uint136"
		public EnumLiteralDeclaration getUINT136EnumLiteralDeclaration_49() { return cUINT136EnumLiteralDeclaration_49; }
		
		//"uint136"
		public Keyword getUINT136Uint136Keyword_49_0() { return cUINT136Uint136Keyword_49_0; }
		
		//UINT144="uint144"
		public EnumLiteralDeclaration getUINT144EnumLiteralDeclaration_50() { return cUINT144EnumLiteralDeclaration_50; }
		
		//"uint144"
		public Keyword getUINT144Uint144Keyword_50_0() { return cUINT144Uint144Keyword_50_0; }
		
		//UINT152="uint152"
		public EnumLiteralDeclaration getUINT152EnumLiteralDeclaration_51() { return cUINT152EnumLiteralDeclaration_51; }
		
		//"uint152"
		public Keyword getUINT152Uint152Keyword_51_0() { return cUINT152Uint152Keyword_51_0; }
		
		//UINT160="uint160"
		public EnumLiteralDeclaration getUINT160EnumLiteralDeclaration_52() { return cUINT160EnumLiteralDeclaration_52; }
		
		//"uint160"
		public Keyword getUINT160Uint160Keyword_52_0() { return cUINT160Uint160Keyword_52_0; }
		
		//UINT168="uint168"
		public EnumLiteralDeclaration getUINT168EnumLiteralDeclaration_53() { return cUINT168EnumLiteralDeclaration_53; }
		
		//"uint168"
		public Keyword getUINT168Uint168Keyword_53_0() { return cUINT168Uint168Keyword_53_0; }
		
		//UINT178="uint178"
		public EnumLiteralDeclaration getUINT178EnumLiteralDeclaration_54() { return cUINT178EnumLiteralDeclaration_54; }
		
		//"uint178"
		public Keyword getUINT178Uint178Keyword_54_0() { return cUINT178Uint178Keyword_54_0; }
		
		//UINT184="uint184"
		public EnumLiteralDeclaration getUINT184EnumLiteralDeclaration_55() { return cUINT184EnumLiteralDeclaration_55; }
		
		//"uint184"
		public Keyword getUINT184Uint184Keyword_55_0() { return cUINT184Uint184Keyword_55_0; }
		
		//UINT192="uint192"
		public EnumLiteralDeclaration getUINT192EnumLiteralDeclaration_56() { return cUINT192EnumLiteralDeclaration_56; }
		
		//"uint192"
		public Keyword getUINT192Uint192Keyword_56_0() { return cUINT192Uint192Keyword_56_0; }
		
		//UINT200="uint200"
		public EnumLiteralDeclaration getUINT200EnumLiteralDeclaration_57() { return cUINT200EnumLiteralDeclaration_57; }
		
		//"uint200"
		public Keyword getUINT200Uint200Keyword_57_0() { return cUINT200Uint200Keyword_57_0; }
		
		//UINT208="uint208"
		public EnumLiteralDeclaration getUINT208EnumLiteralDeclaration_58() { return cUINT208EnumLiteralDeclaration_58; }
		
		//"uint208"
		public Keyword getUINT208Uint208Keyword_58_0() { return cUINT208Uint208Keyword_58_0; }
		
		//UINT216="uint216"
		public EnumLiteralDeclaration getUINT216EnumLiteralDeclaration_59() { return cUINT216EnumLiteralDeclaration_59; }
		
		//"uint216"
		public Keyword getUINT216Uint216Keyword_59_0() { return cUINT216Uint216Keyword_59_0; }
		
		//UINT244="uint224"
		public EnumLiteralDeclaration getUINT244EnumLiteralDeclaration_60() { return cUINT244EnumLiteralDeclaration_60; }
		
		//"uint224"
		public Keyword getUINT244Uint224Keyword_60_0() { return cUINT244Uint224Keyword_60_0; }
		
		//UINT232="uint232"
		public EnumLiteralDeclaration getUINT232EnumLiteralDeclaration_61() { return cUINT232EnumLiteralDeclaration_61; }
		
		//"uint232"
		public Keyword getUINT232Uint232Keyword_61_0() { return cUINT232Uint232Keyword_61_0; }
		
		//UINT240="uint240"
		public EnumLiteralDeclaration getUINT240EnumLiteralDeclaration_62() { return cUINT240EnumLiteralDeclaration_62; }
		
		//"uint240"
		public Keyword getUINT240Uint240Keyword_62_0() { return cUINT240Uint240Keyword_62_0; }
		
		//UINT248="uint248"
		public EnumLiteralDeclaration getUINT248EnumLiteralDeclaration_63() { return cUINT248EnumLiteralDeclaration_63; }
		
		//"uint248"
		public Keyword getUINT248Uint248Keyword_63_0() { return cUINT248Uint248Keyword_63_0; }
		
		//UINT256="uint256"
		public EnumLiteralDeclaration getUINT256EnumLiteralDeclaration_64() { return cUINT256EnumLiteralDeclaration_64; }
		
		//"uint256"
		public Keyword getUINT256Uint256Keyword_64_0() { return cUINT256Uint256Keyword_64_0; }
		
		//// BYT
		//BYTE="byte"
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_65() { return cBYTEEnumLiteralDeclaration_65; }
		
		//"byte"
		public Keyword getBYTEByteKeyword_65_0() { return cBYTEByteKeyword_65_0; }
		
		//BYTES="bytes"
		public EnumLiteralDeclaration getBYTESEnumLiteralDeclaration_66() { return cBYTESEnumLiteralDeclaration_66; }
		
		//"bytes"
		public Keyword getBYTESBytesKeyword_66_0() { return cBYTESBytesKeyword_66_0; }
		
		//BYTES1="bytes1"
		public EnumLiteralDeclaration getBYTES1EnumLiteralDeclaration_67() { return cBYTES1EnumLiteralDeclaration_67; }
		
		//"bytes1"
		public Keyword getBYTES1Bytes1Keyword_67_0() { return cBYTES1Bytes1Keyword_67_0; }
		
		//BYTES2="bytes2"
		public EnumLiteralDeclaration getBYTES2EnumLiteralDeclaration_68() { return cBYTES2EnumLiteralDeclaration_68; }
		
		//"bytes2"
		public Keyword getBYTES2Bytes2Keyword_68_0() { return cBYTES2Bytes2Keyword_68_0; }
		
		//BYTES3="bytes3"
		public EnumLiteralDeclaration getBYTES3EnumLiteralDeclaration_69() { return cBYTES3EnumLiteralDeclaration_69; }
		
		//"bytes3"
		public Keyword getBYTES3Bytes3Keyword_69_0() { return cBYTES3Bytes3Keyword_69_0; }
		
		//BYTES4="bytes4"
		public EnumLiteralDeclaration getBYTES4EnumLiteralDeclaration_70() { return cBYTES4EnumLiteralDeclaration_70; }
		
		//"bytes4"
		public Keyword getBYTES4Bytes4Keyword_70_0() { return cBYTES4Bytes4Keyword_70_0; }
		
		//BYTES5="bytes5"
		public EnumLiteralDeclaration getBYTES5EnumLiteralDeclaration_71() { return cBYTES5EnumLiteralDeclaration_71; }
		
		//"bytes5"
		public Keyword getBYTES5Bytes5Keyword_71_0() { return cBYTES5Bytes5Keyword_71_0; }
		
		//BYTES6="bytes6"
		public EnumLiteralDeclaration getBYTES6EnumLiteralDeclaration_72() { return cBYTES6EnumLiteralDeclaration_72; }
		
		//"bytes6"
		public Keyword getBYTES6Bytes6Keyword_72_0() { return cBYTES6Bytes6Keyword_72_0; }
		
		//BYTES7="bytes7"
		public EnumLiteralDeclaration getBYTES7EnumLiteralDeclaration_73() { return cBYTES7EnumLiteralDeclaration_73; }
		
		//"bytes7"
		public Keyword getBYTES7Bytes7Keyword_73_0() { return cBYTES7Bytes7Keyword_73_0; }
		
		//BYTES8="bytes8"
		public EnumLiteralDeclaration getBYTES8EnumLiteralDeclaration_74() { return cBYTES8EnumLiteralDeclaration_74; }
		
		//"bytes8"
		public Keyword getBYTES8Bytes8Keyword_74_0() { return cBYTES8Bytes8Keyword_74_0; }
		
		//BYTES9="bytes9"
		public EnumLiteralDeclaration getBYTES9EnumLiteralDeclaration_75() { return cBYTES9EnumLiteralDeclaration_75; }
		
		//"bytes9"
		public Keyword getBYTES9Bytes9Keyword_75_0() { return cBYTES9Bytes9Keyword_75_0; }
		
		//BYTES10="bytes10"
		public EnumLiteralDeclaration getBYTES10EnumLiteralDeclaration_76() { return cBYTES10EnumLiteralDeclaration_76; }
		
		//"bytes10"
		public Keyword getBYTES10Bytes10Keyword_76_0() { return cBYTES10Bytes10Keyword_76_0; }
		
		//BYTES11="bytes11"
		public EnumLiteralDeclaration getBYTES11EnumLiteralDeclaration_77() { return cBYTES11EnumLiteralDeclaration_77; }
		
		//"bytes11"
		public Keyword getBYTES11Bytes11Keyword_77_0() { return cBYTES11Bytes11Keyword_77_0; }
		
		//BYTES12="bytes12"
		public EnumLiteralDeclaration getBYTES12EnumLiteralDeclaration_78() { return cBYTES12EnumLiteralDeclaration_78; }
		
		//"bytes12"
		public Keyword getBYTES12Bytes12Keyword_78_0() { return cBYTES12Bytes12Keyword_78_0; }
		
		//BYTES13="bytes13"
		public EnumLiteralDeclaration getBYTES13EnumLiteralDeclaration_79() { return cBYTES13EnumLiteralDeclaration_79; }
		
		//"bytes13"
		public Keyword getBYTES13Bytes13Keyword_79_0() { return cBYTES13Bytes13Keyword_79_0; }
		
		//BYTES14="bytes14"
		public EnumLiteralDeclaration getBYTES14EnumLiteralDeclaration_80() { return cBYTES14EnumLiteralDeclaration_80; }
		
		//"bytes14"
		public Keyword getBYTES14Bytes14Keyword_80_0() { return cBYTES14Bytes14Keyword_80_0; }
		
		//BYTES15="bytes15"
		public EnumLiteralDeclaration getBYTES15EnumLiteralDeclaration_81() { return cBYTES15EnumLiteralDeclaration_81; }
		
		//"bytes15"
		public Keyword getBYTES15Bytes15Keyword_81_0() { return cBYTES15Bytes15Keyword_81_0; }
		
		//BYTES16="bytes16"
		public EnumLiteralDeclaration getBYTES16EnumLiteralDeclaration_82() { return cBYTES16EnumLiteralDeclaration_82; }
		
		//"bytes16"
		public Keyword getBYTES16Bytes16Keyword_82_0() { return cBYTES16Bytes16Keyword_82_0; }
		
		//BYTES17="bytes17"
		public EnumLiteralDeclaration getBYTES17EnumLiteralDeclaration_83() { return cBYTES17EnumLiteralDeclaration_83; }
		
		//"bytes17"
		public Keyword getBYTES17Bytes17Keyword_83_0() { return cBYTES17Bytes17Keyword_83_0; }
		
		//BYTES18="bytes18"
		public EnumLiteralDeclaration getBYTES18EnumLiteralDeclaration_84() { return cBYTES18EnumLiteralDeclaration_84; }
		
		//"bytes18"
		public Keyword getBYTES18Bytes18Keyword_84_0() { return cBYTES18Bytes18Keyword_84_0; }
		
		//BYTES19="bytes19"
		public EnumLiteralDeclaration getBYTES19EnumLiteralDeclaration_85() { return cBYTES19EnumLiteralDeclaration_85; }
		
		//"bytes19"
		public Keyword getBYTES19Bytes19Keyword_85_0() { return cBYTES19Bytes19Keyword_85_0; }
		
		//BYTES20="bytes20"
		public EnumLiteralDeclaration getBYTES20EnumLiteralDeclaration_86() { return cBYTES20EnumLiteralDeclaration_86; }
		
		//"bytes20"
		public Keyword getBYTES20Bytes20Keyword_86_0() { return cBYTES20Bytes20Keyword_86_0; }
		
		//BYTES21="bytes21"
		public EnumLiteralDeclaration getBYTES21EnumLiteralDeclaration_87() { return cBYTES21EnumLiteralDeclaration_87; }
		
		//"bytes21"
		public Keyword getBYTES21Bytes21Keyword_87_0() { return cBYTES21Bytes21Keyword_87_0; }
		
		//BYTES22="bytes22"
		public EnumLiteralDeclaration getBYTES22EnumLiteralDeclaration_88() { return cBYTES22EnumLiteralDeclaration_88; }
		
		//"bytes22"
		public Keyword getBYTES22Bytes22Keyword_88_0() { return cBYTES22Bytes22Keyword_88_0; }
		
		//BYTES23="bytes23"
		public EnumLiteralDeclaration getBYTES23EnumLiteralDeclaration_89() { return cBYTES23EnumLiteralDeclaration_89; }
		
		//"bytes23"
		public Keyword getBYTES23Bytes23Keyword_89_0() { return cBYTES23Bytes23Keyword_89_0; }
		
		//BYTES24="bytes24"
		public EnumLiteralDeclaration getBYTES24EnumLiteralDeclaration_90() { return cBYTES24EnumLiteralDeclaration_90; }
		
		//"bytes24"
		public Keyword getBYTES24Bytes24Keyword_90_0() { return cBYTES24Bytes24Keyword_90_0; }
		
		//BYTES25="bytes25"
		public EnumLiteralDeclaration getBYTES25EnumLiteralDeclaration_91() { return cBYTES25EnumLiteralDeclaration_91; }
		
		//"bytes25"
		public Keyword getBYTES25Bytes25Keyword_91_0() { return cBYTES25Bytes25Keyword_91_0; }
		
		//BYTES26="bytes26"
		public EnumLiteralDeclaration getBYTES26EnumLiteralDeclaration_92() { return cBYTES26EnumLiteralDeclaration_92; }
		
		//"bytes26"
		public Keyword getBYTES26Bytes26Keyword_92_0() { return cBYTES26Bytes26Keyword_92_0; }
		
		//BYTES27="bytes27"
		public EnumLiteralDeclaration getBYTES27EnumLiteralDeclaration_93() { return cBYTES27EnumLiteralDeclaration_93; }
		
		//"bytes27"
		public Keyword getBYTES27Bytes27Keyword_93_0() { return cBYTES27Bytes27Keyword_93_0; }
		
		//BYTES28="bytes28"
		public EnumLiteralDeclaration getBYTES28EnumLiteralDeclaration_94() { return cBYTES28EnumLiteralDeclaration_94; }
		
		//"bytes28"
		public Keyword getBYTES28Bytes28Keyword_94_0() { return cBYTES28Bytes28Keyword_94_0; }
		
		//BYTES29="bytes29"
		public EnumLiteralDeclaration getBYTES29EnumLiteralDeclaration_95() { return cBYTES29EnumLiteralDeclaration_95; }
		
		//"bytes29"
		public Keyword getBYTES29Bytes29Keyword_95_0() { return cBYTES29Bytes29Keyword_95_0; }
		
		//BYTES30="bytes30"
		public EnumLiteralDeclaration getBYTES30EnumLiteralDeclaration_96() { return cBYTES30EnumLiteralDeclaration_96; }
		
		//"bytes30"
		public Keyword getBYTES30Bytes30Keyword_96_0() { return cBYTES30Bytes30Keyword_96_0; }
		
		//BYTES31="bytes31"
		public EnumLiteralDeclaration getBYTES31EnumLiteralDeclaration_97() { return cBYTES31EnumLiteralDeclaration_97; }
		
		//"bytes31"
		public Keyword getBYTES31Bytes31Keyword_97_0() { return cBYTES31Bytes31Keyword_97_0; }
		
		//BYTES32="bytes32"
		public EnumLiteralDeclaration getBYTES32EnumLiteralDeclaration_98() { return cBYTES32EnumLiteralDeclaration_98; }
		
		//"bytes32"
		public Keyword getBYTES32Bytes32Keyword_98_0() { return cBYTES32Bytes32Keyword_98_0; }
		
		//// Other
		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_99() { return cSTRINGEnumLiteralDeclaration_99; }
		
		//"string"
		public Keyword getSTRINGStringKeyword_99_0() { return cSTRINGStringKeyword_99_0; }
		
		//ADDRESS="address"
		public EnumLiteralDeclaration getADDRESSEnumLiteralDeclaration_100() { return cADDRESSEnumLiteralDeclaration_100; }
		
		//"address"
		public Keyword getADDRESSAddressKeyword_100_0() { return cADDRESSAddressKeyword_100_0; }
		
		//BOOL="bool"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_101() { return cBOOLEnumLiteralDeclaration_101; }
		
		//"bool"
		public Keyword getBOOLBoolKeyword_101_0() { return cBOOLBoolKeyword_101_0; }
		
		//REAL="real"
		public EnumLiteralDeclaration getREALEnumLiteralDeclaration_102() { return cREALEnumLiteralDeclaration_102; }
		
		//"real"
		public Keyword getREALRealKeyword_102_0() { return cREALRealKeyword_102_0; }
		
		//UREAL="ureal"
		public EnumLiteralDeclaration getUREALEnumLiteralDeclaration_103() { return cUREALEnumLiteralDeclaration_103; }
		
		//"ureal"
		public Keyword getUREALUrealKeyword_103_0() { return cUREALUrealKeyword_103_0; }
	}
	public class LocationSpecifierEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.LocationSpecifierEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMEMORYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMEMORYMemoryKeyword_0_0 = (Keyword)cMEMORYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTORAGEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTORAGEStorageKeyword_1_0 = (Keyword)cSTORAGEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LocationSpecifierEnum:
		//	MEMORY="memory" |
		//	STORAGE="storage";
		public EnumRule getRule() { return rule; }
		
		//MEMORY="memory" | STORAGE="storage"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MEMORY="memory"
		public EnumLiteralDeclaration getMEMORYEnumLiteralDeclaration_0() { return cMEMORYEnumLiteralDeclaration_0; }
		
		//"memory"
		public Keyword getMEMORYMemoryKeyword_0_0() { return cMEMORYMemoryKeyword_0_0; }
		
		//STORAGE="storage"
		public EnumLiteralDeclaration getSTORAGEEnumLiteralDeclaration_1() { return cSTORAGEEnumLiteralDeclaration_1; }
		
		//"storage"
		public Keyword getSTORAGEStorageKeyword_1_0() { return cSTORAGEStorageKeyword_1_0; }
	}
	public class VisibilityEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.VisibilityEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPUBLICPublicKeyword_0_0 = (Keyword)cPUBLICEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cINTERNALEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cINTERNALInternalKeyword_1_0 = (Keyword)cINTERNALEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPRIVATEPrivateKeyword_2_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEXTERNALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEXTERNALExternalKeyword_3_0 = (Keyword)cEXTERNALEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum VisibilityEnum:
		//	PUBLIC="public" |
		//	INTERNAL="internal" |
		//	PRIVATE="private" |
		//	EXTERNAL="external";
		public EnumRule getRule() { return rule; }
		
		//PUBLIC="public" | INTERNAL="internal" | PRIVATE="private" | EXTERNAL="external"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_0() { return cPUBLICEnumLiteralDeclaration_0; }
		
		//"public"
		public Keyword getPUBLICPublicKeyword_0_0() { return cPUBLICPublicKeyword_0_0; }
		
		//INTERNAL="internal"
		public EnumLiteralDeclaration getINTERNALEnumLiteralDeclaration_1() { return cINTERNALEnumLiteralDeclaration_1; }
		
		//"internal"
		public Keyword getINTERNALInternalKeyword_1_0() { return cINTERNALInternalKeyword_1_0; }
		
		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_2() { return cPRIVATEEnumLiteralDeclaration_2; }
		
		//"private"
		public Keyword getPRIVATEPrivateKeyword_2_0() { return cPRIVATEPrivateKeyword_2_0; }
		
		//EXTERNAL="external"
		public EnumLiteralDeclaration getEXTERNALEnumLiteralDeclaration_3() { return cEXTERNALEnumLiteralDeclaration_3; }
		
		//"external"
		public Keyword getEXTERNALExternalKeyword_3_0() { return cEXTERNALExternalKeyword_3_0; }
	}
	public class AssignmentOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.AssignmentOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASSIGNEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASSIGNEqualsSignKeyword_0_0 = (Keyword)cASSIGNEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_OREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cASSIGN_ORVerticalLineEqualsSignKeyword_1_0 = (Keyword)cASSIGN_OREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_XOREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0 = (Keyword)cASSIGN_XOREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_ANDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cASSIGN_ANDAmpersandEqualsSignKeyword_3_0 = (Keyword)cASSIGN_ANDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0 = (Keyword)cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0 = (Keyword)cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_ADDEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cASSIGN_ADDPlusSignEqualsSignKeyword_7_0 = (Keyword)cASSIGN_ADDEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_SUBEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0 = (Keyword)cASSIGN_SUBEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_MULTEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cASSIGN_MULTAsteriskEqualsSignKeyword_9_0 = (Keyword)cASSIGN_MULTEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_DIVEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cASSIGN_DIVSolidusEqualsSignKeyword_10_0 = (Keyword)cASSIGN_DIVEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cASSIGN_MODEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cASSIGN_MODPercentSignEqualsSignKeyword_11_0 = (Keyword)cASSIGN_MODEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum AssignmentOpEnum:
		//	ASSIGN="=" |
		//	ASSIGN_OR="|=" |
		//	ASSIGN_XOR="^=" |
		//	ASSIGN_AND="&=" |
		//	ASSIGN_SHIFT_LEFT="<<=" |
		//	ASSIGN_SHIFT_RIGHT=">>=" |
		//	ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" |
		//	ASSIGN_ADD="+=" |
		//	ASSIGN_SUB="-=" |
		//	ASSIGN_MULT="*=" |
		//	ASSIGN_DIV="/=" |
		//	ASSIGN_MOD="%=";
		public EnumRule getRule() { return rule; }
		
		//ASSIGN="=" | ASSIGN_OR="|=" | ASSIGN_XOR="^=" | ASSIGN_AND="&=" | ASSIGN_SHIFT_LEFT="<<=" | ASSIGN_SHIFT_RIGHT=">>=" |
		//ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" | ASSIGN_ADD="+=" | ASSIGN_SUB="-=" | ASSIGN_MULT="*=" | ASSIGN_DIV="/=" |
		//ASSIGN_MOD="%="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ASSIGN="="
		public EnumLiteralDeclaration getASSIGNEnumLiteralDeclaration_0() { return cASSIGNEnumLiteralDeclaration_0; }
		
		//"="
		public Keyword getASSIGNEqualsSignKeyword_0_0() { return cASSIGNEqualsSignKeyword_0_0; }
		
		//ASSIGN_OR="|="
		public EnumLiteralDeclaration getASSIGN_OREnumLiteralDeclaration_1() { return cASSIGN_OREnumLiteralDeclaration_1; }
		
		//"|="
		public Keyword getASSIGN_ORVerticalLineEqualsSignKeyword_1_0() { return cASSIGN_ORVerticalLineEqualsSignKeyword_1_0; }
		
		//ASSIGN_XOR="^="
		public EnumLiteralDeclaration getASSIGN_XOREnumLiteralDeclaration_2() { return cASSIGN_XOREnumLiteralDeclaration_2; }
		
		//"^="
		public Keyword getASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0() { return cASSIGN_XORCircumflexAccentEqualsSignKeyword_2_0; }
		
		//ASSIGN_AND="&="
		public EnumLiteralDeclaration getASSIGN_ANDEnumLiteralDeclaration_3() { return cASSIGN_ANDEnumLiteralDeclaration_3; }
		
		//"&="
		public Keyword getASSIGN_ANDAmpersandEqualsSignKeyword_3_0() { return cASSIGN_ANDAmpersandEqualsSignKeyword_3_0; }
		
		//ASSIGN_SHIFT_LEFT="<<="
		public EnumLiteralDeclaration getASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4() { return cASSIGN_SHIFT_LEFTEnumLiteralDeclaration_4; }
		
		//"<<="
		public Keyword getASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0() { return cASSIGN_SHIFT_LEFTLessThanSignLessThanSignEqualsSignKeyword_4_0; }
		
		//ASSIGN_SHIFT_RIGHT=">>="
		public EnumLiteralDeclaration getASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5() { return cASSIGN_SHIFT_RIGHTEnumLiteralDeclaration_5; }
		
		//">>="
		public Keyword getASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0() { return cASSIGN_SHIFT_RIGHTGreaterThanSignGreaterThanSignEqualsSignKeyword_5_0; }
		
		//ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>="
		public EnumLiteralDeclaration getASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6() { return cASSIGN_SHIFT_RIGHT_ARIMETICEnumLiteralDeclaration_6; }
		
		//">>>="
		public Keyword getASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0() { return cASSIGN_SHIFT_RIGHT_ARIMETICGreaterThanSignGreaterThanSignGreaterThanSignEqualsSignKeyword_6_0; }
		
		//ASSIGN_ADD="+="
		public EnumLiteralDeclaration getASSIGN_ADDEnumLiteralDeclaration_7() { return cASSIGN_ADDEnumLiteralDeclaration_7; }
		
		//"+="
		public Keyword getASSIGN_ADDPlusSignEqualsSignKeyword_7_0() { return cASSIGN_ADDPlusSignEqualsSignKeyword_7_0; }
		
		//ASSIGN_SUB="-="
		public EnumLiteralDeclaration getASSIGN_SUBEnumLiteralDeclaration_8() { return cASSIGN_SUBEnumLiteralDeclaration_8; }
		
		//"-="
		public Keyword getASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0() { return cASSIGN_SUBHyphenMinusEqualsSignKeyword_8_0; }
		
		//ASSIGN_MULT="*="
		public EnumLiteralDeclaration getASSIGN_MULTEnumLiteralDeclaration_9() { return cASSIGN_MULTEnumLiteralDeclaration_9; }
		
		//"*="
		public Keyword getASSIGN_MULTAsteriskEqualsSignKeyword_9_0() { return cASSIGN_MULTAsteriskEqualsSignKeyword_9_0; }
		
		//ASSIGN_DIV="/="
		public EnumLiteralDeclaration getASSIGN_DIVEnumLiteralDeclaration_10() { return cASSIGN_DIVEnumLiteralDeclaration_10; }
		
		//"/="
		public Keyword getASSIGN_DIVSolidusEqualsSignKeyword_10_0() { return cASSIGN_DIVSolidusEqualsSignKeyword_10_0; }
		
		//ASSIGN_MOD="%="
		public EnumLiteralDeclaration getASSIGN_MODEnumLiteralDeclaration_11() { return cASSIGN_MODEnumLiteralDeclaration_11; }
		
		//"%="
		public Keyword getASSIGN_MODPercentSignEqualsSignKeyword_11_0() { return cASSIGN_MODPercentSignEqualsSignKeyword_11_0; }
	}
	public class EqualityOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.EqualityOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNOTEQEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNOTEQExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNOTEQEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EqualityOpEnum:
		//	EQ="==" |
		//	NOTEQ="!=";
		public EnumRule getRule() { return rule; }
		
		//EQ="==" | NOTEQ="!="
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQ="=="
		public EnumLiteralDeclaration getEQEnumLiteralDeclaration_0() { return cEQEnumLiteralDeclaration_0; }
		
		//"=="
		public Keyword getEQEqualsSignEqualsSignKeyword_0_0() { return cEQEqualsSignEqualsSignKeyword_0_0; }
		
		//NOTEQ="!="
		public EnumLiteralDeclaration getNOTEQEnumLiteralDeclaration_1() { return cNOTEQEnumLiteralDeclaration_1; }
		
		//"!="
		public Keyword getNOTEQExclamationMarkEqualsSignKeyword_1_0() { return cNOTEQExclamationMarkEqualsSignKeyword_1_0; }
	}
	public class ComparisonOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ComparisonOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLTLessThanSignKeyword_0_0 = (Keyword)cLTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGTGreaterThanSignKeyword_1_0 = (Keyword)cGTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLTEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLTELessThanSignEqualsSignKeyword_2_0 = (Keyword)cLTEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGTEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGTEGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGTEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINInKeyword_4_0 = (Keyword)cINEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ComparisonOpEnum:
		//	LT="<" |
		//	GT=">" |
		//	LTE="<=" |
		//	GTE=">=" |
		//	IN="in";
		public EnumRule getRule() { return rule; }
		
		//LT="<" | GT=">" | LTE="<=" | GTE=">=" | IN="in"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LT="<"
		public EnumLiteralDeclaration getLTEnumLiteralDeclaration_0() { return cLTEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLTLessThanSignKeyword_0_0() { return cLTLessThanSignKeyword_0_0; }
		
		//GT=">"
		public EnumLiteralDeclaration getGTEnumLiteralDeclaration_1() { return cGTEnumLiteralDeclaration_1; }
		
		//">"
		public Keyword getGTGreaterThanSignKeyword_1_0() { return cGTGreaterThanSignKeyword_1_0; }
		
		//LTE="<="
		public EnumLiteralDeclaration getLTEEnumLiteralDeclaration_2() { return cLTEEnumLiteralDeclaration_2; }
		
		//"<="
		public Keyword getLTELessThanSignEqualsSignKeyword_2_0() { return cLTELessThanSignEqualsSignKeyword_2_0; }
		
		//GTE=">="
		public EnumLiteralDeclaration getGTEEnumLiteralDeclaration_3() { return cGTEEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGTEGreaterThanSignEqualsSignKeyword_3_0() { return cGTEGreaterThanSignEqualsSignKeyword_3_0; }
		
		//IN="in"
		public EnumLiteralDeclaration getINEnumLiteralDeclaration_4() { return cINEnumLiteralDeclaration_4; }
		
		//"in"
		public Keyword getINInKeyword_4_0() { return cINInKeyword_4_0; }
	}
	public class ShiftOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ShiftOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLEFT_SHIFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0 = (Keyword)cLEFT_SHIFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRIGHT_SHIFTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0 = (Keyword)cRIGHT_SHIFTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0 = (Keyword)cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ShiftOpEnum:
		//	LEFT_SHIFT="<<" |
		//	RIGHT_SHIFT=">>" |
		//	ARITHMETIC_RIGHT_SHIFT=">>>";
		public EnumRule getRule() { return rule; }
		
		//LEFT_SHIFT="<<" | RIGHT_SHIFT=">>" | ARITHMETIC_RIGHT_SHIFT=">>>"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LEFT_SHIFT="<<"
		public EnumLiteralDeclaration getLEFT_SHIFTEnumLiteralDeclaration_0() { return cLEFT_SHIFTEnumLiteralDeclaration_0; }
		
		//"<<"
		public Keyword getLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0() { return cLEFT_SHIFTLessThanSignLessThanSignKeyword_0_0; }
		
		//RIGHT_SHIFT=">>"
		public EnumLiteralDeclaration getRIGHT_SHIFTEnumLiteralDeclaration_1() { return cRIGHT_SHIFTEnumLiteralDeclaration_1; }
		
		//">>"
		public Keyword getRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0() { return cRIGHT_SHIFTGreaterThanSignGreaterThanSignKeyword_1_0; }
		
		//ARITHMETIC_RIGHT_SHIFT=">>>"
		public EnumLiteralDeclaration getARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2() { return cARITHMETIC_RIGHT_SHIFTEnumLiteralDeclaration_2; }
		
		//">>>"
		public Keyword getARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0() { return cARITHMETIC_RIGHT_SHIFTGreaterThanSignGreaterThanSignGreaterThanSignKeyword_2_0; }
	}
	public class AdditionOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.AdditionOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBHyphenMinusKeyword_1_0 = (Keyword)cSUBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum AdditionOpEnum:
		//	ADD="+" |
		//	SUB="-";
		public EnumRule getRule() { return rule; }
		
		//ADD="+" | SUB="-"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD="+"
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//"+"
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUB="-"
		public EnumLiteralDeclaration getSUBEnumLiteralDeclaration_1() { return cSUBEnumLiteralDeclaration_1; }
		
		//"-"
		public Keyword getSUBHyphenMinusKeyword_1_0() { return cSUBHyphenMinusKeyword_1_0; }
	}
	public class MulDivModOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.MulDivModOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMULTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMULTAsteriskKeyword_0_0 = (Keyword)cMULTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVSolidusKeyword_1_0 = (Keyword)cDIVEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMODEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMODPercentSignKeyword_2_0 = (Keyword)cMODEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum MulDivModOpEnum:
		//	MULT="*" |
		//	DIV="/" |
		//	MOD="%";
		public EnumRule getRule() { return rule; }
		
		//MULT="*" | DIV="/" | MOD="%"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MULT="*"
		public EnumLiteralDeclaration getMULTEnumLiteralDeclaration_0() { return cMULTEnumLiteralDeclaration_0; }
		
		//"*"
		public Keyword getMULTAsteriskKeyword_0_0() { return cMULTAsteriskKeyword_0_0; }
		
		//DIV="/"
		public EnumLiteralDeclaration getDIVEnumLiteralDeclaration_1() { return cDIVEnumLiteralDeclaration_1; }
		
		//"/"
		public Keyword getDIVSolidusKeyword_1_0() { return cDIVSolidusKeyword_1_0; }
		
		//MOD="%"
		public EnumLiteralDeclaration getMODEnumLiteralDeclaration_2() { return cMODEnumLiteralDeclaration_2; }
		
		//"%"
		public Keyword getMODPercentSignKeyword_2_0() { return cMODPercentSignKeyword_2_0; }
	}
	public class IncDecOpEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.IncDecOpEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINCEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINCPlusSignPlusSignKeyword_0_0 = (Keyword)cINCEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDECEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDECHyphenMinusHyphenMinusKeyword_1_0 = (Keyword)cDECEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IncDecOpEnum:
		//	INC="++" |
		//	DEC="--";
		public EnumRule getRule() { return rule; }
		
		//INC="++" | DEC="--"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INC="++"
		public EnumLiteralDeclaration getINCEnumLiteralDeclaration_0() { return cINCEnumLiteralDeclaration_0; }
		
		//"++"
		public Keyword getINCPlusSignPlusSignKeyword_0_0() { return cINCPlusSignPlusSignKeyword_0_0; }
		
		//DEC="--"
		public EnumLiteralDeclaration getDECEnumLiteralDeclaration_1() { return cDECEnumLiteralDeclaration_1; }
		
		//"--"
		public Keyword getDECHyphenMinusHyphenMinusKeyword_1_0() { return cDECHyphenMinusHyphenMinusKeyword_1_0; }
	}
	public class BooleanLiteralEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.BooleanLiteralEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTRUEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTRUETrueKeyword_0_0 = (Keyword)cTRUEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFALSEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFALSEFalseKeyword_1_0 = (Keyword)cFALSEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanLiteralEnum:
		//	TRUE="true" |
		//	FALSE="false";
		public EnumRule getRule() { return rule; }
		
		//TRUE="true" | FALSE="false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TRUE="true"
		public EnumLiteralDeclaration getTRUEEnumLiteralDeclaration_0() { return cTRUEEnumLiteralDeclaration_0; }
		
		//"true"
		public Keyword getTRUETrueKeyword_0_0() { return cTRUETrueKeyword_0_0; }
		
		//FALSE="false"
		public EnumLiteralDeclaration getFALSEEnumLiteralDeclaration_1() { return cFALSEEnumLiteralDeclaration_1; }
		
		//"false"
		public Keyword getFALSEFalseKeyword_1_0() { return cFALSEFalseKeyword_1_0; }
	}
	public class EtherSubDenominationEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.EtherSubDenominationEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cWEIEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cWEIWeiKeyword_0_0 = (Keyword)cWEIEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSZABOEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSZABOSzaboKeyword_1_0 = (Keyword)cSZABOEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFINNEYEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFINNEYFinneyKeyword_2_0 = (Keyword)cFINNEYEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cETHEREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cETHEREtherKeyword_3_0 = (Keyword)cETHEREnumLiteralDeclaration_3.eContents().get(0);
		
		//enum EtherSubDenominationEnum:
		//	WEI="wei" |
		//	SZABO="szabo" |
		//	FINNEY="finney" |
		//	ETHER="ether";
		public EnumRule getRule() { return rule; }
		
		//WEI="wei" | SZABO="szabo" | FINNEY="finney" | ETHER="ether"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WEI="wei"
		public EnumLiteralDeclaration getWEIEnumLiteralDeclaration_0() { return cWEIEnumLiteralDeclaration_0; }
		
		//"wei"
		public Keyword getWEIWeiKeyword_0_0() { return cWEIWeiKeyword_0_0; }
		
		//SZABO="szabo"
		public EnumLiteralDeclaration getSZABOEnumLiteralDeclaration_1() { return cSZABOEnumLiteralDeclaration_1; }
		
		//"szabo"
		public Keyword getSZABOSzaboKeyword_1_0() { return cSZABOSzaboKeyword_1_0; }
		
		//FINNEY="finney"
		public EnumLiteralDeclaration getFINNEYEnumLiteralDeclaration_2() { return cFINNEYEnumLiteralDeclaration_2; }
		
		//"finney"
		public Keyword getFINNEYFinneyKeyword_2_0() { return cFINNEYFinneyKeyword_2_0; }
		
		//ETHER="ether"
		public EnumLiteralDeclaration getETHEREnumLiteralDeclaration_3() { return cETHEREnumLiteralDeclaration_3; }
		
		//"ether"
		public Keyword getETHEREtherKeyword_3_0() { return cETHEREtherKeyword_3_0; }
	}
	public class TimeSubdenominationEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.TimeSubdenominationEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSECONDSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSECONDSSecondsKeyword_0_0 = (Keyword)cSECONDSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMINUTESEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMINUTESMinutesKeyword_1_0 = (Keyword)cMINUTESEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHOURSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHOURSHoursKeyword_2_0 = (Keyword)cHOURSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDAYSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDAYSDaysKeyword_3_0 = (Keyword)cDAYSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cWEEKSEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cWEEKSWeeksKeyword_4_0 = (Keyword)cWEEKSEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYEARSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYEARSYearsKeyword_5_0 = (Keyword)cYEARSEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum TimeSubdenominationEnum:
		//	SECONDS="seconds" |
		//	MINUTES="minutes" |
		//	HOURS="hours" |
		//	DAYS="days" |
		//	WEEKS="weeks" |
		//	YEARS="years";
		public EnumRule getRule() { return rule; }
		
		//SECONDS="seconds" | MINUTES="minutes" | HOURS="hours" | DAYS="days" | WEEKS="weeks" | YEARS="years"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SECONDS="seconds"
		public EnumLiteralDeclaration getSECONDSEnumLiteralDeclaration_0() { return cSECONDSEnumLiteralDeclaration_0; }
		
		//"seconds"
		public Keyword getSECONDSSecondsKeyword_0_0() { return cSECONDSSecondsKeyword_0_0; }
		
		//MINUTES="minutes"
		public EnumLiteralDeclaration getMINUTESEnumLiteralDeclaration_1() { return cMINUTESEnumLiteralDeclaration_1; }
		
		//"minutes"
		public Keyword getMINUTESMinutesKeyword_1_0() { return cMINUTESMinutesKeyword_1_0; }
		
		//HOURS="hours"
		public EnumLiteralDeclaration getHOURSEnumLiteralDeclaration_2() { return cHOURSEnumLiteralDeclaration_2; }
		
		//"hours"
		public Keyword getHOURSHoursKeyword_2_0() { return cHOURSHoursKeyword_2_0; }
		
		//DAYS="days"
		public EnumLiteralDeclaration getDAYSEnumLiteralDeclaration_3() { return cDAYSEnumLiteralDeclaration_3; }
		
		//"days"
		public Keyword getDAYSDaysKeyword_3_0() { return cDAYSDaysKeyword_3_0; }
		
		//WEEKS="weeks"
		public EnumLiteralDeclaration getWEEKSEnumLiteralDeclaration_4() { return cWEEKSEnumLiteralDeclaration_4; }
		
		//"weeks"
		public Keyword getWEEKSWeeksKeyword_4_0() { return cWEEKSWeeksKeyword_4_0; }
		
		//YEARS="years"
		public EnumLiteralDeclaration getYEARSEnumLiteralDeclaration_5() { return cYEARSEnumLiteralDeclaration_5; }
		
		//"years"
		public Keyword getYEARSYearsKeyword_5_0() { return cYEARSYearsKeyword_5_0; }
	}
	public class SpecialVariablesTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SpecialVariablesTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMSGEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMSGMsgKeyword_0_0 = (Keyword)cMSGEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBLOCKEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBLOCKBlockKeyword_1_0 = (Keyword)cBLOCKEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTXEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTXTxKeyword_2_0 = (Keyword)cTXEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SpecialVariablesTypeEnum:
		//	MSG="msg" |
		//	BLOCK="block" |
		//	TX="tx";
		public EnumRule getRule() { return rule; }
		
		//MSG="msg" | BLOCK="block" | TX="tx"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MSG="msg"
		public EnumLiteralDeclaration getMSGEnumLiteralDeclaration_0() { return cMSGEnumLiteralDeclaration_0; }
		
		//"msg"
		public Keyword getMSGMsgKeyword_0_0() { return cMSGMsgKeyword_0_0; }
		
		//BLOCK="block"
		public EnumLiteralDeclaration getBLOCKEnumLiteralDeclaration_1() { return cBLOCKEnumLiteralDeclaration_1; }
		
		//"block"
		public Keyword getBLOCKBlockKeyword_1_0() { return cBLOCKBlockKeyword_1_0; }
		
		//TX="tx"
		public EnumLiteralDeclaration getTXEnumLiteralDeclaration_2() { return cTXEnumLiteralDeclaration_2; }
		
		//"tx"
		public Keyword getTXTxKeyword_2_0() { return cTXTxKeyword_2_0; }
	}
	public class SpecialExpressionTypeEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SpecialExpressionTypeEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSUPEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSUPERSuperKeyword_0_0 = (Keyword)cSUPEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTHISEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTHISThisKeyword_1_0 = (Keyword)cTHISEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SpecialExpressionTypeEnum:
		//	SUPER="super" |
		//	THIS="this";
		public EnumRule getRule() { return rule; }
		
		//SUPER="super" | THIS="this"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SUPER="super"
		public EnumLiteralDeclaration getSUPEREnumLiteralDeclaration_0() { return cSUPEREnumLiteralDeclaration_0; }
		
		//"super"
		public Keyword getSUPERSuperKeyword_0_0() { return cSUPERSuperKeyword_0_0; }
		
		//THIS="this"
		public EnumLiteralDeclaration getTHISEnumLiteralDeclaration_1() { return cTHISEnumLiteralDeclaration_1; }
		
		//"this"
		public Keyword getTHISThisKeyword_1_0() { return cTHISThisKeyword_1_0; }
	}
	public class ReservedWordsEnumElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ReservedWordsEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cASEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cASAsKeyword_0_0 = (Keyword)cASEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCASEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCASECaseKeyword_1_0 = (Keyword)cCASEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCATCHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCATCHCatchKeyword_2_0 = (Keyword)cCATCHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFINALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFINALFinalKeyword_3_0 = (Keyword)cFINALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLETEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLETLetKeyword_4_0 = (Keyword)cLETEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMATCHEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMATCHMatchKeyword_5_0 = (Keyword)cMATCHEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cOFEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cOFOfKeyword_6_0 = (Keyword)cOFEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cRELOCATABLEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cRELOCATABLERelocatableKeyword_7_0 = (Keyword)cRELOCATABLEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSWITCHEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSWITCHSwitchKeyword_8_0 = (Keyword)cSWITCHEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTRYEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTRYTryKeyword_9_0 = (Keyword)cTRYEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTYPEEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTYPETypeKeyword_10_0 = (Keyword)cTYPEEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTYPEOFEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTYPEOFTypeofKeyword_11_0 = (Keyword)cTYPEOFEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cUSINGEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cUSINGUsingKeyword_12_0 = (Keyword)cUSINGEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cILLEGALEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cILLEGALILLEGALKeyword_13_0 = (Keyword)cILLEGALEnumLiteralDeclaration_13.eContents().get(0);
		
		//enum ReservedWordsEnum:
		//	AS="as" |
		//	CASE="case" |
		//	CATCH="catch" |
		//	FINAL="final" |
		//	LET="let" |
		//	MATCH="match" |
		//	OF="of" |
		//	RELOCATABLE="relocatable" |
		//	SWITCH="switch" |
		//	TRY="try" |
		//	TYPE="type" |
		//	TYPEOF="typeof" |
		//	USING="using" |
		//	ILLEGAL;
		public EnumRule getRule() { return rule; }
		
		//AS="as" | CASE="case" | CATCH="catch" | FINAL="final" | LET="let" | MATCH="match" | OF="of" | RELOCATABLE="relocatable"
		//| SWITCH="switch" | TRY="try" | TYPE="type" | TYPEOF="typeof" | USING="using" | ILLEGAL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AS="as"
		public EnumLiteralDeclaration getASEnumLiteralDeclaration_0() { return cASEnumLiteralDeclaration_0; }
		
		//"as"
		public Keyword getASAsKeyword_0_0() { return cASAsKeyword_0_0; }
		
		//CASE="case"
		public EnumLiteralDeclaration getCASEEnumLiteralDeclaration_1() { return cCASEEnumLiteralDeclaration_1; }
		
		//"case"
		public Keyword getCASECaseKeyword_1_0() { return cCASECaseKeyword_1_0; }
		
		//CATCH="catch"
		public EnumLiteralDeclaration getCATCHEnumLiteralDeclaration_2() { return cCATCHEnumLiteralDeclaration_2; }
		
		//"catch"
		public Keyword getCATCHCatchKeyword_2_0() { return cCATCHCatchKeyword_2_0; }
		
		//FINAL="final"
		public EnumLiteralDeclaration getFINALEnumLiteralDeclaration_3() { return cFINALEnumLiteralDeclaration_3; }
		
		//"final"
		public Keyword getFINALFinalKeyword_3_0() { return cFINALFinalKeyword_3_0; }
		
		//LET="let"
		public EnumLiteralDeclaration getLETEnumLiteralDeclaration_4() { return cLETEnumLiteralDeclaration_4; }
		
		//"let"
		public Keyword getLETLetKeyword_4_0() { return cLETLetKeyword_4_0; }
		
		//MATCH="match"
		public EnumLiteralDeclaration getMATCHEnumLiteralDeclaration_5() { return cMATCHEnumLiteralDeclaration_5; }
		
		//"match"
		public Keyword getMATCHMatchKeyword_5_0() { return cMATCHMatchKeyword_5_0; }
		
		//OF="of"
		public EnumLiteralDeclaration getOFEnumLiteralDeclaration_6() { return cOFEnumLiteralDeclaration_6; }
		
		//"of"
		public Keyword getOFOfKeyword_6_0() { return cOFOfKeyword_6_0; }
		
		//RELOCATABLE="relocatable"
		public EnumLiteralDeclaration getRELOCATABLEEnumLiteralDeclaration_7() { return cRELOCATABLEEnumLiteralDeclaration_7; }
		
		//"relocatable"
		public Keyword getRELOCATABLERelocatableKeyword_7_0() { return cRELOCATABLERelocatableKeyword_7_0; }
		
		//SWITCH="switch"
		public EnumLiteralDeclaration getSWITCHEnumLiteralDeclaration_8() { return cSWITCHEnumLiteralDeclaration_8; }
		
		//"switch"
		public Keyword getSWITCHSwitchKeyword_8_0() { return cSWITCHSwitchKeyword_8_0; }
		
		//TRY="try"
		public EnumLiteralDeclaration getTRYEnumLiteralDeclaration_9() { return cTRYEnumLiteralDeclaration_9; }
		
		//"try"
		public Keyword getTRYTryKeyword_9_0() { return cTRYTryKeyword_9_0; }
		
		//TYPE="type"
		public EnumLiteralDeclaration getTYPEEnumLiteralDeclaration_10() { return cTYPEEnumLiteralDeclaration_10; }
		
		//"type"
		public Keyword getTYPETypeKeyword_10_0() { return cTYPETypeKeyword_10_0; }
		
		//TYPEOF="typeof"
		public EnumLiteralDeclaration getTYPEOFEnumLiteralDeclaration_11() { return cTYPEOFEnumLiteralDeclaration_11; }
		
		//"typeof"
		public Keyword getTYPEOFTypeofKeyword_11_0() { return cTYPEOFTypeofKeyword_11_0; }
		
		//USING="using"
		public EnumLiteralDeclaration getUSINGEnumLiteralDeclaration_12() { return cUSINGEnumLiteralDeclaration_12; }
		
		//"using"
		public Keyword getUSINGUsingKeyword_12_0() { return cUSINGUsingKeyword_12_0; }
		
		//ILLEGAL
		public EnumLiteralDeclaration getILLEGALEnumLiteralDeclaration_13() { return cILLEGALEnumLiteralDeclaration_13; }
		
		//"ILLEGAL"
		public Keyword getILLEGALILLEGALKeyword_13_0() { return cILLEGALILLEGALKeyword_13_0; }
	}
	
	private final SolidityElements pSolidity;
	private final ImportDirectiveElements pImportDirective;
	private final SymbolAliasElements pSymbolAlias;
	private final ContractOrLibraryElements pContractOrLibrary;
	private final ContractElements pContract;
	private final LibraryElements pLibrary;
	private final DefinitionBodyElements pDefinitionBody;
	private final InheritanceSpecifierElements pInheritanceSpecifier;
	private final FunctionCallListArgumentsElements pFunctionCallListArguments;
	private final FunctionCallArgumentsElements pFunctionCallArguments;
	private final FunctionCallArgElements pFunctionCallArg;
	private final FunctionDefinitionElements pFunctionDefinition;
	private final FunctionDefinitionOptionalElementElements pFunctionDefinitionOptionalElement;
	private final ConstElements pConst;
	private final VisibilitySpecifierElements pVisibilitySpecifier;
	private final StructDefinitionElements pStructDefinition;
	private final EnumDefinitionElements pEnumDefinition;
	private final EnumValueElements pEnumValue;
	private final VariableElements pVariable;
	private final VariableDeclarationElements pVariableDeclaration;
	private final StandardVariableDeclarationElements pStandardVariableDeclaration;
	private final VarVariableDeclarationElements pVarVariableDeclaration;
	private final VarVariableTupleVariableDeclarationElements pVarVariableTupleVariableDeclaration;
	private final VariableDeclarationOptionalElementElements pVariableDeclarationOptionalElement;
	private final IndexedSpeciferElements pIndexedSpecifer;
	private final ConstantSpecifierElements pConstantSpecifier;
	private final LocationSpecifierElements pLocationSpecifier;
	private final TypeElements pType;
	private final StandardTypeElements pStandardType;
	private final StandardTypeWithoutQualifiedIdentifierElements pStandardTypeWithoutQualifiedIdentifier;
	private final ElementaryTypeElements pElementaryType;
	private final MappingElements pMapping;
	private final ArrayDimensionsElements pArrayDimensions;
	private final VarTypeElements pVarType;
	private final TupleElements pTuple;
	private final TupleSeparatorElements pTupleSeparator;
	private final SimpleStatementElements pSimpleStatement;
	private final SimpleStatement2Elements pSimpleStatement2;
	private final ExpressionStatementElements pExpressionStatement;
	private final QualifiedIdentifierElements pQualifiedIdentifier;
	private final QualifierElements pQualifier;
	private final FieldElements pField;
	private final IndexElements pIndex;
	private final ArgumentsElements pArguments;
	private final ModifierElements pModifier;
	private final EventElements pEvent;
	private final ModifierInvocationElements pModifierInvocation;
	private final ParameterListElements pParameterList;
	private final ReturnsParameterListElements pReturnsParameterList;
	private final ReturnParameterDeclarationElements pReturnParameterDeclaration;
	private final StatementElements pStatement;
	private final DeleteStatementElements pDeleteStatement;
	private final IfStatementElements pIfStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final BlockElements pBlock;
	private final ContinueStatementElements pContinueStatement;
	private final BreakStatementElements pBreakStatement;
	private final ReturnStatementElements pReturnStatement;
	private final ThrowStatementElements pThrowStatement;
	private final PlaceHolderStatementElements pPlaceHolderStatement;
	private final ExpressionElements pExpression;
	private final SpecialExpressionElements pSpecialExpression;
	private final AssignmentElements pAssignment;
	private final BinaryExpressionElements pBinaryExpression;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final EqualityElements pEquality;
	private final ComparisonElements pComparison;
	private final BitOrElements pBitOr;
	private final BitXorElements pBitXor;
	private final BitAndElements pBitAnd;
	private final ShiftElements pShift;
	private final AddSubElements pAddSub;
	private final MulDivModElements pMulDivMod;
	private final ExponentElements pExponent;
	private final UnaryExpressionElements pUnaryExpression;
	private final NotExpressionElements pNotExpression;
	private final PreIncExpressionElements pPreIncExpression;
	private final PreDecExpressionElements pPreDecExpression;
	private final BinaryNotExpressionElements pBinaryNotExpression;
	private final SignExpressionElements pSignExpression;
	private final NewExpressionElements pNewExpression;
	private final PreExpressionElements pPreExpression;
	private final PostIncDecExpressionElements pPostIncDecExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralElements pLiteral;
	private final BooleanConstElements pBooleanConst;
	private final NumberElements pNumber;
	private final NumberDimensionlessElements pNumberDimensionless;
	private final EtherElements pEther;
	private final TimeElements pTime;
	private final StringLiteralElements pStringLiteral;
	private final TypeCastElements pTypeCast;
	private final NowElements pNow;
	private final SpecialVariablesElements pSpecialVariables;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	private final ElementaryTypeNameEnumElements eElementaryTypeNameEnum;
	private final LocationSpecifierEnumElements eLocationSpecifierEnum;
	private final VisibilityEnumElements eVisibilityEnum;
	private final AssignmentOpEnumElements eAssignmentOpEnum;
	private final EqualityOpEnumElements eEqualityOpEnum;
	private final ComparisonOpEnumElements eComparisonOpEnum;
	private final ShiftOpEnumElements eShiftOpEnum;
	private final AdditionOpEnumElements eAdditionOpEnum;
	private final MulDivModOpEnumElements eMulDivModOpEnum;
	private final IncDecOpEnumElements eIncDecOpEnum;
	private final BooleanLiteralEnumElements eBooleanLiteralEnum;
	private final EtherSubDenominationEnumElements eEtherSubDenominationEnum;
	private final TimeSubdenominationEnumElements eTimeSubdenominationEnum;
	private final SpecialVariablesTypeEnumElements eSpecialVariablesTypeEnum;
	private final SpecialExpressionTypeEnumElements eSpecialExpressionTypeEnum;
	private final ReservedWordsEnumElements eReservedWordsEnum;
	
	private final Grammar grammar;

	@Inject
	public TryGrammarGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pSolidity = new SolidityElements();
		this.pImportDirective = new ImportDirectiveElements();
		this.pSymbolAlias = new SymbolAliasElements();
		this.pContractOrLibrary = new ContractOrLibraryElements();
		this.pContract = new ContractElements();
		this.pLibrary = new LibraryElements();
		this.pDefinitionBody = new DefinitionBodyElements();
		this.pInheritanceSpecifier = new InheritanceSpecifierElements();
		this.pFunctionCallListArguments = new FunctionCallListArgumentsElements();
		this.pFunctionCallArguments = new FunctionCallArgumentsElements();
		this.pFunctionCallArg = new FunctionCallArgElements();
		this.pFunctionDefinition = new FunctionDefinitionElements();
		this.pFunctionDefinitionOptionalElement = new FunctionDefinitionOptionalElementElements();
		this.pConst = new ConstElements();
		this.pVisibilitySpecifier = new VisibilitySpecifierElements();
		this.pStructDefinition = new StructDefinitionElements();
		this.pEnumDefinition = new EnumDefinitionElements();
		this.pEnumValue = new EnumValueElements();
		this.pVariable = new VariableElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pStandardVariableDeclaration = new StandardVariableDeclarationElements();
		this.pVarVariableDeclaration = new VarVariableDeclarationElements();
		this.pVarVariableTupleVariableDeclaration = new VarVariableTupleVariableDeclarationElements();
		this.pVariableDeclarationOptionalElement = new VariableDeclarationOptionalElementElements();
		this.pIndexedSpecifer = new IndexedSpeciferElements();
		this.pConstantSpecifier = new ConstantSpecifierElements();
		this.pLocationSpecifier = new LocationSpecifierElements();
		this.pType = new TypeElements();
		this.pStandardType = new StandardTypeElements();
		this.pStandardTypeWithoutQualifiedIdentifier = new StandardTypeWithoutQualifiedIdentifierElements();
		this.pElementaryType = new ElementaryTypeElements();
		this.pMapping = new MappingElements();
		this.pArrayDimensions = new ArrayDimensionsElements();
		this.pVarType = new VarTypeElements();
		this.pTuple = new TupleElements();
		this.pTupleSeparator = new TupleSeparatorElements();
		this.pSimpleStatement = new SimpleStatementElements();
		this.pSimpleStatement2 = new SimpleStatement2Elements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pQualifiedIdentifier = new QualifiedIdentifierElements();
		this.pQualifier = new QualifierElements();
		this.pField = new FieldElements();
		this.pIndex = new IndexElements();
		this.pArguments = new ArgumentsElements();
		this.pModifier = new ModifierElements();
		this.pEvent = new EventElements();
		this.pModifierInvocation = new ModifierInvocationElements();
		this.pParameterList = new ParameterListElements();
		this.pReturnsParameterList = new ReturnsParameterListElements();
		this.pReturnParameterDeclaration = new ReturnParameterDeclarationElements();
		this.pStatement = new StatementElements();
		this.pDeleteStatement = new DeleteStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pBlock = new BlockElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pThrowStatement = new ThrowStatementElements();
		this.pPlaceHolderStatement = new PlaceHolderStatementElements();
		this.pExpression = new ExpressionElements();
		this.pSpecialExpression = new SpecialExpressionElements();
		this.pAssignment = new AssignmentElements();
		this.pBinaryExpression = new BinaryExpressionElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pEquality = new EqualityElements();
		this.pComparison = new ComparisonElements();
		this.pBitOr = new BitOrElements();
		this.pBitXor = new BitXorElements();
		this.pBitAnd = new BitAndElements();
		this.pShift = new ShiftElements();
		this.pAddSub = new AddSubElements();
		this.pMulDivMod = new MulDivModElements();
		this.pExponent = new ExponentElements();
		this.pUnaryExpression = new UnaryExpressionElements();
		this.pNotExpression = new NotExpressionElements();
		this.pPreIncExpression = new PreIncExpressionElements();
		this.pPreDecExpression = new PreDecExpressionElements();
		this.pBinaryNotExpression = new BinaryNotExpressionElements();
		this.pSignExpression = new SignExpressionElements();
		this.pNewExpression = new NewExpressionElements();
		this.pPreExpression = new PreExpressionElements();
		this.pPostIncDecExpression = new PostIncDecExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteral = new LiteralElements();
		this.pBooleanConst = new BooleanConstElements();
		this.pNumber = new NumberElements();
		this.pNumberDimensionless = new NumberDimensionlessElements();
		this.pEther = new EtherElements();
		this.pTime = new TimeElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pTypeCast = new TypeCastElements();
		this.pNow = new NowElements();
		this.pSpecialVariables = new SpecialVariablesElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.unicam.tryGrammar.TryGrammar.ANY_OTHER");
		this.eElementaryTypeNameEnum = new ElementaryTypeNameEnumElements();
		this.eLocationSpecifierEnum = new LocationSpecifierEnumElements();
		this.eVisibilityEnum = new VisibilityEnumElements();
		this.eAssignmentOpEnum = new AssignmentOpEnumElements();
		this.eEqualityOpEnum = new EqualityOpEnumElements();
		this.eComparisonOpEnum = new ComparisonOpEnumElements();
		this.eShiftOpEnum = new ShiftOpEnumElements();
		this.eAdditionOpEnum = new AdditionOpEnumElements();
		this.eMulDivModOpEnum = new MulDivModOpEnumElements();
		this.eIncDecOpEnum = new IncDecOpEnumElements();
		this.eBooleanLiteralEnum = new BooleanLiteralEnumElements();
		this.eEtherSubDenominationEnum = new EtherSubDenominationEnumElements();
		this.eTimeSubdenominationEnum = new TimeSubdenominationEnumElements();
		this.eSpecialVariablesTypeEnum = new SpecialVariablesTypeEnumElements();
		this.eSpecialExpressionTypeEnum = new SpecialExpressionTypeEnumElements();
		this.eReservedWordsEnum = new ReservedWordsEnumElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.unicam.tryGrammar.TryGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Solidity:
	//	(importDirective+=ImportDirective | contract+=Contract | library+=Library)*;
	public SolidityElements getSolidityAccess() {
		return pSolidity;
	}
	
	public ParserRule getSolidityRule() {
		return getSolidityAccess().getRule();
	}
	
	//ImportDirective:
	//	"import" importURI=STRING ";" |
	//	"import" "*" "as" unitAlias=ID "from" importURI=STRING ";" |
	//	"import" "{" symbolAliases+=SymbolAlias ("," symbolAliases+=SymbolAlias)? "}" "from" importURI=STRING ";";
	public ImportDirectiveElements getImportDirectiveAccess() {
		return pImportDirective;
	}
	
	public ParserRule getImportDirectiveRule() {
		return getImportDirectiveAccess().getRule();
	}
	
	//SymbolAlias:
	//	symbol=ID "as" alias=ID;
	public SymbolAliasElements getSymbolAliasAccess() {
		return pSymbolAlias;
	}
	
	public ParserRule getSymbolAliasRule() {
		return getSymbolAliasAccess().getRule();
	}
	
	//ContractOrLibrary:
	//	Contract | Library;
	public ContractOrLibraryElements getContractOrLibraryAccess() {
		return pContractOrLibrary;
	}
	
	public ParserRule getContractOrLibraryRule() {
		return getContractOrLibraryAccess().getRule();
	}
	
	//Contract:
	//	"contract" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
	//	inheritanceSpecifiers+=InheritanceSpecifier)*)?
	//	body=DefinitionBody;
	public ContractElements getContractAccess() {
		return pContract;
	}
	
	public ParserRule getContractRule() {
		return getContractAccess().getRule();
	}
	
	//Library:
	//	"library" name=ID ("is" inheritanceSpecifiers+=InheritanceSpecifier (","
	//	inheritanceSpecifiers+=InheritanceSpecifier)*)?
	//	body=DefinitionBody;
	public LibraryElements getLibraryAccess() {
		return pLibrary;
	}
	
	public ParserRule getLibraryRule() {
		return getLibraryAccess().getRule();
	}
	
	//DefinitionBody:
	//	{DefinitionBody} "{" (functions+=FunctionDefinition | structs+=StructDefinition | enums+=EnumDefinition |
	//	variables+=VariableDeclaration ";" | modifiers+=Modifier | events+=Event)*
	//	"}";
	public DefinitionBodyElements getDefinitionBodyAccess() {
		return pDefinitionBody;
	}
	
	public ParserRule getDefinitionBodyRule() {
		return getDefinitionBodyAccess().getRule();
	}
	
	//InheritanceSpecifier:
	//	superType=[ContractOrLibrary] args=FunctionCallListArguments?;
	public InheritanceSpecifierElements getInheritanceSpecifierAccess() {
		return pInheritanceSpecifier;
	}
	
	public ParserRule getInheritanceSpecifierRule() {
		return getInheritanceSpecifierAccess().getRule();
	}
	
	//FunctionCallListArguments:
	//	"(" {FunctionCallListArguments} (arguments+=Expression ("," arguments+=Expression)*)?
	//	")";
	public FunctionCallListArgumentsElements getFunctionCallListArgumentsAccess() {
		return pFunctionCallListArguments;
	}
	
	public ParserRule getFunctionCallListArgumentsRule() {
		return getFunctionCallListArgumentsAccess().getRule();
	}
	
	//// call({arg1: 1, arg2: 2})
	//FunctionCallArguments:
	//	"("
	//	"{" {FunctionCallArguments} (args+=FunctionCallArg ("," args+=FunctionCallArg)*)?
	//	"}"
	//	")" | FunctionCallListArguments;
	public FunctionCallArgumentsElements getFunctionCallArgumentsAccess() {
		return pFunctionCallArguments;
	}
	
	public ParserRule getFunctionCallArgumentsRule() {
		return getFunctionCallArgumentsAccess().getRule();
	}
	
	//FunctionCallArg:
	//	name=ID ":" expr=Expression;
	public FunctionCallArgElements getFunctionCallArgAccess() {
		return pFunctionCallArg;
	}
	
	public ParserRule getFunctionCallArgRule() {
		return getFunctionCallArgAccess().getRule();
	}
	
	//// Anonymous function allowed when "name" is not specified.
	//FunctionDefinition:
	//	"function" {FunctionDefinition} name=ID? parameters=ParameterList
	//	optionalElements+=FunctionDefinitionOptionalElement* ("returns" returnParameters=ReturnsParameterList)? (block=Block
	//	|
	//	";");
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return pFunctionDefinition;
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}
	
	//FunctionDefinitionOptionalElement:
	//	Const | ModifierInvocation | VisibilitySpecifier;
	public FunctionDefinitionOptionalElementElements getFunctionDefinitionOptionalElementAccess() {
		return pFunctionDefinitionOptionalElement;
	}
	
	public ParserRule getFunctionDefinitionOptionalElementRule() {
		return getFunctionDefinitionOptionalElementAccess().getRule();
	}
	
	//Const:
	//	"constant" {Const};
	public ConstElements getConstAccess() {
		return pConst;
	}
	
	public ParserRule getConstRule() {
		return getConstAccess().getRule();
	}
	
	//VisibilitySpecifier:
	//	visibility=VisibilityEnum;
	public VisibilitySpecifierElements getVisibilitySpecifierAccess() {
		return pVisibilitySpecifier;
	}
	
	public ParserRule getVisibilitySpecifierRule() {
		return getVisibilitySpecifierAccess().getRule();
	}
	
	//StructDefinition:
	//	"struct" name=ID "{" (members+=VariableDeclaration ";")*
	//	"}";
	public StructDefinitionElements getStructDefinitionAccess() {
		return pStructDefinition;
	}
	
	public ParserRule getStructDefinitionRule() {
		return getStructDefinitionAccess().getRule();
	}
	
	//EnumDefinition:
	//	"enum" name=ID "{" (members+=EnumValue ("," members+=EnumValue)*)?
	//	"}";
	public EnumDefinitionElements getEnumDefinitionAccess() {
		return pEnumDefinition;
	}
	
	public ParserRule getEnumDefinitionRule() {
		return getEnumDefinitionAccess().getRule();
	}
	
	//EnumValue:
	//	name=ID;
	public EnumValueElements getEnumValueAccess() {
		return pEnumValue;
	}
	
	public ParserRule getEnumValueRule() {
		return getEnumValueAccess().getRule();
	}
	
	//Variable:
	//	name=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//// Variable Declarations
	//VariableDeclaration Statement:
	//	StandardVariableDeclaration | VarVariableDeclaration | VarVariableTupleVariableDeclaration;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//StandardVariableDeclaration:
	//	type=StandardType optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("="
	//	expression=Expression)?;
	public StandardVariableDeclarationElements getStandardVariableDeclarationAccess() {
		return pStandardVariableDeclaration;
	}
	
	public ParserRule getStandardVariableDeclarationRule() {
		return getStandardVariableDeclarationAccess().getRule();
	}
	
	//VarVariableDeclaration:
	//	varType=VarType variable=Variable ("=" expression=Expression)?;
	public VarVariableDeclarationElements getVarVariableDeclarationAccess() {
		return pVarVariableDeclaration;
	}
	
	public ParserRule getVarVariableDeclarationRule() {
		return getVarVariableDeclarationAccess().getRule();
	}
	
	//VarVariableTupleVariableDeclaration:
	//	varType=VarType tuple=Tuple ("=" expression=Expression)?;
	public VarVariableTupleVariableDeclarationElements getVarVariableTupleVariableDeclarationAccess() {
		return pVarVariableTupleVariableDeclaration;
	}
	
	public ParserRule getVarVariableTupleVariableDeclarationRule() {
		return getVarVariableTupleVariableDeclarationAccess().getRule();
	}
	
	//VariableDeclarationOptionalElement:
	//	VisibilitySpecifier | IndexedSpecifer | ConstantSpecifier | LocationSpecifier;
	public VariableDeclarationOptionalElementElements getVariableDeclarationOptionalElementAccess() {
		return pVariableDeclarationOptionalElement;
	}
	
	public ParserRule getVariableDeclarationOptionalElementRule() {
		return getVariableDeclarationOptionalElementAccess().getRule();
	}
	
	//IndexedSpecifer:
	//	"indexed" {IndexedSpecifer};
	public IndexedSpeciferElements getIndexedSpeciferAccess() {
		return pIndexedSpecifer;
	}
	
	public ParserRule getIndexedSpeciferRule() {
		return getIndexedSpeciferAccess().getRule();
	}
	
	//ConstantSpecifier:
	//	"constant" {ConstantSpecifier};
	public ConstantSpecifierElements getConstantSpecifierAccess() {
		return pConstantSpecifier;
	}
	
	public ParserRule getConstantSpecifierRule() {
		return getConstantSpecifierAccess().getRule();
	}
	
	//LocationSpecifier:
	//	location=LocationSpecifierEnum;
	public LocationSpecifierElements getLocationSpecifierAccess() {
		return pLocationSpecifier;
	}
	
	public ParserRule getLocationSpecifierRule() {
		return getLocationSpecifierAccess().getRule();
	}
	
	//// Types
	//Type:
	//	StandardType | isVarType?=VarType;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//StandardType:
	//	ElementaryType dimension=ArrayDimensions? | Mapping | QualifiedIdentifier;
	public StandardTypeElements getStandardTypeAccess() {
		return pStandardType;
	}
	
	public ParserRule getStandardTypeRule() {
		return getStandardTypeAccess().getRule();
	}
	
	//StandardTypeWithoutQualifiedIdentifier:
	//	ElementaryType dimension=ArrayDimensions? | Mapping;
	public StandardTypeWithoutQualifiedIdentifierElements getStandardTypeWithoutQualifiedIdentifierAccess() {
		return pStandardTypeWithoutQualifiedIdentifier;
	}
	
	public ParserRule getStandardTypeWithoutQualifiedIdentifierRule() {
		return getStandardTypeWithoutQualifiedIdentifierAccess().getRule();
	}
	
	//ElementaryType:
	//	name=ElementaryTypeNameEnum;
	public ElementaryTypeElements getElementaryTypeAccess() {
		return pElementaryType;
	}
	
	public ParserRule getElementaryTypeRule() {
		return getElementaryTypeAccess().getRule();
	}
	
	//Mapping:
	//	"mapping" "("
	//	keyType=ElementaryTypeNameEnum "=>" valueType=Type
	//	")";
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//ArrayDimensions:
	//	"[" {ArrayDimensions} value+=Expression? "]" ("[" value+=Expression? "]")*;
	public ArrayDimensionsElements getArrayDimensionsAccess() {
		return pArrayDimensions;
	}
	
	public ParserRule getArrayDimensionsRule() {
		return getArrayDimensionsAccess().getRule();
	}
	
	//VarType:
	//	"var";
	public VarTypeElements getVarTypeAccess() {
		return pVarType;
	}
	
	public ParserRule getVarTypeRule() {
		return getVarTypeAccess().getRule();
	}
	
	//// Tuples
	//Tuple:
	//	"(" {Tuple} (members+=Expression? (members+=TupleSeparator members+=Expression?)+)?
	//	")";
	public TupleElements getTupleAccess() {
		return pTuple;
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}
	
	//TupleSeparator:
	//	"," {TupleSeparator};
	public TupleSeparatorElements getTupleSeparatorAccess() {
		return pTupleSeparator;
	}
	
	public ParserRule getTupleSeparatorRule() {
		return getTupleSeparatorAccess().getRule();
	}
	
	//// SimpleStatement
	////---------------------
	////SimpleStatement:
	////     SimpleStatement2 ";"
	////;
	//SimpleStatement:
	//	(StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
	//	ptionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
	//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
	//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement) semicolon?=";";
	public SimpleStatementElements getSimpleStatementAccess() {
		return pSimpleStatement;
	}
	
	public ParserRule getSimpleStatementRule() {
		return getSimpleStatementAccess().getRule();
	}
	
	//SimpleStatement2:
	//	StandardTypeWithoutQualifiedIdentifier ({StandardVariableDeclaration.type=current}
	//	optionalElements+=VariableDeclarationOptionalElement* variable=Variable ("=" expression=Expression)?) | VarType
	//	({VarVariableTypeDeclaration} variable=Variable ("=" expression=Expression) | {VarVariableTupleVariableDeclaration}
	//	tuple=Tuple ("=" expression=Expression)) | ExpressionStatement;
	public SimpleStatement2Elements getSimpleStatement2Access() {
		return pSimpleStatement2;
	}
	
	public ParserRule getSimpleStatement2Rule() {
		return getSimpleStatement2Access().getRule();
	}
	
	//ExpressionStatement:
	//	expression=Expression;
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}
	
	//QualifiedIdentifier:
	//	identifier=ID qualifiers+=Qualifier*;
	public QualifiedIdentifierElements getQualifiedIdentifierAccess() {
		return pQualifiedIdentifier;
	}
	
	public ParserRule getQualifiedIdentifierRule() {
		return getQualifiedIdentifierAccess().getRule();
	}
	
	//Qualifier:
	//	Field | Index | Arguments;
	public QualifierElements getQualifierAccess() {
		return pQualifier;
	}
	
	public ParserRule getQualifierRule() {
		return getQualifierAccess().getRule();
	}
	
	//Field:
	//	"." field=ID;
	public FieldElements getFieldAccess() {
		return pField;
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}
	
	//Index:
	//	"[" {Index} value=Expression? "]";
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//Arguments:
	//	arguments=FunctionCallArguments;
	public ArgumentsElements getArgumentsAccess() {
		return pArguments;
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}
	
	//Modifier:
	//	"modifier" name=ID parameters=ParameterList? block=Block;
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}
	
	//Event:
	//	"event" name=ID parameters=ParameterList? isAnonymous?="anonymous"? ";";
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//ModifierInvocation:
	//	name=[Modifier] args=FunctionCallListArguments?;
	public ModifierInvocationElements getModifierInvocationAccess() {
		return pModifierInvocation;
	}
	
	public ParserRule getModifierInvocationRule() {
		return getModifierInvocationAccess().getRule();
	}
	
	//ParameterList:
	//	"(" {ParameterList} (parameters+=VariableDeclaration ("," parameters+=VariableDeclaration)*)?
	//	")";
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ReturnsParameterList:
	//	"(" {ReturnsParameterList} (parameters+=ReturnParameterDeclaration ("," parameters+=ReturnParameterDeclaration)*)?
	//	")";
	public ReturnsParameterListElements getReturnsParameterListAccess() {
		return pReturnsParameterList;
	}
	
	public ParserRule getReturnsParameterListRule() {
		return getReturnsParameterListAccess().getRule();
	}
	
	//ReturnParameterDeclaration:
	//	typeRef=Type variable=Variable?;
	public ReturnParameterDeclarationElements getReturnParameterDeclarationAccess() {
		return pReturnParameterDeclaration;
	}
	
	public ParserRule getReturnParameterDeclarationRule() {
		return getReturnParameterDeclarationAccess().getRule();
	}
	
	//Statement:
	//	IfStatement | WhileStatement | ForStatement | Block | PlaceHolderStatement | (ContinueStatement | BreakStatement |
	//	ReturnStatement | ThrowStatement | DeleteStatement | SimpleStatement);
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//DeleteStatement:
	//	"delete" variable=QualifiedIdentifier ";";
	public DeleteStatementElements getDeleteStatementAccess() {
		return pDeleteStatement;
	}
	
	public ParserRule getDeleteStatementRule() {
		return getDeleteStatementAccess().getRule();
	}
	
	//IfStatement:
	//	"if" "(" condition=Expression ")"
	//	trueBody=Statement (=> "else" falseBody=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}
	
	//WhileStatement:
	//	"while" "(" condition=Expression ")"
	//	body=Statement;
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}
	
	//ForStatement:
	//	"for" "(" initExpression=SimpleStatement2? => ";" conditionExpression=Expression? ";"
	//	loopExpression=ExpressionStatement? ")"
	//	body=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}
	
	//Block:
	//	"{" {Block} (statements+=Statement statements+=Statement*)?
	//	"}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//ContinueStatement:
	//	"continue" {Continue} ";";
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}
	
	//BreakStatement:
	//	"break" {BreakStatement} ";";
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}
	
	//ReturnStatement:
	//	"return" {ReturnStatement} expression=Expression? ";";
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//ThrowStatement:
	//	"throw" {ThrowStatement} ";";
	public ThrowStatementElements getThrowStatementAccess() {
		return pThrowStatement;
	}
	
	public ParserRule getThrowStatementRule() {
		return getThrowStatementAccess().getRule();
	}
	
	//// Only allowed in a Modifier DAF
	//PlaceHolderStatement:
	//	"_" {PlaceHolderStatement};
	public PlaceHolderStatementElements getPlaceHolderStatementAccess() {
		return pPlaceHolderStatement;
	}
	
	public ParserRule getPlaceHolderStatementRule() {
		return getPlaceHolderStatementAccess().getRule();
	}
	
	//Expression:
	//	Assignment;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//SpecialExpression:
	//	type=SpecialExpressionTypeEnum fieldOrMethod=Field? qualifiers+=(Index | Arguments)*;
	public SpecialExpressionElements getSpecialExpressionAccess() {
		return pSpecialExpression;
	}
	
	public ParserRule getSpecialExpressionRule() {
		return getSpecialExpressionAccess().getRule();
	}
	
	//// Right associative
	//Assignment Expression:
	//	BinaryExpression ({Assignment.left=current} assignmentOp=AssignmentOpEnum expression=Expression
	//	| {VariableDeclarationExpression.type=current} variable=Variable ("=" expression=Expression)?)?;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//BinaryExpression Expression:
	//	Or;
	public BinaryExpressionElements getBinaryExpressionAccess() {
		return pBinaryExpression;
	}
	
	public ParserRule getBinaryExpressionRule() {
		return getBinaryExpressionAccess().getRule();
	}
	
	//// Precedence: 4, Left associative
	//Or Expression:
	//	And ({Or.left=current} "||" right=And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//// Precedence: 5, Left associative
	//And Expression:
	//	Equality ({And.left=current} "&&" right=Equality)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//// Precedence: 6, Left associative
	//Equality Expression:
	//	Comparison ({Equality.left=current} equalityOp=EqualityOpEnum right=Comparison)*;
	public EqualityElements getEqualityAccess() {
		return pEquality;
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}
	
	//// Precedence: 7, Left associative
	//Comparison Expression:
	//	BitOr ({Comparison.left=current} comparisonOp=ComparisonOpEnum right=BitOr)*;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//// Precedence: 8, Left associative
	//BitOr Expression:
	//	BitXor ({BitOr.left=current} "|" right=BitXor)*;
	public BitOrElements getBitOrAccess() {
		return pBitOr;
	}
	
	public ParserRule getBitOrRule() {
		return getBitOrAccess().getRule();
	}
	
	//// Precedence: 9, Left associativ
	//BitXor Expression:
	//	BitAnd ({BitXor.left=current} "^" right=BitAnd)*;
	public BitXorElements getBitXorAccess() {
		return pBitXor;
	}
	
	public ParserRule getBitXorRule() {
		return getBitXorAccess().getRule();
	}
	
	//// Precedence: 10, Left associative
	//BitAnd Expression:
	//	Shift ({BitAnd.left=current} "&" right=Shift)*;
	public BitAndElements getBitAndAccess() {
		return pBitAnd;
	}
	
	public ParserRule getBitAndRule() {
		return getBitAndAccess().getRule();
	}
	
	//// Precedence: 11, Left associative
	//Shift Expression:
	//	AddSub ({Shift.left=current} shiftOp=ShiftOpEnum right=AddSub)*;
	public ShiftElements getShiftAccess() {
		return pShift;
	}
	
	public ParserRule getShiftRule() {
		return getShiftAccess().getRule();
	}
	
	//// Precedence: 12, Left associative
	//AddSub Expression:
	//	MulDivMod => ({AddSub.left=current} additionOp=AdditionOpEnum right=MulDivMod)*;
	public AddSubElements getAddSubAccess() {
		return pAddSub;
	}
	
	public ParserRule getAddSubRule() {
		return getAddSubAccess().getRule();
	}
	
	//// Precedence: 13, Left associative
	//MulDivMod Expression:
	//	Exponent ({MulDivMod.left=current} multipliciativeOp=MulDivModOpEnum right=Exponent)*;
	public MulDivModElements getMulDivModAccess() {
		return pMulDivMod;
	}
	
	public ParserRule getMulDivModRule() {
		return getMulDivModAccess().getRule();
	}
	
	//// Precedence: 14, Left associative
	//Exponent Expression:
	//	UnaryExpression ({Exponent.left=current} "**" right=UnaryExpression)*;
	public ExponentElements getExponentAccess() {
		return pExponent;
	}
	
	public ParserRule getExponentRule() {
		return getExponentAccess().getRule();
	}
	
	//UnaryExpression Expression:
	//	NotExpression | BinaryNotExpression | SignExpression | NewExpression | PreExpression;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return pUnaryExpression;
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}
	
	//NotExpression:
	//	"!" expression=UnaryExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return pNotExpression;
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}
	
	//PreIncExpression:
	//	expression=PostIncDecExpression;
	public PreIncExpressionElements getPreIncExpressionAccess() {
		return pPreIncExpression;
	}
	
	public ParserRule getPreIncExpressionRule() {
		return getPreIncExpressionAccess().getRule();
	}
	
	//PreDecExpression:
	//	expression=PostIncDecExpression;
	public PreDecExpressionElements getPreDecExpressionAccess() {
		return pPreDecExpression;
	}
	
	public ParserRule getPreDecExpressionRule() {
		return getPreDecExpressionAccess().getRule();
	}
	
	//BinaryNotExpression:
	//	"~" expression=UnaryExpression;
	public BinaryNotExpressionElements getBinaryNotExpressionAccess() {
		return pBinaryNotExpression;
	}
	
	public ParserRule getBinaryNotExpressionRule() {
		return getBinaryNotExpressionAccess().getRule();
	}
	
	//SignExpression:
	//	signOp=("+" |
	//	"-") expression=UnaryExpression;
	public SignExpressionElements getSignExpressionAccess() {
		return pSignExpression;
	}
	
	public ParserRule getSignExpressionRule() {
		return getSignExpressionAccess().getRule();
	}
	
	//NewExpression:
	//	"new" contract=[ContractOrLibrary] args=FunctionCallListArguments;
	public NewExpressionElements getNewExpressionAccess() {
		return pNewExpression;
	}
	
	public ParserRule getNewExpressionRule() {
		return getNewExpressionAccess().getRule();
	}
	
	//PreExpression Expression:
	//	PostIncDecExpression | "++" PostIncDecExpression {PreIncExpression.expression=current} | "--" PostIncDecExpression
	//	{PreDecExpression.expression=current};
	public PreExpressionElements getPreExpressionAccess() {
		return pPreExpression;
	}
	
	public ParserRule getPreExpressionRule() {
		return getPreExpressionAccess().getRule();
	}
	
	//PostIncDecExpression Expression:
	//	PrimaryExpression ({PostIncDecExpression.expression=current} postOp=IncDecOpEnum)*;
	public PostIncDecExpressionElements getPostIncDecExpressionAccess() {
		return pPostIncDecExpression;
	}
	
	public ParserRule getPostIncDecExpressionRule() {
		return getPostIncDecExpressionAccess().getRule();
	}
	
	//PrimaryExpression Expression:
	//	SpecialExpression | QualifiedIdentifier | Literal | TypeCast |
	//	"("
	//	Expression ({Tuple.members+=current} (members+=TupleSeparator members+=Expression?)+)?
	//	")" |
	//	"("
	//	TupleSeparator ({Tuple.members+=current} members+=Expression? (members+=TupleSeparator members+=Expression?)*)
	//	")" |
	//	"(" ")" {Tuple};
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//Literal:
	//	SpecialVariables | BooleanConst | Number | StringLiteral;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//BooleanConst:
	//	value=BooleanLiteralEnum;
	public BooleanConstElements getBooleanConstAccess() {
		return pBooleanConst;
	}
	
	public ParserRule getBooleanConstRule() {
		return getBooleanConstAccess().getRule();
	}
	
	//Number:
	//	NumberDimensionless | Ether | Now | Time;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//NumberDimensionless:
	//	value=INT;
	public NumberDimensionlessElements getNumberDimensionlessAccess() {
		return pNumberDimensionless;
	}
	
	public ParserRule getNumberDimensionlessRule() {
		return getNumberDimensionlessAccess().getRule();
	}
	
	//Ether:
	//	value=INT ether=EtherSubDenominationEnum;
	public EtherElements getEtherAccess() {
		return pEther;
	}
	
	public ParserRule getEtherRule() {
		return getEtherAccess().getRule();
	}
	
	//Time:
	//	value=INT time=TimeSubdenominationEnum;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}
	
	//TypeCast:
	//	value=ElementaryTypeNameEnum "("
	//	expression=Expression
	//	")";
	public TypeCastElements getTypeCastAccess() {
		return pTypeCast;
	}
	
	public ParserRule getTypeCastRule() {
		return getTypeCastAccess().getRule();
	}
	
	//Now:
	//	{Now} "now";
	public NowElements getNowAccess() {
		return pNow;
	}
	
	public ParserRule getNowRule() {
		return getNowAccess().getRule();
	}
	
	//SpecialVariables:
	//	type=SpecialVariablesTypeEnum "." field=ID qualifiers+=Qualifier*;
	public SpecialVariablesElements getSpecialVariablesAccess() {
		return pSpecialVariables;
	}
	
	public ParserRule getSpecialVariablesRule() {
		return getSpecialVariablesAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EBigInteger:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
	
	//enum ElementaryTypeNameEnum: // INT
	//	INT="int" | INT16="int16" | INT24="int24" | INT32="int32" | INT40="int40" | INT48="int48" | INT56="int56" |
	//	INT64="int64" | INT72="int72" | INT80="int80" | INT88="int88" | INT96="int96" | INT104="int104" | INT112="int112" |
	//	INT120="int120" | INT128="int128" | INT136="int136" | INT144="int144" | INT152="int152" | INT160="int160" |
	//	INT168="int168" | INT178="int178" | INT184="int184" | INT192="int192" | INT200="int200" | INT208="int208" |
	//	INT216="int216" | INT224="int224" | INT232="int232" | INT240="int240" | INT248="int248" | INT256="int256" | // UINT
	//	UINT="uint" | UINT8="uint8" | UINT16="uint16" | UNIT24="uint24" | UINT32="uint32" | UINT40="uint40" | UINT48="uint48" |
	//	UNIT56="uint56" | UINT64="uint64" | UINT72="uint72" | UINT80="uint80" | UINT88="uint88" | UINT96="uint96" |
	//	UINT104="uint104" | UINT112="uint112" | UINT120="uint120" | UINT128="uint128" | UINT136="uint136" | UINT144="uint144"
	//	| UINT152="uint152" | UINT160="uint160" | UINT168="uint168" | UINT178="uint178" | UINT184="uint184" |
	//	UINT192="uint192" | UINT200="uint200" | UINT208="uint208" | UINT216="uint216" | UINT244="uint224" | UINT232="uint232"
	//	| UINT240="uint240" | UINT248="uint248" | UINT256="uint256" | // BYT
	//	BYTE="byte" | BYTES="bytes" | BYTES1="bytes1" | BYTES2="bytes2" | BYTES3="bytes3" | BYTES4="bytes4" | BYTES5="bytes5" |
	//	BYTES6="bytes6" | BYTES7="bytes7" | BYTES8="bytes8" | BYTES9="bytes9" | BYTES10="bytes10" | BYTES11="bytes11" |
	//	BYTES12="bytes12" | BYTES13="bytes13" | BYTES14="bytes14" | BYTES15="bytes15" | BYTES16="bytes16" | BYTES17="bytes17"
	//	| BYTES18="bytes18" | BYTES19="bytes19" | BYTES20="bytes20" | BYTES21="bytes21" | BYTES22="bytes22" |
	//	BYTES23="bytes23" | BYTES24="bytes24" | BYTES25="bytes25" | BYTES26="bytes26" | BYTES27="bytes27" | BYTES28="bytes28"
	//	| BYTES29="bytes29" | BYTES30="bytes30" | BYTES31="bytes31" | BYTES32="bytes32" | // Other
	//	STRING="string" | ADDRESS="address" | BOOL="bool" | REAL="real" | UREAL="ureal";
	public ElementaryTypeNameEnumElements getElementaryTypeNameEnumAccess() {
		return eElementaryTypeNameEnum;
	}
	
	public EnumRule getElementaryTypeNameEnumRule() {
		return getElementaryTypeNameEnumAccess().getRule();
	}
	
	//enum LocationSpecifierEnum:
	//	MEMORY="memory" |
	//	STORAGE="storage";
	public LocationSpecifierEnumElements getLocationSpecifierEnumAccess() {
		return eLocationSpecifierEnum;
	}
	
	public EnumRule getLocationSpecifierEnumRule() {
		return getLocationSpecifierEnumAccess().getRule();
	}
	
	//enum VisibilityEnum:
	//	PUBLIC="public" |
	//	INTERNAL="internal" |
	//	PRIVATE="private" |
	//	EXTERNAL="external";
	public VisibilityEnumElements getVisibilityEnumAccess() {
		return eVisibilityEnum;
	}
	
	public EnumRule getVisibilityEnumRule() {
		return getVisibilityEnumAccess().getRule();
	}
	
	//enum AssignmentOpEnum:
	//	ASSIGN="=" |
	//	ASSIGN_OR="|=" |
	//	ASSIGN_XOR="^=" |
	//	ASSIGN_AND="&=" |
	//	ASSIGN_SHIFT_LEFT="<<=" |
	//	ASSIGN_SHIFT_RIGHT=">>=" |
	//	ASSIGN_SHIFT_RIGHT_ARIMETIC=">>>=" |
	//	ASSIGN_ADD="+=" |
	//	ASSIGN_SUB="-=" |
	//	ASSIGN_MULT="*=" |
	//	ASSIGN_DIV="/=" |
	//	ASSIGN_MOD="%=";
	public AssignmentOpEnumElements getAssignmentOpEnumAccess() {
		return eAssignmentOpEnum;
	}
	
	public EnumRule getAssignmentOpEnumRule() {
		return getAssignmentOpEnumAccess().getRule();
	}
	
	//enum EqualityOpEnum:
	//	EQ="==" |
	//	NOTEQ="!=";
	public EqualityOpEnumElements getEqualityOpEnumAccess() {
		return eEqualityOpEnum;
	}
	
	public EnumRule getEqualityOpEnumRule() {
		return getEqualityOpEnumAccess().getRule();
	}
	
	//enum ComparisonOpEnum:
	//	LT="<" |
	//	GT=">" |
	//	LTE="<=" |
	//	GTE=">=" |
	//	IN="in";
	public ComparisonOpEnumElements getComparisonOpEnumAccess() {
		return eComparisonOpEnum;
	}
	
	public EnumRule getComparisonOpEnumRule() {
		return getComparisonOpEnumAccess().getRule();
	}
	
	//enum ShiftOpEnum:
	//	LEFT_SHIFT="<<" |
	//	RIGHT_SHIFT=">>" |
	//	ARITHMETIC_RIGHT_SHIFT=">>>";
	public ShiftOpEnumElements getShiftOpEnumAccess() {
		return eShiftOpEnum;
	}
	
	public EnumRule getShiftOpEnumRule() {
		return getShiftOpEnumAccess().getRule();
	}
	
	//enum AdditionOpEnum:
	//	ADD="+" |
	//	SUB="-";
	public AdditionOpEnumElements getAdditionOpEnumAccess() {
		return eAdditionOpEnum;
	}
	
	public EnumRule getAdditionOpEnumRule() {
		return getAdditionOpEnumAccess().getRule();
	}
	
	//enum MulDivModOpEnum:
	//	MULT="*" |
	//	DIV="/" |
	//	MOD="%";
	public MulDivModOpEnumElements getMulDivModOpEnumAccess() {
		return eMulDivModOpEnum;
	}
	
	public EnumRule getMulDivModOpEnumRule() {
		return getMulDivModOpEnumAccess().getRule();
	}
	
	//enum IncDecOpEnum:
	//	INC="++" |
	//	DEC="--";
	public IncDecOpEnumElements getIncDecOpEnumAccess() {
		return eIncDecOpEnum;
	}
	
	public EnumRule getIncDecOpEnumRule() {
		return getIncDecOpEnumAccess().getRule();
	}
	
	//enum BooleanLiteralEnum:
	//	TRUE="true" |
	//	FALSE="false";
	public BooleanLiteralEnumElements getBooleanLiteralEnumAccess() {
		return eBooleanLiteralEnum;
	}
	
	public EnumRule getBooleanLiteralEnumRule() {
		return getBooleanLiteralEnumAccess().getRule();
	}
	
	//enum EtherSubDenominationEnum:
	//	WEI="wei" |
	//	SZABO="szabo" |
	//	FINNEY="finney" |
	//	ETHER="ether";
	public EtherSubDenominationEnumElements getEtherSubDenominationEnumAccess() {
		return eEtherSubDenominationEnum;
	}
	
	public EnumRule getEtherSubDenominationEnumRule() {
		return getEtherSubDenominationEnumAccess().getRule();
	}
	
	//enum TimeSubdenominationEnum:
	//	SECONDS="seconds" |
	//	MINUTES="minutes" |
	//	HOURS="hours" |
	//	DAYS="days" |
	//	WEEKS="weeks" |
	//	YEARS="years";
	public TimeSubdenominationEnumElements getTimeSubdenominationEnumAccess() {
		return eTimeSubdenominationEnum;
	}
	
	public EnumRule getTimeSubdenominationEnumRule() {
		return getTimeSubdenominationEnumAccess().getRule();
	}
	
	//enum SpecialVariablesTypeEnum:
	//	MSG="msg" |
	//	BLOCK="block" |
	//	TX="tx";
	public SpecialVariablesTypeEnumElements getSpecialVariablesTypeEnumAccess() {
		return eSpecialVariablesTypeEnum;
	}
	
	public EnumRule getSpecialVariablesTypeEnumRule() {
		return getSpecialVariablesTypeEnumAccess().getRule();
	}
	
	//enum SpecialExpressionTypeEnum:
	//	SUPER="super" |
	//	THIS="this";
	public SpecialExpressionTypeEnumElements getSpecialExpressionTypeEnumAccess() {
		return eSpecialExpressionTypeEnum;
	}
	
	public EnumRule getSpecialExpressionTypeEnumRule() {
		return getSpecialExpressionTypeEnumAccess().getRule();
	}
	
	//enum ReservedWordsEnum:
	//	AS="as" |
	//	CASE="case" |
	//	CATCH="catch" |
	//	FINAL="final" |
	//	LET="let" |
	//	MATCH="match" |
	//	OF="of" |
	//	RELOCATABLE="relocatable" |
	//	SWITCH="switch" |
	//	TRY="try" |
	//	TYPE="type" |
	//	TYPEOF="typeof" |
	//	USING="using" |
	//	ILLEGAL;
	public ReservedWordsEnumElements getReservedWordsEnumAccess() {
		return eReservedWordsEnum;
	}
	
	public EnumRule getReservedWordsEnumRule() {
		return getReservedWordsEnumAccess().getRule();
	}
}
