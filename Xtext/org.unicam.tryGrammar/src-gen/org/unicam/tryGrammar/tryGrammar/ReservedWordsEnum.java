/**
 * generated by Xtext 2.19.0
 */
package org.unicam.tryGrammar.tryGrammar;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Reserved Words Enum</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see org.unicam.tryGrammar.tryGrammar.TryGrammarPackage#getReservedWordsEnum()
 * @model
 * @generated
 */
public enum ReservedWordsEnum implements Enumerator
{
  /**
   * The '<em><b>AS</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AS_VALUE
   * @generated
   * @ordered
   */
  AS(0, "AS", "as"),

  /**
   * The '<em><b>CASE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CASE_VALUE
   * @generated
   * @ordered
   */
  CASE(1, "CASE", "case"),

  /**
   * The '<em><b>CATCH</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CATCH_VALUE
   * @generated
   * @ordered
   */
  CATCH(2, "CATCH", "catch"),

  /**
   * The '<em><b>FINAL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FINAL_VALUE
   * @generated
   * @ordered
   */
  FINAL(3, "FINAL", "final"),

  /**
   * The '<em><b>LET</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LET_VALUE
   * @generated
   * @ordered
   */
  LET(4, "LET", "let"),

  /**
   * The '<em><b>MATCH</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MATCH_VALUE
   * @generated
   * @ordered
   */
  MATCH(5, "MATCH", "match"),

  /**
   * The '<em><b>OF</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OF_VALUE
   * @generated
   * @ordered
   */
  OF(6, "OF", "of"),

  /**
   * The '<em><b>RELOCATABLE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RELOCATABLE_VALUE
   * @generated
   * @ordered
   */
  RELOCATABLE(7, "RELOCATABLE", "relocatable"),

  /**
   * The '<em><b>SWITCH</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SWITCH_VALUE
   * @generated
   * @ordered
   */
  SWITCH(8, "SWITCH", "switch"),

  /**
   * The '<em><b>TRY</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TRY_VALUE
   * @generated
   * @ordered
   */
  TRY(9, "TRY", "try"),

  /**
   * The '<em><b>TYPE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TYPE_VALUE
   * @generated
   * @ordered
   */
  TYPE(10, "TYPE", "type"),

  /**
   * The '<em><b>TYPEOF</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TYPEOF_VALUE
   * @generated
   * @ordered
   */
  TYPEOF(11, "TYPEOF", "typeof"),

  /**
   * The '<em><b>USING</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #USING_VALUE
   * @generated
   * @ordered
   */
  USING(12, "USING", "using"),

  /**
   * The '<em><b>ILLEGAL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ILLEGAL_VALUE
   * @generated
   * @ordered
   */
  ILLEGAL(13, "ILLEGAL", "ILLEGAL");

  /**
   * The '<em><b>AS</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #AS
   * @model literal="as"
   * @generated
   * @ordered
   */
  public static final int AS_VALUE = 0;

  /**
   * The '<em><b>CASE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CASE
   * @model literal="case"
   * @generated
   * @ordered
   */
  public static final int CASE_VALUE = 1;

  /**
   * The '<em><b>CATCH</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CATCH
   * @model literal="catch"
   * @generated
   * @ordered
   */
  public static final int CATCH_VALUE = 2;

  /**
   * The '<em><b>FINAL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FINAL
   * @model literal="final"
   * @generated
   * @ordered
   */
  public static final int FINAL_VALUE = 3;

  /**
   * The '<em><b>LET</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LET
   * @model literal="let"
   * @generated
   * @ordered
   */
  public static final int LET_VALUE = 4;

  /**
   * The '<em><b>MATCH</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MATCH
   * @model literal="match"
   * @generated
   * @ordered
   */
  public static final int MATCH_VALUE = 5;

  /**
   * The '<em><b>OF</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #OF
   * @model literal="of"
   * @generated
   * @ordered
   */
  public static final int OF_VALUE = 6;

  /**
   * The '<em><b>RELOCATABLE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RELOCATABLE
   * @model literal="relocatable"
   * @generated
   * @ordered
   */
  public static final int RELOCATABLE_VALUE = 7;

  /**
   * The '<em><b>SWITCH</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SWITCH
   * @model literal="switch"
   * @generated
   * @ordered
   */
  public static final int SWITCH_VALUE = 8;

  /**
   * The '<em><b>TRY</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TRY
   * @model literal="try"
   * @generated
   * @ordered
   */
  public static final int TRY_VALUE = 9;

  /**
   * The '<em><b>TYPE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TYPE
   * @model literal="type"
   * @generated
   * @ordered
   */
  public static final int TYPE_VALUE = 10;

  /**
   * The '<em><b>TYPEOF</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TYPEOF
   * @model literal="typeof"
   * @generated
   * @ordered
   */
  public static final int TYPEOF_VALUE = 11;

  /**
   * The '<em><b>USING</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #USING
   * @model literal="using"
   * @generated
   * @ordered
   */
  public static final int USING_VALUE = 12;

  /**
   * The '<em><b>ILLEGAL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ILLEGAL
   * @model
   * @generated
   * @ordered
   */
  public static final int ILLEGAL_VALUE = 13;

  /**
   * An array of all the '<em><b>Reserved Words Enum</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final ReservedWordsEnum[] VALUES_ARRAY =
    new ReservedWordsEnum[]
    {
      AS,
      CASE,
      CATCH,
      FINAL,
      LET,
      MATCH,
      OF,
      RELOCATABLE,
      SWITCH,
      TRY,
      TYPE,
      TYPEOF,
      USING,
      ILLEGAL,
    };

  /**
   * A public read-only list of all the '<em><b>Reserved Words Enum</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<ReservedWordsEnum> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Reserved Words Enum</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ReservedWordsEnum get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ReservedWordsEnum result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Reserved Words Enum</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ReservedWordsEnum getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ReservedWordsEnum result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Reserved Words Enum</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ReservedWordsEnum get(int value)
  {
    switch (value)
    {
      case AS_VALUE: return AS;
      case CASE_VALUE: return CASE;
      case CATCH_VALUE: return CATCH;
      case FINAL_VALUE: return FINAL;
      case LET_VALUE: return LET;
      case MATCH_VALUE: return MATCH;
      case OF_VALUE: return OF;
      case RELOCATABLE_VALUE: return RELOCATABLE;
      case SWITCH_VALUE: return SWITCH;
      case TRY_VALUE: return TRY;
      case TYPE_VALUE: return TYPE;
      case TYPEOF_VALUE: return TYPEOF;
      case USING_VALUE: return USING;
      case ILLEGAL_VALUE: return ILLEGAL;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private ReservedWordsEnum(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //ReservedWordsEnum
