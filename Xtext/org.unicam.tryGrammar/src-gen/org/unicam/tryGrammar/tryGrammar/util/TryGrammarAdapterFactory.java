/**
 * generated by Xtext 2.19.0
 */
package org.unicam.tryGrammar.tryGrammar.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.unicam.tryGrammar.tryGrammar.AddSub;
import org.unicam.tryGrammar.tryGrammar.And;
import org.unicam.tryGrammar.tryGrammar.Arguments;
import org.unicam.tryGrammar.tryGrammar.ArrayDimensions;
import org.unicam.tryGrammar.tryGrammar.Assignment;
import org.unicam.tryGrammar.tryGrammar.BinaryNotExpression;
import org.unicam.tryGrammar.tryGrammar.BitAnd;
import org.unicam.tryGrammar.tryGrammar.BitOr;
import org.unicam.tryGrammar.tryGrammar.BitXor;
import org.unicam.tryGrammar.tryGrammar.Block;
import org.unicam.tryGrammar.tryGrammar.BooleanConst;
import org.unicam.tryGrammar.tryGrammar.BreakStatement;
import org.unicam.tryGrammar.tryGrammar.Comparison;
import org.unicam.tryGrammar.tryGrammar.Const;
import org.unicam.tryGrammar.tryGrammar.ConstantSpecifier;
import org.unicam.tryGrammar.tryGrammar.Continue;
import org.unicam.tryGrammar.tryGrammar.ContinueStatement;
import org.unicam.tryGrammar.tryGrammar.Contract;
import org.unicam.tryGrammar.tryGrammar.ContractOrLibrary;
import org.unicam.tryGrammar.tryGrammar.DefinitionBody;
import org.unicam.tryGrammar.tryGrammar.DeleteStatement;
import org.unicam.tryGrammar.tryGrammar.ElementaryType;
import org.unicam.tryGrammar.tryGrammar.EnumDefinition;
import org.unicam.tryGrammar.tryGrammar.EnumValue;
import org.unicam.tryGrammar.tryGrammar.Equality;
import org.unicam.tryGrammar.tryGrammar.Ether;
import org.unicam.tryGrammar.tryGrammar.Event;
import org.unicam.tryGrammar.tryGrammar.Exponent;
import org.unicam.tryGrammar.tryGrammar.Expression;
import org.unicam.tryGrammar.tryGrammar.ExpressionStatement;
import org.unicam.tryGrammar.tryGrammar.Field;
import org.unicam.tryGrammar.tryGrammar.ForStatement;
import org.unicam.tryGrammar.tryGrammar.FunctionCallArg;
import org.unicam.tryGrammar.tryGrammar.FunctionCallArguments;
import org.unicam.tryGrammar.tryGrammar.FunctionCallListArguments;
import org.unicam.tryGrammar.tryGrammar.FunctionDefinition;
import org.unicam.tryGrammar.tryGrammar.FunctionDefinitionOptionalElement;
import org.unicam.tryGrammar.tryGrammar.IfStatement;
import org.unicam.tryGrammar.tryGrammar.ImportDirective;
import org.unicam.tryGrammar.tryGrammar.Index;
import org.unicam.tryGrammar.tryGrammar.IndexedSpecifer;
import org.unicam.tryGrammar.tryGrammar.InheritanceSpecifier;
import org.unicam.tryGrammar.tryGrammar.Library;
import org.unicam.tryGrammar.tryGrammar.Literal;
import org.unicam.tryGrammar.tryGrammar.LocationSpecifier;
import org.unicam.tryGrammar.tryGrammar.Mapping;
import org.unicam.tryGrammar.tryGrammar.Modifier;
import org.unicam.tryGrammar.tryGrammar.ModifierInvocation;
import org.unicam.tryGrammar.tryGrammar.MulDivMod;
import org.unicam.tryGrammar.tryGrammar.NewExpression;
import org.unicam.tryGrammar.tryGrammar.NotExpression;
import org.unicam.tryGrammar.tryGrammar.Now;
import org.unicam.tryGrammar.tryGrammar.NumberDimensionless;
import org.unicam.tryGrammar.tryGrammar.Or;
import org.unicam.tryGrammar.tryGrammar.ParameterList;
import org.unicam.tryGrammar.tryGrammar.PlaceHolderStatement;
import org.unicam.tryGrammar.tryGrammar.PostIncDecExpression;
import org.unicam.tryGrammar.tryGrammar.PreDecExpression;
import org.unicam.tryGrammar.tryGrammar.PreIncExpression;
import org.unicam.tryGrammar.tryGrammar.QualifiedIdentifier;
import org.unicam.tryGrammar.tryGrammar.Qualifier;
import org.unicam.tryGrammar.tryGrammar.ReturnParameterDeclaration;
import org.unicam.tryGrammar.tryGrammar.ReturnStatement;
import org.unicam.tryGrammar.tryGrammar.ReturnsParameterList;
import org.unicam.tryGrammar.tryGrammar.Shift;
import org.unicam.tryGrammar.tryGrammar.SignExpression;
import org.unicam.tryGrammar.tryGrammar.SimpleStatement;
import org.unicam.tryGrammar.tryGrammar.SimpleStatement2;
import org.unicam.tryGrammar.tryGrammar.Solidity;
import org.unicam.tryGrammar.tryGrammar.SpecialExpression;
import org.unicam.tryGrammar.tryGrammar.SpecialVariables;
import org.unicam.tryGrammar.tryGrammar.StandardType;
import org.unicam.tryGrammar.tryGrammar.StandardTypeWithoutQualifiedIdentifier;
import org.unicam.tryGrammar.tryGrammar.StandardVariableDeclaration;
import org.unicam.tryGrammar.tryGrammar.Statement;
import org.unicam.tryGrammar.tryGrammar.StringLiteral;
import org.unicam.tryGrammar.tryGrammar.StructDefinition;
import org.unicam.tryGrammar.tryGrammar.SymbolAlias;
import org.unicam.tryGrammar.tryGrammar.ThrowStatement;
import org.unicam.tryGrammar.tryGrammar.Time;
import org.unicam.tryGrammar.tryGrammar.TryGrammarPackage;
import org.unicam.tryGrammar.tryGrammar.Tuple;
import org.unicam.tryGrammar.tryGrammar.TupleSeparator;
import org.unicam.tryGrammar.tryGrammar.Type;
import org.unicam.tryGrammar.tryGrammar.TypeCast;
import org.unicam.tryGrammar.tryGrammar.VarVariableDeclaration;
import org.unicam.tryGrammar.tryGrammar.VarVariableTupleVariableDeclaration;
import org.unicam.tryGrammar.tryGrammar.VarVariableTypeDeclaration;
import org.unicam.tryGrammar.tryGrammar.Variable;
import org.unicam.tryGrammar.tryGrammar.VariableDeclarationExpression;
import org.unicam.tryGrammar.tryGrammar.VariableDeclarationOptionalElement;
import org.unicam.tryGrammar.tryGrammar.VisibilitySpecifier;
import org.unicam.tryGrammar.tryGrammar.WhileStatement;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.unicam.tryGrammar.tryGrammar.TryGrammarPackage
 * @generated
 */
public class TryGrammarAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static TryGrammarPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TryGrammarAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = TryGrammarPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TryGrammarSwitch<Adapter> modelSwitch =
    new TryGrammarSwitch<Adapter>()
    {
      @Override
      public Adapter caseSolidity(Solidity object)
      {
        return createSolidityAdapter();
      }
      @Override
      public Adapter caseImportDirective(ImportDirective object)
      {
        return createImportDirectiveAdapter();
      }
      @Override
      public Adapter caseSymbolAlias(SymbolAlias object)
      {
        return createSymbolAliasAdapter();
      }
      @Override
      public Adapter caseContractOrLibrary(ContractOrLibrary object)
      {
        return createContractOrLibraryAdapter();
      }
      @Override
      public Adapter caseContract(Contract object)
      {
        return createContractAdapter();
      }
      @Override
      public Adapter caseLibrary(Library object)
      {
        return createLibraryAdapter();
      }
      @Override
      public Adapter caseDefinitionBody(DefinitionBody object)
      {
        return createDefinitionBodyAdapter();
      }
      @Override
      public Adapter caseInheritanceSpecifier(InheritanceSpecifier object)
      {
        return createInheritanceSpecifierAdapter();
      }
      @Override
      public Adapter caseFunctionCallListArguments(FunctionCallListArguments object)
      {
        return createFunctionCallListArgumentsAdapter();
      }
      @Override
      public Adapter caseFunctionCallArguments(FunctionCallArguments object)
      {
        return createFunctionCallArgumentsAdapter();
      }
      @Override
      public Adapter caseFunctionCallArg(FunctionCallArg object)
      {
        return createFunctionCallArgAdapter();
      }
      @Override
      public Adapter caseFunctionDefinition(FunctionDefinition object)
      {
        return createFunctionDefinitionAdapter();
      }
      @Override
      public Adapter caseFunctionDefinitionOptionalElement(FunctionDefinitionOptionalElement object)
      {
        return createFunctionDefinitionOptionalElementAdapter();
      }
      @Override
      public Adapter caseConst(Const object)
      {
        return createConstAdapter();
      }
      @Override
      public Adapter caseVisibilitySpecifier(VisibilitySpecifier object)
      {
        return createVisibilitySpecifierAdapter();
      }
      @Override
      public Adapter caseStructDefinition(StructDefinition object)
      {
        return createStructDefinitionAdapter();
      }
      @Override
      public Adapter caseEnumDefinition(EnumDefinition object)
      {
        return createEnumDefinitionAdapter();
      }
      @Override
      public Adapter caseEnumValue(EnumValue object)
      {
        return createEnumValueAdapter();
      }
      @Override
      public Adapter caseVariable(Variable object)
      {
        return createVariableAdapter();
      }
      @Override
      public Adapter caseStatement(Statement object)
      {
        return createStatementAdapter();
      }
      @Override
      public Adapter caseStandardVariableDeclaration(StandardVariableDeclaration object)
      {
        return createStandardVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVarVariableDeclaration(VarVariableDeclaration object)
      {
        return createVarVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVarVariableTupleVariableDeclaration(VarVariableTupleVariableDeclaration object)
      {
        return createVarVariableTupleVariableDeclarationAdapter();
      }
      @Override
      public Adapter caseVariableDeclarationOptionalElement(VariableDeclarationOptionalElement object)
      {
        return createVariableDeclarationOptionalElementAdapter();
      }
      @Override
      public Adapter caseIndexedSpecifer(IndexedSpecifer object)
      {
        return createIndexedSpeciferAdapter();
      }
      @Override
      public Adapter caseConstantSpecifier(ConstantSpecifier object)
      {
        return createConstantSpecifierAdapter();
      }
      @Override
      public Adapter caseLocationSpecifier(LocationSpecifier object)
      {
        return createLocationSpecifierAdapter();
      }
      @Override
      public Adapter caseType(Type object)
      {
        return createTypeAdapter();
      }
      @Override
      public Adapter caseStandardType(StandardType object)
      {
        return createStandardTypeAdapter();
      }
      @Override
      public Adapter caseStandardTypeWithoutQualifiedIdentifier(StandardTypeWithoutQualifiedIdentifier object)
      {
        return createStandardTypeWithoutQualifiedIdentifierAdapter();
      }
      @Override
      public Adapter caseElementaryType(ElementaryType object)
      {
        return createElementaryTypeAdapter();
      }
      @Override
      public Adapter caseMapping(Mapping object)
      {
        return createMappingAdapter();
      }
      @Override
      public Adapter caseArrayDimensions(ArrayDimensions object)
      {
        return createArrayDimensionsAdapter();
      }
      @Override
      public Adapter caseTuple(Tuple object)
      {
        return createTupleAdapter();
      }
      @Override
      public Adapter caseTupleSeparator(TupleSeparator object)
      {
        return createTupleSeparatorAdapter();
      }
      @Override
      public Adapter caseSimpleStatement(SimpleStatement object)
      {
        return createSimpleStatementAdapter();
      }
      @Override
      public Adapter caseSimpleStatement2(SimpleStatement2 object)
      {
        return createSimpleStatement2Adapter();
      }
      @Override
      public Adapter caseExpressionStatement(ExpressionStatement object)
      {
        return createExpressionStatementAdapter();
      }
      @Override
      public Adapter caseQualifiedIdentifier(QualifiedIdentifier object)
      {
        return createQualifiedIdentifierAdapter();
      }
      @Override
      public Adapter caseQualifier(Qualifier object)
      {
        return createQualifierAdapter();
      }
      @Override
      public Adapter caseField(Field object)
      {
        return createFieldAdapter();
      }
      @Override
      public Adapter caseIndex(Index object)
      {
        return createIndexAdapter();
      }
      @Override
      public Adapter caseArguments(Arguments object)
      {
        return createArgumentsAdapter();
      }
      @Override
      public Adapter caseModifier(Modifier object)
      {
        return createModifierAdapter();
      }
      @Override
      public Adapter caseEvent(Event object)
      {
        return createEventAdapter();
      }
      @Override
      public Adapter caseModifierInvocation(ModifierInvocation object)
      {
        return createModifierInvocationAdapter();
      }
      @Override
      public Adapter caseParameterList(ParameterList object)
      {
        return createParameterListAdapter();
      }
      @Override
      public Adapter caseReturnsParameterList(ReturnsParameterList object)
      {
        return createReturnsParameterListAdapter();
      }
      @Override
      public Adapter caseReturnParameterDeclaration(ReturnParameterDeclaration object)
      {
        return createReturnParameterDeclarationAdapter();
      }
      @Override
      public Adapter caseDeleteStatement(DeleteStatement object)
      {
        return createDeleteStatementAdapter();
      }
      @Override
      public Adapter caseIfStatement(IfStatement object)
      {
        return createIfStatementAdapter();
      }
      @Override
      public Adapter caseWhileStatement(WhileStatement object)
      {
        return createWhileStatementAdapter();
      }
      @Override
      public Adapter caseForStatement(ForStatement object)
      {
        return createForStatementAdapter();
      }
      @Override
      public Adapter caseBlock(Block object)
      {
        return createBlockAdapter();
      }
      @Override
      public Adapter caseContinueStatement(ContinueStatement object)
      {
        return createContinueStatementAdapter();
      }
      @Override
      public Adapter caseBreakStatement(BreakStatement object)
      {
        return createBreakStatementAdapter();
      }
      @Override
      public Adapter caseReturnStatement(ReturnStatement object)
      {
        return createReturnStatementAdapter();
      }
      @Override
      public Adapter caseThrowStatement(ThrowStatement object)
      {
        return createThrowStatementAdapter();
      }
      @Override
      public Adapter casePlaceHolderStatement(PlaceHolderStatement object)
      {
        return createPlaceHolderStatementAdapter();
      }
      @Override
      public Adapter caseExpression(Expression object)
      {
        return createExpressionAdapter();
      }
      @Override
      public Adapter caseSpecialExpression(SpecialExpression object)
      {
        return createSpecialExpressionAdapter();
      }
      @Override
      public Adapter caseNotExpression(NotExpression object)
      {
        return createNotExpressionAdapter();
      }
      @Override
      public Adapter casePreIncExpression(PreIncExpression object)
      {
        return createPreIncExpressionAdapter();
      }
      @Override
      public Adapter casePreDecExpression(PreDecExpression object)
      {
        return createPreDecExpressionAdapter();
      }
      @Override
      public Adapter caseBinaryNotExpression(BinaryNotExpression object)
      {
        return createBinaryNotExpressionAdapter();
      }
      @Override
      public Adapter caseSignExpression(SignExpression object)
      {
        return createSignExpressionAdapter();
      }
      @Override
      public Adapter caseNewExpression(NewExpression object)
      {
        return createNewExpressionAdapter();
      }
      @Override
      public Adapter caseLiteral(Literal object)
      {
        return createLiteralAdapter();
      }
      @Override
      public Adapter caseBooleanConst(BooleanConst object)
      {
        return createBooleanConstAdapter();
      }
      @Override
      public Adapter caseNumber(org.unicam.tryGrammar.tryGrammar.Number object)
      {
        return createNumberAdapter();
      }
      @Override
      public Adapter caseNumberDimensionless(NumberDimensionless object)
      {
        return createNumberDimensionlessAdapter();
      }
      @Override
      public Adapter caseEther(Ether object)
      {
        return createEtherAdapter();
      }
      @Override
      public Adapter caseTime(Time object)
      {
        return createTimeAdapter();
      }
      @Override
      public Adapter caseStringLiteral(StringLiteral object)
      {
        return createStringLiteralAdapter();
      }
      @Override
      public Adapter caseTypeCast(TypeCast object)
      {
        return createTypeCastAdapter();
      }
      @Override
      public Adapter caseNow(Now object)
      {
        return createNowAdapter();
      }
      @Override
      public Adapter caseSpecialVariables(SpecialVariables object)
      {
        return createSpecialVariablesAdapter();
      }
      @Override
      public Adapter caseVarVariableTypeDeclaration(VarVariableTypeDeclaration object)
      {
        return createVarVariableTypeDeclarationAdapter();
      }
      @Override
      public Adapter caseContinue(Continue object)
      {
        return createContinueAdapter();
      }
      @Override
      public Adapter caseAssignment(Assignment object)
      {
        return createAssignmentAdapter();
      }
      @Override
      public Adapter caseVariableDeclarationExpression(VariableDeclarationExpression object)
      {
        return createVariableDeclarationExpressionAdapter();
      }
      @Override
      public Adapter caseOr(Or object)
      {
        return createOrAdapter();
      }
      @Override
      public Adapter caseAnd(And object)
      {
        return createAndAdapter();
      }
      @Override
      public Adapter caseEquality(Equality object)
      {
        return createEqualityAdapter();
      }
      @Override
      public Adapter caseComparison(Comparison object)
      {
        return createComparisonAdapter();
      }
      @Override
      public Adapter caseBitOr(BitOr object)
      {
        return createBitOrAdapter();
      }
      @Override
      public Adapter caseBitXor(BitXor object)
      {
        return createBitXorAdapter();
      }
      @Override
      public Adapter caseBitAnd(BitAnd object)
      {
        return createBitAndAdapter();
      }
      @Override
      public Adapter caseShift(Shift object)
      {
        return createShiftAdapter();
      }
      @Override
      public Adapter caseAddSub(AddSub object)
      {
        return createAddSubAdapter();
      }
      @Override
      public Adapter caseMulDivMod(MulDivMod object)
      {
        return createMulDivModAdapter();
      }
      @Override
      public Adapter caseExponent(Exponent object)
      {
        return createExponentAdapter();
      }
      @Override
      public Adapter casePostIncDecExpression(PostIncDecExpression object)
      {
        return createPostIncDecExpressionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Solidity <em>Solidity</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Solidity
   * @generated
   */
  public Adapter createSolidityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ImportDirective <em>Import Directive</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ImportDirective
   * @generated
   */
  public Adapter createImportDirectiveAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.SymbolAlias <em>Symbol Alias</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.SymbolAlias
   * @generated
   */
  public Adapter createSymbolAliasAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ContractOrLibrary <em>Contract Or Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ContractOrLibrary
   * @generated
   */
  public Adapter createContractOrLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Contract <em>Contract</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Contract
   * @generated
   */
  public Adapter createContractAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Library <em>Library</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Library
   * @generated
   */
  public Adapter createLibraryAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.DefinitionBody <em>Definition Body</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.DefinitionBody
   * @generated
   */
  public Adapter createDefinitionBodyAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.InheritanceSpecifier <em>Inheritance Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.InheritanceSpecifier
   * @generated
   */
  public Adapter createInheritanceSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.FunctionCallListArguments <em>Function Call List Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.FunctionCallListArguments
   * @generated
   */
  public Adapter createFunctionCallListArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.FunctionCallArguments <em>Function Call Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.FunctionCallArguments
   * @generated
   */
  public Adapter createFunctionCallArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.FunctionCallArg <em>Function Call Arg</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.FunctionCallArg
   * @generated
   */
  public Adapter createFunctionCallArgAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.FunctionDefinition <em>Function Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.FunctionDefinition
   * @generated
   */
  public Adapter createFunctionDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.FunctionDefinitionOptionalElement <em>Function Definition Optional Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.FunctionDefinitionOptionalElement
   * @generated
   */
  public Adapter createFunctionDefinitionOptionalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Const <em>Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Const
   * @generated
   */
  public Adapter createConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.VisibilitySpecifier <em>Visibility Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.VisibilitySpecifier
   * @generated
   */
  public Adapter createVisibilitySpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.StructDefinition <em>Struct Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.StructDefinition
   * @generated
   */
  public Adapter createStructDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.EnumDefinition <em>Enum Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.EnumDefinition
   * @generated
   */
  public Adapter createEnumDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.EnumValue <em>Enum Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.EnumValue
   * @generated
   */
  public Adapter createEnumValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Variable <em>Variable</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Variable
   * @generated
   */
  public Adapter createVariableAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Statement <em>Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Statement
   * @generated
   */
  public Adapter createStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.StandardVariableDeclaration <em>Standard Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.StandardVariableDeclaration
   * @generated
   */
  public Adapter createStandardVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.VarVariableDeclaration <em>Var Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.VarVariableDeclaration
   * @generated
   */
  public Adapter createVarVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.VarVariableTupleVariableDeclaration <em>Var Variable Tuple Variable Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.VarVariableTupleVariableDeclaration
   * @generated
   */
  public Adapter createVarVariableTupleVariableDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.VariableDeclarationOptionalElement <em>Variable Declaration Optional Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.VariableDeclarationOptionalElement
   * @generated
   */
  public Adapter createVariableDeclarationOptionalElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.IndexedSpecifer <em>Indexed Specifer</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.IndexedSpecifer
   * @generated
   */
  public Adapter createIndexedSpeciferAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ConstantSpecifier <em>Constant Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ConstantSpecifier
   * @generated
   */
  public Adapter createConstantSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.LocationSpecifier <em>Location Specifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.LocationSpecifier
   * @generated
   */
  public Adapter createLocationSpecifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Type <em>Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Type
   * @generated
   */
  public Adapter createTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.StandardType <em>Standard Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.StandardType
   * @generated
   */
  public Adapter createStandardTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.StandardTypeWithoutQualifiedIdentifier <em>Standard Type Without Qualified Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.StandardTypeWithoutQualifiedIdentifier
   * @generated
   */
  public Adapter createStandardTypeWithoutQualifiedIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ElementaryType <em>Elementary Type</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ElementaryType
   * @generated
   */
  public Adapter createElementaryTypeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Mapping <em>Mapping</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Mapping
   * @generated
   */
  public Adapter createMappingAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ArrayDimensions <em>Array Dimensions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ArrayDimensions
   * @generated
   */
  public Adapter createArrayDimensionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Tuple <em>Tuple</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Tuple
   * @generated
   */
  public Adapter createTupleAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.TupleSeparator <em>Tuple Separator</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.TupleSeparator
   * @generated
   */
  public Adapter createTupleSeparatorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.SimpleStatement <em>Simple Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.SimpleStatement
   * @generated
   */
  public Adapter createSimpleStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.SimpleStatement2 <em>Simple Statement2</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.SimpleStatement2
   * @generated
   */
  public Adapter createSimpleStatement2Adapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ExpressionStatement <em>Expression Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ExpressionStatement
   * @generated
   */
  public Adapter createExpressionStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.QualifiedIdentifier <em>Qualified Identifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.QualifiedIdentifier
   * @generated
   */
  public Adapter createQualifiedIdentifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Qualifier <em>Qualifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Qualifier
   * @generated
   */
  public Adapter createQualifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Field <em>Field</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Field
   * @generated
   */
  public Adapter createFieldAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Index <em>Index</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Index
   * @generated
   */
  public Adapter createIndexAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Arguments <em>Arguments</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Arguments
   * @generated
   */
  public Adapter createArgumentsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Modifier <em>Modifier</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Modifier
   * @generated
   */
  public Adapter createModifierAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Event <em>Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Event
   * @generated
   */
  public Adapter createEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ModifierInvocation <em>Modifier Invocation</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ModifierInvocation
   * @generated
   */
  public Adapter createModifierInvocationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ParameterList <em>Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ParameterList
   * @generated
   */
  public Adapter createParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ReturnsParameterList <em>Returns Parameter List</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ReturnsParameterList
   * @generated
   */
  public Adapter createReturnsParameterListAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ReturnParameterDeclaration <em>Return Parameter Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ReturnParameterDeclaration
   * @generated
   */
  public Adapter createReturnParameterDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.DeleteStatement <em>Delete Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.DeleteStatement
   * @generated
   */
  public Adapter createDeleteStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.IfStatement <em>If Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.IfStatement
   * @generated
   */
  public Adapter createIfStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.WhileStatement <em>While Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.WhileStatement
   * @generated
   */
  public Adapter createWhileStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ForStatement <em>For Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ForStatement
   * @generated
   */
  public Adapter createForStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Block <em>Block</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Block
   * @generated
   */
  public Adapter createBlockAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ContinueStatement <em>Continue Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ContinueStatement
   * @generated
   */
  public Adapter createContinueStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.BreakStatement <em>Break Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.BreakStatement
   * @generated
   */
  public Adapter createBreakStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ReturnStatement <em>Return Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ReturnStatement
   * @generated
   */
  public Adapter createReturnStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.ThrowStatement <em>Throw Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.ThrowStatement
   * @generated
   */
  public Adapter createThrowStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.PlaceHolderStatement <em>Place Holder Statement</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.PlaceHolderStatement
   * @generated
   */
  public Adapter createPlaceHolderStatementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Expression <em>Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Expression
   * @generated
   */
  public Adapter createExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.SpecialExpression <em>Special Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.SpecialExpression
   * @generated
   */
  public Adapter createSpecialExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.NotExpression <em>Not Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.NotExpression
   * @generated
   */
  public Adapter createNotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.PreIncExpression <em>Pre Inc Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.PreIncExpression
   * @generated
   */
  public Adapter createPreIncExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.PreDecExpression <em>Pre Dec Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.PreDecExpression
   * @generated
   */
  public Adapter createPreDecExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.BinaryNotExpression <em>Binary Not Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.BinaryNotExpression
   * @generated
   */
  public Adapter createBinaryNotExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.SignExpression <em>Sign Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.SignExpression
   * @generated
   */
  public Adapter createSignExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.NewExpression <em>New Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.NewExpression
   * @generated
   */
  public Adapter createNewExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Literal <em>Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Literal
   * @generated
   */
  public Adapter createLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.BooleanConst <em>Boolean Const</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.BooleanConst
   * @generated
   */
  public Adapter createBooleanConstAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Number <em>Number</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Number
   * @generated
   */
  public Adapter createNumberAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.NumberDimensionless <em>Number Dimensionless</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.NumberDimensionless
   * @generated
   */
  public Adapter createNumberDimensionlessAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Ether <em>Ether</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Ether
   * @generated
   */
  public Adapter createEtherAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Time <em>Time</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Time
   * @generated
   */
  public Adapter createTimeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.StringLiteral <em>String Literal</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.StringLiteral
   * @generated
   */
  public Adapter createStringLiteralAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.TypeCast <em>Type Cast</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.TypeCast
   * @generated
   */
  public Adapter createTypeCastAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Now <em>Now</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Now
   * @generated
   */
  public Adapter createNowAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.SpecialVariables <em>Special Variables</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.SpecialVariables
   * @generated
   */
  public Adapter createSpecialVariablesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.VarVariableTypeDeclaration <em>Var Variable Type Declaration</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.VarVariableTypeDeclaration
   * @generated
   */
  public Adapter createVarVariableTypeDeclarationAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Continue <em>Continue</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Continue
   * @generated
   */
  public Adapter createContinueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Assignment <em>Assignment</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Assignment
   * @generated
   */
  public Adapter createAssignmentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.VariableDeclarationExpression <em>Variable Declaration Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.VariableDeclarationExpression
   * @generated
   */
  public Adapter createVariableDeclarationExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Or <em>Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Or
   * @generated
   */
  public Adapter createOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.And <em>And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.And
   * @generated
   */
  public Adapter createAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Equality <em>Equality</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Equality
   * @generated
   */
  public Adapter createEqualityAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Comparison <em>Comparison</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Comparison
   * @generated
   */
  public Adapter createComparisonAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.BitOr <em>Bit Or</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.BitOr
   * @generated
   */
  public Adapter createBitOrAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.BitXor <em>Bit Xor</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.BitXor
   * @generated
   */
  public Adapter createBitXorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.BitAnd <em>Bit And</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.BitAnd
   * @generated
   */
  public Adapter createBitAndAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Shift <em>Shift</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Shift
   * @generated
   */
  public Adapter createShiftAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.AddSub <em>Add Sub</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.AddSub
   * @generated
   */
  public Adapter createAddSubAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.MulDivMod <em>Mul Div Mod</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.MulDivMod
   * @generated
   */
  public Adapter createMulDivModAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.Exponent <em>Exponent</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.Exponent
   * @generated
   */
  public Adapter createExponentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.unicam.tryGrammar.tryGrammar.PostIncDecExpression <em>Post Inc Dec Expression</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.unicam.tryGrammar.tryGrammar.PostIncDecExpression
   * @generated
   */
  public Adapter createPostIncDecExpressionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //TryGrammarAdapterFactory
