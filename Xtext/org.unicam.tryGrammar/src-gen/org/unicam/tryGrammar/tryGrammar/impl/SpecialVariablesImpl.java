/**
 * generated by Xtext 2.19.0
 */
package org.unicam.tryGrammar.tryGrammar.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.unicam.tryGrammar.tryGrammar.Qualifier;
import org.unicam.tryGrammar.tryGrammar.SpecialVariables;
import org.unicam.tryGrammar.tryGrammar.SpecialVariablesTypeEnum;
import org.unicam.tryGrammar.tryGrammar.TryGrammarPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Special Variables</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unicam.tryGrammar.tryGrammar.impl.SpecialVariablesImpl#getType <em>Type</em>}</li>
 *   <li>{@link org.unicam.tryGrammar.tryGrammar.impl.SpecialVariablesImpl#getField <em>Field</em>}</li>
 *   <li>{@link org.unicam.tryGrammar.tryGrammar.impl.SpecialVariablesImpl#getQualifiers <em>Qualifiers</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SpecialVariablesImpl extends LiteralImpl implements SpecialVariables
{
  /**
   * The default value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected static final SpecialVariablesTypeEnum TYPE_EDEFAULT = SpecialVariablesTypeEnum.MSG;

  /**
   * The cached value of the '{@link #getType() <em>Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getType()
   * @generated
   * @ordered
   */
  protected SpecialVariablesTypeEnum type = TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getField() <em>Field</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getField()
   * @generated
   * @ordered
   */
  protected static final String FIELD_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getField() <em>Field</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getField()
   * @generated
   * @ordered
   */
  protected String field = FIELD_EDEFAULT;

  /**
   * The cached value of the '{@link #getQualifiers() <em>Qualifiers</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getQualifiers()
   * @generated
   * @ordered
   */
  protected EList<Qualifier> qualifiers;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SpecialVariablesImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TryGrammarPackage.eINSTANCE.getSpecialVariables();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SpecialVariablesTypeEnum getType()
  {
    return type;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setType(SpecialVariablesTypeEnum newType)
  {
    SpecialVariablesTypeEnum oldType = type;
    type = newType == null ? TYPE_EDEFAULT : newType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TryGrammarPackage.SPECIAL_VARIABLES__TYPE, oldType, type));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getField()
  {
    return field;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setField(String newField)
  {
    String oldField = field;
    field = newField;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TryGrammarPackage.SPECIAL_VARIABLES__FIELD, oldField, field));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Qualifier> getQualifiers()
  {
    if (qualifiers == null)
    {
      qualifiers = new EObjectContainmentEList<Qualifier>(Qualifier.class, this, TryGrammarPackage.SPECIAL_VARIABLES__QUALIFIERS);
    }
    return qualifiers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TryGrammarPackage.SPECIAL_VARIABLES__QUALIFIERS:
        return ((InternalEList<?>)getQualifiers()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TryGrammarPackage.SPECIAL_VARIABLES__TYPE:
        return getType();
      case TryGrammarPackage.SPECIAL_VARIABLES__FIELD:
        return getField();
      case TryGrammarPackage.SPECIAL_VARIABLES__QUALIFIERS:
        return getQualifiers();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TryGrammarPackage.SPECIAL_VARIABLES__TYPE:
        setType((SpecialVariablesTypeEnum)newValue);
        return;
      case TryGrammarPackage.SPECIAL_VARIABLES__FIELD:
        setField((String)newValue);
        return;
      case TryGrammarPackage.SPECIAL_VARIABLES__QUALIFIERS:
        getQualifiers().clear();
        getQualifiers().addAll((Collection<? extends Qualifier>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TryGrammarPackage.SPECIAL_VARIABLES__TYPE:
        setType(TYPE_EDEFAULT);
        return;
      case TryGrammarPackage.SPECIAL_VARIABLES__FIELD:
        setField(FIELD_EDEFAULT);
        return;
      case TryGrammarPackage.SPECIAL_VARIABLES__QUALIFIERS:
        getQualifiers().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TryGrammarPackage.SPECIAL_VARIABLES__TYPE:
        return type != TYPE_EDEFAULT;
      case TryGrammarPackage.SPECIAL_VARIABLES__FIELD:
        return FIELD_EDEFAULT == null ? field != null : !FIELD_EDEFAULT.equals(field);
      case TryGrammarPackage.SPECIAL_VARIABLES__QUALIFIERS:
        return qualifiers != null && !qualifiers.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (type: ");
    result.append(type);
    result.append(", field: ");
    result.append(field);
    result.append(')');
    return result.toString();
  }

} //SpecialVariablesImpl
