/**
 * generated by Xtext 2.21.0
 */
package org.unicam.myGrammar.ui.labeling;

import com.google.inject.Inject;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.unicam.myGrammar.optGrammar.ArrayableDeclaration;
import org.unicam.myGrammar.optGrammar.ConstructorDefinition;
import org.unicam.myGrammar.optGrammar.EnumDefinition;
import org.unicam.myGrammar.optGrammar.Event;
import org.unicam.myGrammar.optGrammar.FunctionDefinition;
import org.unicam.myGrammar.optGrammar.Mapping;
import org.unicam.myGrammar.optGrammar.Modifier;
import org.unicam.myGrammar.optGrammar.NonArrayableDeclaration;
import org.unicam.myGrammar.optGrammar.ParameterList;
import org.unicam.myGrammar.optGrammar.SizedDeclaration;
import org.unicam.myGrammar.optGrammar.StructDefinition;
import org.unicam.myGrammar.optGrammar.Type;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
@SuppressWarnings("all")
public class OptGrammarLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public OptGrammarLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final EnumDefinition ele) {
    String _name = ele.getName();
    return ("Enum: " + _name);
  }
  
  public String text(final StructDefinition ele) {
    String _name = ele.getName();
    return ("Struct: " + _name);
  }
  
  public String text(final ArrayableDeclaration ele) {
    String _text = this.getText(ele.getType());
    String _plus = (_text + ": ");
    String _name = ele.getName();
    return (_plus + _name);
  }
  
  public String text(final NonArrayableDeclaration ele) {
    String _text = this.getText(ele.getType());
    String _plus = (_text + ": ");
    String _name = ele.getName();
    return (_plus + _name);
  }
  
  public String text(final ConstructorDefinition ele) {
    String _xblockexpression = null;
    {
      String _name = ele.getName();
      String _plus = ("Constructor: " + _name);
      /* (_plus + "{ "); */
      ele.getParameters();
      _xblockexpression = " }";
    }
    return _xblockexpression;
  }
  
  public String text(final FunctionDefinition ele) {
    String _xblockexpression = null;
    {
      String _name = ele.getName();
      String _plus = ("Function: " + _name);
      /* (_plus + "{ "); */
      ele.getParameters();
      _xblockexpression = " }";
    }
    return _xblockexpression;
  }
  
  public String text(final Mapping ele) {
    SizedDeclaration _keyType = ele.getKeyType();
    String _plus = ("Mapping " + _keyType);
    String _plus_1 = (_plus + " => ");
    Type _valueType = ele.getValueType();
    return (_plus_1 + _valueType);
  }
  
  public String text(final Modifier ele) {
    String _name = ele.getName();
    String _plus = ("Modifier: " + _name);
    String _plus_1 = (_plus + "{ ");
    ParameterList _parameters = ele.getParameters();
    String _plus_2 = (_plus_1 + _parameters);
    return (_plus_2 + " }");
  }
  
  public String text(final Event ele) {
    String _name = ele.getName();
    String _plus = ("Event: " + _name);
    String _plus_1 = (_plus + "{ ");
    ParameterList _parameters = ele.getParameters();
    String _plus_2 = (_plus_1 + _parameters);
    return (_plus_2 + " }");
  }
}
