/*
 * generated by Xtext 2.21.0
 */
package org.unicam.myGrammar.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.unicam.myGrammar.validation.ValidatorSupport
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.unicam.myGrammar.optGrammar.StructDefinition
import org.unicam.myGrammar.optGrammar.DefinitionBody
import java.util.ArrayList
import org.unicam.myGrammar.optGrammar.Contract

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class OptGrammarQuickfixProvider extends DefaultQuickfixProvider {
	@Fix(ValidatorSupport.OPTIMIZED_STRUCT_MEMBERS)
	def optmizeStructFields(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Optimize the struct", // label
			"By clicking here the order of the variables inside the struct will be optimized to take up less memory.", // description
			"", // icon
			[ element, context |
				{
					val newFields = new ArrayList<DefinitionBody>();
					val indexes = issue.data.map[x|Integer.parseInt(x)]

					indexes.forEach[x|newFields.add((element as StructDefinition).members.get(x))]

					(element as StructDefinition).eSet((element as StructDefinition).members.get(0).eContainingFeature,
						newFields)
				}
			]
		)
	}

	@Fix(ValidatorSupport.OPTIMIZE_CONTRACT_DECLARATIONS)
	def optimizeContractDeclaration(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(
			issue,
			"Optimize the order of the variables",
			"By clicking here the order of the variable declarations will be optimized to take up less memory.",
			"",
			[ element, context |
				{
					val newFields = new ArrayList<DefinitionBody>();
					val indexes = issue.data.map[x|Integer.parseInt(x)]

					indexes.forEach [ x |
						{
							newFields.add(DefinitionBody.cast((element as Contract).body.get(x)))
						}
					]
					newFields.forEach[x|(element as Contract).body.remove(x)]
					(element as Contract).body.addAll(indexes.sort.get(0), newFields)
				}
			]
		)
	}
}
