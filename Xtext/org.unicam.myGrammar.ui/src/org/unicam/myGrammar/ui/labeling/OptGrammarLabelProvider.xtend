/*
 * generated by Xtext 2.21.0
 */
package org.unicam.myGrammar.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.unicam.myGrammar.optGrammar.EnumDefinition
import org.unicam.myGrammar.optGrammar.StructDefinition
import org.unicam.myGrammar.optGrammar.ArrayableDeclaration
import org.unicam.myGrammar.optGrammar.NonArrayableDeclaration
import org.unicam.myGrammar.optGrammar.FunctionDefinition

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#label-provider
 */
class OptGrammarLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	def text(EnumDefinition ele) {
		ele.name + ': Enum'
	}

	def text(StructDefinition ele) {
		ele.name + ': Structure'
	}

	def text(ArrayableDeclaration ele) {
		ele.name + ': ' + ele.type.getText
	}

	def text(NonArrayableDeclaration ele) {
		ele.name + ': ' + ele.type.getText
	}

	def text(FunctionDefinition ele) {
		ele.name + ': Function'
	}

/*
 * def text(Mapping ele) {
 * ele.name + 'Map<' + ele.type.type + ' , ' + (
 * (ele.secondRef !== null)
 * ? ele.secondRef.getText.split(': ').get(1)
 * : (
 * ((ele.second instanceof NamedType) ? (ele.second as NamedType).type : (ele.
 * second as UnnamedMappingDeclaration).getText)
 * )
 * ) + '>'
 * }
 */
}
