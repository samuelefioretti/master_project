/**
 * generated by Xtext 2.19.0
 */
package org.unicam.tryIde.solidity.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.unicam.tryIde.solidity.Expression;
import org.unicam.tryIde.solidity.SolidityPackage;
import org.unicam.tryIde.solidity.Tuple;
import org.unicam.tryIde.solidity.VarVariableTupleVariableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Var Variable Tuple Variable Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.unicam.tryIde.solidity.impl.VarVariableTupleVariableDeclarationImpl#getVarType <em>Var Type</em>}</li>
 *   <li>{@link org.unicam.tryIde.solidity.impl.VarVariableTupleVariableDeclarationImpl#getTuple <em>Tuple</em>}</li>
 *   <li>{@link org.unicam.tryIde.solidity.impl.VarVariableTupleVariableDeclarationImpl#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.unicam.tryIde.solidity.impl.VarVariableTupleVariableDeclarationImpl#isSemicolon <em>Semicolon</em>}</li>
 * </ul>
 *
 * @generated
 */
public class VarVariableTupleVariableDeclarationImpl extends StatementImpl implements VarVariableTupleVariableDeclaration
{
  /**
   * The default value of the '{@link #getVarType() <em>Var Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarType()
   * @generated
   * @ordered
   */
  protected static final String VAR_TYPE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getVarType() <em>Var Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVarType()
   * @generated
   * @ordered
   */
  protected String varType = VAR_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getTuple() <em>Tuple</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTuple()
   * @generated
   * @ordered
   */
  protected Tuple tuple;

  /**
   * The cached value of the '{@link #getExpression() <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpression()
   * @generated
   * @ordered
   */
  protected Expression expression;

  /**
   * The default value of the '{@link #isSemicolon() <em>Semicolon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemicolon()
   * @generated
   * @ordered
   */
  protected static final boolean SEMICOLON_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isSemicolon() <em>Semicolon</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isSemicolon()
   * @generated
   * @ordered
   */
  protected boolean semicolon = SEMICOLON_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VarVariableTupleVariableDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SolidityPackage.eINSTANCE.getVarVariableTupleVariableDeclaration();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getVarType()
  {
    return varType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVarType(String newVarType)
  {
    String oldVarType = varType;
    varType = newVarType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__VAR_TYPE, oldVarType, varType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tuple getTuple()
  {
    return tuple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTuple(Tuple newTuple, NotificationChain msgs)
  {
    Tuple oldTuple = tuple;
    tuple = newTuple;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE, oldTuple, newTuple);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTuple(Tuple newTuple)
  {
    if (newTuple != tuple)
    {
      NotificationChain msgs = null;
      if (tuple != null)
        msgs = ((InternalEObject)tuple).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE, null, msgs);
      if (newTuple != null)
        msgs = ((InternalEObject)newTuple).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE, null, msgs);
      msgs = basicSetTuple(newTuple, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE, newTuple, newTuple));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getExpression()
  {
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpression(Expression newExpression, NotificationChain msgs)
  {
    Expression oldExpression = expression;
    expression = newExpression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION, oldExpression, newExpression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpression(Expression newExpression)
  {
    if (newExpression != expression)
    {
      NotificationChain msgs = null;
      if (expression != null)
        msgs = ((InternalEObject)expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION, null, msgs);
      if (newExpression != null)
        msgs = ((InternalEObject)newExpression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION, null, msgs);
      msgs = basicSetExpression(newExpression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION, newExpression, newExpression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isSemicolon()
  {
    return semicolon;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSemicolon(boolean newSemicolon)
  {
    boolean oldSemicolon = semicolon;
    semicolon = newSemicolon;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__SEMICOLON, oldSemicolon, semicolon));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE:
        return basicSetTuple(null, msgs);
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION:
        return basicSetExpression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__VAR_TYPE:
        return getVarType();
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE:
        return getTuple();
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION:
        return getExpression();
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__SEMICOLON:
        return isSemicolon();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__VAR_TYPE:
        setVarType((String)newValue);
        return;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE:
        setTuple((Tuple)newValue);
        return;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION:
        setExpression((Expression)newValue);
        return;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__SEMICOLON:
        setSemicolon((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__VAR_TYPE:
        setVarType(VAR_TYPE_EDEFAULT);
        return;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE:
        setTuple((Tuple)null);
        return;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION:
        setExpression((Expression)null);
        return;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__SEMICOLON:
        setSemicolon(SEMICOLON_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__VAR_TYPE:
        return VAR_TYPE_EDEFAULT == null ? varType != null : !VAR_TYPE_EDEFAULT.equals(varType);
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__TUPLE:
        return tuple != null;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__EXPRESSION:
        return expression != null;
      case SolidityPackage.VAR_VARIABLE_TUPLE_VARIABLE_DECLARATION__SEMICOLON:
        return semicolon != SEMICOLON_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (varType: ");
    result.append(varType);
    result.append(", semicolon: ");
    result.append(semicolon);
    result.append(')');
    return result.toString();
  }

} //VarVariableTupleVariableDeclarationImpl
